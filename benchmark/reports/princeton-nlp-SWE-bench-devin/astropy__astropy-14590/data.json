{
  "instance_id": "astropy__astropy-14590",
  "model_patch": "diff --git a/astropy/utils/masked/core.py b/astropy/utils/masked/core.py\nindex 8a634cb148..f299df0290 100644\n--- a/astropy/utils/masked/core.py\n+++ b/astropy/utils/masked/core.py\n@@ -693,13 +693,17 @@ class MaskedNDArray(Masked, np.ndarray, base_cls=np.ndarray, data_cls=np.ndarray\n         out_mask = None\n         if out is not None:\n             out_unmasked, out_masks = self._get_data_and_masks(*out)\n-            for d, m in zip(out_unmasked, out_masks):\n-                if m is None:\n-                    # TODO: allow writing to unmasked output if nothing is masked?\n-                    if d is not None:\n-                        raise TypeError(\"cannot write to unmasked output\")\n-                elif out_mask is None:\n-                    out_mask = m\n+            if any(masks):\n+                for d, m in zip(out_unmasked, out_masks):\n+                    if m is None:\n+                        # If any input is masked, we cannot write to an unmasked output\n+                        if d is not None:\n+                            raise TypeError(\"cannot write to unmasked output\")\n+                    elif out_mask is None:\n+                        out_mask = m\n+            else:\n+                # If no inputs are masked, allow writing to unmasked output\n+                out_mask = np.zeros_like(out_unmasked[0], dtype=bool)\n \n         unmasked, masks = self._get_data_and_masks(*inputs)\n \n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "astropy/utils/masked/core.py"
  ],
  "repo": "astropy/astropy",
  "base_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
  "patch": "diff --git a/astropy/utils/masked/core.py b/astropy/utils/masked/core.py\n--- a/astropy/utils/masked/core.py\n+++ b/astropy/utils/masked/core.py\n@@ -671,20 +671,35 @@ def __ne__(self, other):\n         )\n         return result.any(axis=-1)\n \n-    def _combine_masks(self, masks, out=None):\n+    def _combine_masks(self, masks, out=None, where=True, copy=True):\n+        \"\"\"Combine masks, possibly storing it in some output.\n+\n+        Parameters\n+        ----------\n+        masks : tuple of array of bool or None\n+            Input masks.  Any that are `None` or `False` are ignored.\n+            Should broadcast to each other.\n+        out : output mask array, optional\n+            Possible output array to hold the result.\n+        where : array of bool, optional\n+            Which elements of the output array to fill.\n+        copy : bool optional\n+            Whether to ensure a copy is made. Only relevant if a single\n+            input mask is not `None`, and ``out`` is not given.\n+        \"\"\"\n         masks = [m for m in masks if m is not None and m is not False]\n         if not masks:\n             return False\n         if len(masks) == 1:\n             if out is None:\n-                return masks[0].copy()\n+                return masks[0].copy() if copy else masks[0]\n             else:\n-                np.copyto(out, masks[0])\n+                np.copyto(out, masks[0], where=where)\n                 return out\n \n-        out = np.logical_or(masks[0], masks[1], out=out)\n+        out = np.logical_or(masks[0], masks[1], out=out, where=where)\n         for mask in masks[2:]:\n-            np.logical_or(out, mask, out=out)\n+            np.logical_or(out, mask, out=out, where=where)\n         return out\n \n     def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n@@ -701,6 +716,15 @@ def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n                 elif out_mask is None:\n                     out_mask = m\n \n+        # TODO: where is only needed for __call__ and reduce;\n+        # this is very fast, but still worth separating out?\n+        where = kwargs.pop(\"where\", True)\n+        if where is True:\n+            where_unmasked = True\n+            where_mask = None\n+        else:\n+            where_unmasked, where_mask = self._get_data_and_mask(where)\n+\n         unmasked, masks = self._get_data_and_masks(*inputs)\n \n         if ufunc.signature:\n@@ -731,7 +755,7 @@ def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n                         else np.logical_or.reduce(mask1)\n                     )\n \n-                mask = self._combine_masks(masks, out=out_mask)\n+                mask = self._combine_masks(masks, out=out_mask, copy=False)\n \n             else:\n                 # Parse signature with private numpy function. Note it\n@@ -769,7 +793,11 @@ def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n \n         elif method == \"__call__\":\n             # Regular ufunc call.\n-            mask = self._combine_masks(masks, out=out_mask)\n+            # Combine the masks from the input, possibly selecting elements.\n+            mask = self._combine_masks(masks, out=out_mask, where=where_unmasked)\n+            # If relevant, also mask output elements for which where was masked.\n+            if where_mask is not None:\n+                mask |= where_mask\n \n         elif method == \"outer\":\n             # Must have two arguments; adjust masks as will be done for data.\n@@ -779,51 +807,50 @@ def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n \n         elif method in {\"reduce\", \"accumulate\"}:\n             # Reductions like np.add.reduce (sum).\n-            if masks[0] is not None:\n+            # Treat any masked where as if the input element was masked.\n+            mask = self._combine_masks((masks[0], where_mask), copy=False)\n+            if mask is not False:\n                 # By default, we simply propagate masks, since for\n                 # things like np.sum, it makes no sense to do otherwise.\n                 # Individual methods need to override as needed.\n-                # TODO: take care of 'out' too?\n                 if method == \"reduce\":\n                     axis = kwargs.get(\"axis\", None)\n                     keepdims = kwargs.get(\"keepdims\", False)\n-                    where = kwargs.get(\"where\", True)\n                     mask = np.logical_or.reduce(\n-                        masks[0],\n-                        where=where,\n+                        mask,\n+                        where=where_unmasked,\n                         axis=axis,\n                         keepdims=keepdims,\n                         out=out_mask,\n                     )\n-                    if where is not True:\n-                        # Mask also whole rows that were not selected by where,\n-                        # so would have been left as unmasked above.\n-                        mask |= np.logical_and.reduce(\n-                            masks[0], where=where, axis=axis, keepdims=keepdims\n+                    if where_unmasked is not True:\n+                        # Mask also whole rows in which no elements were selected;\n+                        # those will have been left as unmasked above.\n+                        mask |= ~np.logical_or.reduce(\n+                            where_unmasked, axis=axis, keepdims=keepdims\n                         )\n \n                 else:\n                     # Accumulate\n                     axis = kwargs.get(\"axis\", 0)\n-                    mask = np.logical_or.accumulate(masks[0], axis=axis, out=out_mask)\n+                    mask = np.logical_or.accumulate(mask, axis=axis, out=out_mask)\n \n-            elif out is not None:\n-                mask = False\n-\n-            else:  # pragma: no cover\n+            elif out is None:\n                 # Can only get here if neither input nor output was masked, but\n-                # perhaps axis or where was masked (in NUMPY_LT_1_21 this is\n-                # possible).  We don't support this.\n+                # perhaps where was masked (possible in \"not NUMPY_LT_1_25\" and\n+                # in NUMPY_LT_1_21 (latter also allowed axis).\n+                # We don't support this.\n                 return NotImplemented\n \n         elif method in {\"reduceat\", \"at\"}:  # pragma: no cover\n-            # TODO: implement things like np.add.accumulate (used for cumsum).\n             raise NotImplementedError(\n                 \"masked instances cannot yet deal with 'reduceat' or 'at'.\"\n             )\n \n         if out_unmasked is not None:\n             kwargs[\"out\"] = out_unmasked\n+        if where_unmasked is not True:\n+            kwargs[\"where\"] = where_unmasked\n         result = getattr(ufunc, method)(*unmasked, **kwargs)\n \n         if result is None:  # pragma: no cover\n",
  "test_patch": "diff --git a/astropy/utils/masked/tests/test_functions.py b/astropy/utils/masked/tests/test_functions.py\n--- a/astropy/utils/masked/tests/test_functions.py\n+++ b/astropy/utils/masked/tests/test_functions.py\n@@ -11,6 +11,7 @@\n \n from astropy import units as u\n from astropy.units import Quantity\n+from astropy.utils.compat.numpycompat import NUMPY_LT_1_25\n from astropy.utils.masked.core import Masked\n \n from .test_masked import (\n@@ -44,6 +45,57 @@ def test_ufunc_inplace(self, ufunc):\n         assert result is out\n         assert_masked_equal(result, ma_mb)\n \n+    @pytest.mark.parametrize(\"base_mask\", [True, False])\n+    def test_ufunc_inplace_where(self, base_mask):\n+        # Construct base filled with -9 and base_mask (copying to get unit/class).\n+        base = self.ma.copy()\n+        base.unmasked.view(np.ndarray)[...] = -9.0\n+        base._mask[...] = base_mask\n+        out = base.copy()\n+        where = np.array([[True, False, False], [False, True, False]])\n+        result = np.add(self.ma, self.mb, out=out, where=where)\n+        # Direct checks.\n+        assert np.all(result.unmasked[~where] == base.unmasked[0, 0])\n+        assert np.all(result.unmasked[where] == (self.a + self.b)[where])\n+        # Full comparison.\n+        expected = base.unmasked.copy()\n+        np.add(self.a, self.b, out=expected, where=where)\n+        expected_mask = base.mask.copy()\n+        np.logical_or(self.mask_a, self.mask_b, out=expected_mask, where=where)\n+        assert_array_equal(result.unmasked, expected)\n+        assert_array_equal(result.mask, expected_mask)\n+\n+    @pytest.mark.parametrize(\"base_mask\", [True, False])\n+    def test_ufunc_inplace_masked_where(self, base_mask):\n+        base = self.ma.copy()\n+        base.unmasked.view(np.ndarray)[...] = -9.0\n+        base._mask[...] = base_mask\n+        out = base.copy()\n+        where = Masked(\n+            [[True, False, True], [False, False, True]],\n+            mask=[[True, False, False], [True, False, True]],\n+        )\n+        result = np.add(self.ma, self.mb, out=out, where=where)\n+        # Direct checks.\n+        assert np.all(result.unmasked[~where.unmasked] == base.unmasked[0, 0])\n+        assert np.all(\n+            result.unmasked[where.unmasked] == (self.a + self.b)[where.unmasked]\n+        )\n+        assert np.all(result.mask[where.mask])\n+        assert np.all(result.mask[~where.mask & ~where.unmasked] == base.mask[0, 0])\n+        assert np.all(\n+            result.mask[~where.mask & where.unmasked]\n+            == (self.mask_a | self.mask_b)[~where.mask & where.unmasked]\n+        )\n+        # Full comparison.\n+        expected = base.unmasked.copy()\n+        np.add(self.a, self.b, out=expected, where=where.unmasked)\n+        expected_mask = base.mask.copy()\n+        np.logical_or(self.mask_a, self.mask_b, out=expected_mask, where=where.unmasked)\n+        expected_mask |= where.mask\n+        assert_array_equal(result.unmasked, expected)\n+        assert_array_equal(result.mask, expected_mask)\n+\n     def test_ufunc_inplace_no_masked_input(self):\n         a_b = np.add(self.a, self.b)\n         out = Masked(np.zeros_like(a_b))\n@@ -53,10 +105,19 @@ def test_ufunc_inplace_no_masked_input(self):\n         assert_array_equal(result.mask, np.zeros(a_b.shape, bool))\n \n     def test_ufunc_inplace_error(self):\n+        # Output is not masked.\n         out = np.zeros(self.ma.shape)\n         with pytest.raises(TypeError):\n             np.add(self.ma, self.mb, out=out)\n \n+    @pytest.mark.xfail(NUMPY_LT_1_25, reason=\"masked where not supported in numpy<1.25\")\n+    def test_ufunc_inplace_error_masked_where(self):\n+        # Input and output are not masked, but where is.\n+        # Note: prior to numpy 1.25, we cannot control this.\n+        out = self.a.copy()\n+        with pytest.raises(TypeError):\n+            np.add(self.a, self.b, out=out, where=Masked(True, mask=True))\n+\n     @pytest.mark.parametrize(\"ufunc\", (np.add.outer, np.minimum.outer))\n     def test_2op_ufunc_outer(self, ufunc):\n         ma_mb = ufunc(self.ma, self.mb)\n",
  "problem_statement": "TST: np.fix check fails with numpy-dev (TypeError: cannot write to unmasked output)\nStarted popping up in numpy-dev jobs. @mhvk is investigating.\r\n\r\n```\r\n____________________________ TestUfuncLike.test_fix ____________________________\r\n\r\nself = <astropy.utils.masked.tests.test_function_helpers.TestUfuncLike object at 0x7fdd354916c0>\r\n\r\n    def test_fix(self):\r\n>       self.check(np.fix)\r\n\r\nastropy/utils/masked/tests/test_function_helpers.py:672: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nastropy/utils/masked/tests/test_function_helpers.py:75: in check\r\n    o = func(self.ma, *args, **kwargs)\r\nastropy/utils/masked/core.py:842: in __array_function__\r\n    return super().__array_function__(function, types, args, kwargs)\r\nnumpy/lib/ufunclike.py:62: in fix\r\n    res = nx.floor(x, out=res, where=nx.greater_equal(x, 0))\r\nastropy/utils/masked/core.py:828: in __array_ufunc__\r\n    result = getattr(ufunc, method)(*unmasked, **kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = MaskedNDArray([[  \u2014\u2014\u2014,  True,  True],\r\n               [ True,   \u2014\u2014\u2014,  True]])\r\nufunc = <ufunc 'floor'>, method = '__call__'\r\ninputs = (array([[0., 1., 2.],\r\n       [3., 4., 5.]]),)\r\nkwargs = {'where': MaskedNDArray([[  \u2014\u2014\u2014,  True,  True],\r\n               [ True,   \u2014\u2014\u2014,  True]])}\r\nout = (array([[0., 1., 2.],\r\n       [3., 4., 5.]]),)\r\nout_unmasked = (array([[0., 1., 2.],\r\n       [3., 4., 5.]]),), out_mask = None\r\nout_masks = (None,), d = array([[0., 1., 2.],\r\n       [3., 4., 5.]]), m = None\r\n\r\n    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\r\n        out = kwargs.pop(\"out\", None)\r\n        out_unmasked = None\r\n        out_mask = None\r\n        if out is not None:\r\n            out_unmasked, out_masks = self._get_data_and_masks(*out)\r\n            for d, m in zip(out_unmasked, out_masks):\r\n                if m is None:\r\n                    # TODO: allow writing to unmasked output if nothing is masked?\r\n                    if d is not None:\r\n>                       raise TypeError(\"cannot write to unmasked output\")\r\nE                       TypeError: cannot write to unmasked output\r\n\r\nastropy/utils/masked/core.py:701: TypeError\r\n```\n",
  "hints_text": "Ah, yes, that was https://github.com/numpy/numpy/pull/23240 and we actually checked in that discussion whether it would pose problems for astropy - https://github.com/numpy/numpy/pull/23240#discussion_r1112314891 - conclusion was that only `np.fix` was affected and that it would be a trivial fix. I'll make that now...",
  "created_at": "2023-03-27T23:57:35Z",
  "version": "5.1",
  "FAIL_TO_PASS": "[\"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_masked_where[False]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_masked_where[True]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_where[False]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_where[True]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_masked_where[False]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_masked_where[True]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_where[False]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_where[True]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_masked_where[False]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_masked_where[True]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_where[False]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_where[True]\"]",
  "PASS_TO_PASS": "[\"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_arrays\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_arrays_not_all_masked\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_arrays_subok_false\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_to\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayBroadcast::test_broadcast_to_using_apply\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff[1--1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff[1-0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff[2--1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayCalculation::test_diff_explicit\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_append\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_concatenate\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_concatenate_not_all_masked\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_insert[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_insert[obj1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayConcatenation::test_insert_masked_obj\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort1[-1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort1[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort2[-1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort2[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort_mix[-1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArraySorting::test_lexsort_mix[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[add]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[arctan2]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[divide]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[minimum]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc[subtract]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc_outer[outer0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_2op_ufunc_outer[outer1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_3op_ufunc\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce[None]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_add_reduce_no_masked_input\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_maximum_reduce[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_maximum_reduce[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_maximum_reduce[None]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_minimum_reduce[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_minimum_reduce[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_minimum_reduce[None]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_multiply_reduce[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_multiply_reduce[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_multiply_reduce[None]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[add]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[arctan2]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[divide]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[minimum]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace[subtract]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_error\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_error_masked_where\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_inplace_no_masked_input\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedArrayUfuncs::test_ufunc_not_implemented_for_other\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_arrays\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_arrays_not_all_masked\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_arrays_subok_false\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_to\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeBroadcast::test_broadcast_to_using_apply\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff[1--1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff[1-0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff[2--1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeCalculation::test_diff_explicit\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_append\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_concatenate\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_concatenate_not_all_masked\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_insert[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_insert[obj1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeConcatenation::test_insert_masked_obj\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[add]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[arctan2]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[divide]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[minimum]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc[subtract]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc_outer[outer0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_2op_ufunc_outer[outer1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_3op_ufunc\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce[None]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_add_reduce_no_masked_input\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_maximum_reduce[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_maximum_reduce[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_maximum_reduce[None]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_minimum_reduce[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_minimum_reduce[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_minimum_reduce[None]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[add]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[arctan2]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[divide]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[minimum]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace[subtract]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_error\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_error_masked_where\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_no_masked_input\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedLongitudeUfuncs::test_ufunc_inplace_quantity_initial\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_arrays\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_arrays_not_all_masked\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_arrays_subok_false\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_to\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityBroadcast::test_broadcast_to_using_apply\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff[1--1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff[1-0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff[2--1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityCalculation::test_diff_explicit\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_append\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_concatenate\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_concatenate_not_all_masked\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_insert[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_insert[obj1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityConcatenation::test_insert_masked_obj\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[add]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[arctan2]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[divide]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[minimum]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc[subtract]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc_outer[outer0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_2op_ufunc_outer[outer1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_3op_ufunc\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce[None]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_add_reduce_no_masked_input\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_maximum_reduce[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_maximum_reduce[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_maximum_reduce[None]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_minimum_reduce[0]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_minimum_reduce[1]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_minimum_reduce[None]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[add]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[arctan2]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[divide]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[minimum]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace[subtract]\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_error\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_error2\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_error_masked_where\", \"astropy/utils/masked/tests/test_functions.py::TestMaskedQuantityUfuncs::test_ufunc_inplace_no_masked_input\"]",
  "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5",
  "patch_files": [
    "astropy/utils/masked/core.py"
  ],
  "test_patch_files": [
    "astropy/utils/masked/tests/test_functions.py"
  ],
  "patch_diff_details": {
    "astropy/utils/masked/core.py": {
      "diffs": [
        {
          "start_line_old": 674,
          "end_line_old": 687,
          "file_pos": 1,
          "file_context_length": 10404,
          "closest_snippet_id": "/tmp/repos/astropy/astropy/utils/masked/core.py_Masked._apply_Masked.__setitem__.3",
          "closest_snippet_line_distance": 387,
          "pos": 21,
          "context_length": 6870
        },
        {
          "start_line_old": 704,
          "end_line_old": 704,
          "file_pos": 1,
          "file_context_length": 10404,
          "pos": 1,
          "context_length": 176
        },
        {
          "start_line_old": 734,
          "end_line_old": 734,
          "file_pos": 1,
          "file_context_length": 10404,
          "closest_snippet_id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.__array_ufunc___MaskedNDArray.__array_ufunc__.5",
          "closest_snippet_line_distance": 30,
          "pos": 3,
          "context_length": 2114
        },
        {
          "start_line_old": 772,
          "end_line_old": 772,
          "file_pos": 1,
          "file_context_length": 10404,
          "closest_snippet_id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.__array_ufunc___MaskedNDArray.__array_ufunc__.5",
          "closest_snippet_line_distance": 68,
          "pos": 3,
          "context_length": 2114
        },
        {
          "start_line_old": 782,
          "end_line_old": 820,
          "file_pos": 1,
          "file_context_length": 10404,
          "closest_snippet_id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.__array_ufunc___MaskedNDArray.__array_ufunc__.5",
          "closest_snippet_line_distance": 92,
          "pos": 3,
          "context_length": 2114
        }
      ]
    }
  },
  "vectors": 4621,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.__array_ufunc___MaskedNDArray.__array_ufunc__.5",
      "distance": 0.7538744211196899,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 690,
      "end_line": 704,
      "tokens": 176,
      "context_length": 176,
      "file_pos": 1
    },
    {
      "position": 2,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_20_dispatched_function.1",
      "distance": 0.8277586698532104,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 84,
      "end_line": 161,
      "tokens": 756,
      "context_length": 932
    },
    {
      "position": 3,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.__array_ufunc__.6_MaskedNDArray.__array_ufunc__.11.1",
      "distance": 0.842211902141571,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 706,
      "end_line": 835,
      "tokens": 1182,
      "context_length": 2114,
      "file_pos": 2
    },
    {
      "position": 4,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.__array_function___MaskedNDArray.__array_function__.3.6.2.1.1",
      "distance": 0.8525114059448242,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 837,
      "end_line": 883,
      "tokens": 379,
      "context_length": 2493,
      "file_pos": 2
    },
    {
      "position": 5,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.trace_MaskedNDArray.38.3.argmax.2.1",
      "distance": 0.8626928329467773,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 941,
      "end_line": 999,
      "tokens": 645,
      "context_length": 3138,
      "file_pos": 2
    },
    {
      "position": 6,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray._not_implemented_or_raise_MaskedNDArray._not_implemented_or_raise.6.2.1.1",
      "distance": 0.871521532535553,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 885,
      "end_line": 897,
      "tokens": 181,
      "context_length": 3319,
      "file_pos": 2
    },
    {
      "position": 7,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_builtins_get__doc__.1",
      "distance": 0.8880791664123535,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 18,
      "end_line": 40,
      "tokens": 137,
      "context_length": 3456,
      "file_pos": 2
    },
    {
      "position": 8,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_masked_nanfunc_masked_nanfunc.nanfunc.5.1",
      "distance": 0.8997330665588379,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 1023,
      "end_line": 1040,
      "tokens": 162,
      "context_length": 3618
    },
    {
      "position": 9,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.var_MaskedNDArray.var.15.1",
      "distance": 0.908708930015564,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 1130,
      "end_line": 1153,
      "tokens": 259,
      "context_length": 3877,
      "file_pos": 2
    },
    {
      "position": 10,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_np_19",
      "distance": 0.915176272392273,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 12,
      "end_line": 83,
      "tokens": 537,
      "context_length": 4414
    },
    {
      "position": 11,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray._eq_simple_MaskedNDArray.__ne__.6.1",
      "distance": 0.922666072845459,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 643,
      "end_line": 672,
      "tokens": 302,
      "context_length": 4716,
      "file_pos": 2
    },
    {
      "position": 12,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray._masked_result_MaskedNDArray._masked_result.8.1",
      "distance": 0.9256300926208496,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 899,
      "end_line": 923,
      "tokens": 267,
      "context_length": 4983,
      "file_pos": 2
    },
    {
      "position": 13,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.std_MaskedNDArray.__format__.2.3.1.1",
      "distance": 0.926670491695404,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 1155,
      "end_line": 1192,
      "tokens": 357,
      "context_length": 5340,
      "file_pos": 2
    },
    {
      "position": 14,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_Masked._set_mask_Masked._set_mask.4.4.self._mask.1",
      "distance": 0.9268287420272827,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 227,
      "end_line": 244,
      "tokens": 173,
      "context_length": 5513,
      "file_pos": 2
    },
    {
      "position": 15,
      "id": "/tmp/repos/astropy/astropy/cosmology/funcs/comparison.py_23__wrap_to_ufunc",
      "distance": 0.9351359009742737,
      "file_path": "astropy/cosmology/funcs/comparison.py",
      "start_line": 62,
      "end_line": 70,
      "tokens": 135,
      "context_length": 5648
    },
    {
      "position": 16,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_masked_nanfunc.doc_masked_nanfunc.8.1",
      "distance": 0.935728907585144,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 1042,
      "end_line": 1063,
      "tokens": 187,
      "context_length": 5835
    },
    {
      "position": 17,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.mean_MaskedNDArray.mean.is_float16_result.14.1",
      "distance": 0.9467743635177612,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 1098,
      "end_line": 1128,
      "tokens": 317,
      "context_length": 6152,
      "file_pos": 3
    },
    {
      "position": 18,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_94_",
      "distance": 0.9546796083450317,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 1066,
      "end_line": 1082,
      "tokens": 133,
      "context_length": 6285
    },
    {
      "position": 19,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.shape_14_MaskedNDArray.shape_14.5.2.7.2.2",
      "distance": 0.9682013392448425,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 619,
      "end_line": 641,
      "tokens": 241,
      "context_length": 6526,
      "file_pos": 3
    },
    {
      "position": 20,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_Masked._apply_Masked.__setitem__.3",
      "distance": 0.9730367660522461,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 280,
      "end_line": 300,
      "tokens": 200,
      "context_length": 6726,
      "file_pos": 3
    },
    {
      "position": 21,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray._combine_masks_MaskedNDArray._combine_masks.6.1",
      "distance": 0.980605959892273,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 674,
      "end_line": 688,
      "tokens": 144,
      "context_length": 6870,
      "file_pos": 3
    },
    {
      "position": 22,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_block_block.8",
      "distance": 0.9824424982070923,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 476,
      "end_line": 498,
      "tokens": 303,
      "context_length": 7173
    },
    {
      "position": 23,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_apply_over_axes_apply_over_axes.val.5.1",
      "distance": 0.9959181547164917,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 850,
      "end_line": 876,
      "tokens": 218,
      "context_length": 7391
    },
    {
      "position": 24,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_packbits_unpackbits.5.1",
      "distance": 0.9998303055763245,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 386,
      "end_line": 399,
      "tokens": 136,
      "context_length": 7527
    },
    {
      "position": 25,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.__array_finalize___MaskedNDArray.__array_finalize__.2.7.self.info.1",
      "distance": 1.0001094341278076,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 581,
      "end_line": 598,
      "tokens": 193,
      "context_length": 7720,
      "file_pos": 3
    },
    {
      "position": 26,
      "id": "/tmp/repos/astropy/astropy/nddata/compat.py_NDDataArray.10_NDDataArray.mask_12.2.3.self._mask.1",
      "distance": 1.0012335777282715,
      "file_path": "astropy/nddata/compat.py",
      "start_line": 159,
      "end_line": 180,
      "tokens": 197,
      "context_length": 7917
    },
    {
      "position": 27,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedRecarray_",
      "distance": 1.0038409233093262,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 1195,
      "end_line": 1220,
      "tokens": 237,
      "context_length": 8154,
      "file_pos": 4
    },
    {
      "position": 28,
      "id": "/tmp/repos/astropy/astropy/io/votable/tree.py_base64__resize.5.1",
      "distance": 1.0057041645050049,
      "file_path": "astropy/io/votable/tree.py",
      "start_line": 5,
      "end_line": 132,
      "tokens": 590,
      "context_length": 8744
    },
    {
      "position": 29,
      "id": "/tmp/repos/astropy/astropy/time/core.py__check_for_masked_and_fill.get_as_filled_ndarray__check_for_masked_and_fill.6.1",
      "distance": 1.0078907012939453,
      "file_path": "astropy/time/core.py",
      "start_line": 3215,
      "end_line": 3249,
      "tokens": 310,
      "context_length": 9054
    },
    {
      "position": 30,
      "id": "/tmp/repos/astropy/astropy/nddata/utils.py_3_PartialOverlapError.2",
      "distance": 1.0096522569656372,
      "file_path": "astropy/nddata/utils.py",
      "start_line": 6,
      "end_line": 37,
      "tokens": 157,
      "context_length": 9211
    },
    {
      "position": 31,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_MaskedFormat.__call___MaskedFormat.from_data.2.1",
      "distance": 1.0186914205551147,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 903,
      "end_line": 932,
      "tokens": 300,
      "context_length": 9511
    },
    {
      "position": 32,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_percentile_array_equal.5.1",
      "distance": 1.0201252698898315,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 654,
      "end_line": 669,
      "tokens": 156,
      "context_length": 9667
    },
    {
      "position": 33,
      "id": "/tmp/repos/astropy/astropy/units/quantity_helper/function_helpers.py_31_41",
      "distance": 1.020442247390747,
      "file_path": "astropy/units/quantity_helper/function_helpers.py",
      "start_line": 102,
      "end_line": 133,
      "tokens": 366,
      "context_length": 10033
    },
    {
      "position": 34,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py__get_data_and_masks_masked_arr_helper.2.1",
      "distance": 1.0235400199890137,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 164,
      "end_line": 231,
      "tokens": 599,
      "context_length": 10632
    },
    {
      "position": 35,
      "id": "/tmp/repos/astropy/astropy/utils/masked/__init__.py__",
      "distance": 1.0312070846557617,
      "file_path": "astropy/utils/masked/__init__.py",
      "start_line": 1,
      "end_line": 11,
      "tokens": 0,
      "context_length": 10632
    },
    {
      "position": 36,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_median_median.4.4.1.1",
      "distance": 1.0316336154937744,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 577,
      "end_line": 596,
      "tokens": 162,
      "context_length": 10794
    },
    {
      "position": 37,
      "id": "/tmp/repos/astropy/astropy/utils/compat/numpycompat.py_np_",
      "distance": 1.0339144468307495,
      "file_path": "astropy/utils/compat/numpycompat.py",
      "start_line": 7,
      "end_line": 29,
      "tokens": 246,
      "context_length": 11040
    },
    {
      "position": 38,
      "id": "/tmp/repos/astropy/astropy/conftest.py_builtins_fast_thread_switching.5",
      "distance": 1.0339419841766357,
      "file_path": "astropy/conftest.py",
      "start_line": 7,
      "end_line": 61,
      "tokens": 368,
      "context_length": 11408
    },
    {
      "position": 39,
      "id": "/tmp/repos/astropy/astropy/units/quantity_helper/function_helpers.py_invariant_m_helper_place.2.3.1",
      "distance": 1.0420854091644287,
      "file_path": "astropy/units/quantity_helper/function_helpers.py",
      "start_line": 186,
      "end_line": 272,
      "tokens": 771,
      "context_length": 12179
    },
    {
      "position": 40,
      "id": "/tmp/repos/astropy/astropy/time/time_helper/function_helpers.py_1_",
      "distance": 1.0438027381896973,
      "file_path": "astropy/time/time_helper/function_helpers.py",
      "start_line": 1,
      "end_line": 36,
      "tokens": 243,
      "context_length": 12422
    },
    {
      "position": 41,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_Masked.mask_Masked.filled.4.1",
      "distance": 1.0489146709442139,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 246,
      "end_line": 278,
      "tokens": 204,
      "context_length": 12626,
      "file_pos": 12
    },
    {
      "position": 42,
      "id": "/tmp/repos/astropy/astropy/table/operations.py__hstack.19_",
      "distance": 1.0510108470916748,
      "file_path": "astropy/table/operations.py",
      "start_line": 1598,
      "end_line": 1635,
      "tokens": 315,
      "context_length": 12941
    },
    {
      "position": 43,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_putmask_putmask.6",
      "distance": 1.0513052940368652,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 330,
      "end_line": 345,
      "tokens": 142,
      "context_length": 13083
    },
    {
      "position": 44,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_quantile_quantile.6.4.1.1",
      "distance": 1.054262399673462,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 630,
      "end_line": 651,
      "tokens": 224,
      "context_length": 13307
    },
    {
      "position": 45,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArrayInfo._represent_as_dict_MaskedNDArrayInfo._construct_from_dict.5",
      "distance": 1.0561925172805786,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 341,
      "end_line": 375,
      "tokens": 304,
      "context_length": 13611,
      "file_pos": 13
    },
    {
      "position": 46,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.5_MaskedNDArray._baseclass.2.1",
      "distance": 1.0618197917938232,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 511,
      "end_line": 554,
      "tokens": 350,
      "context_length": 13961,
      "file_pos": 13
    },
    {
      "position": 47,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_array_equiv_where.8.1",
      "distance": 1.0618962049484253,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 672,
      "end_line": 691,
      "tokens": 139,
      "context_length": 14100
    },
    {
      "position": 48,
      "id": "/tmp/repos/astropy/astropy/units/quantity_helper/helpers.py_86_",
      "distance": 1.063141107559204,
      "file_path": "astropy/units/quantity_helper/helpers.py",
      "start_line": 425,
      "end_line": 501,
      "tokens": 742,
      "context_length": 14842
    },
    {
      "position": 49,
      "id": "/tmp/repos/astropy/astropy/nddata/nduncertainty.py_weakref_collapse_to_variance_mapping.1",
      "distance": 1.0646247863769531,
      "file_path": "astropy/nddata/nduncertainty.py",
      "start_line": 3,
      "end_line": 27,
      "tokens": 141,
      "context_length": 14983
    },
    {
      "position": 50,
      "id": "/tmp/repos/astropy/astropy/io/votable/converters.py__make_masked_array__make_masked_array.3.2.1.1",
      "distance": 1.066246509552002,
      "file_path": "astropy/io/votable/converters.py",
      "start_line": 80,
      "end_line": 91,
      "tokens": 114,
      "context_length": 15097
    },
    {
      "position": 51,
      "id": "/tmp/repos/astropy/astropy/nddata/ccddata.py_itertools__config_ccd_requires_unit.1",
      "distance": 1.0670838356018066,
      "file_path": "astropy/nddata/ccddata.py",
      "start_line": 4,
      "end_line": 31,
      "tokens": 217,
      "context_length": 15314
    },
    {
      "position": 52,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py__comparison_method__comparison_method.3.1",
      "distance": 1.0674796104431152,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 394,
      "end_line": 410,
      "tokens": 126,
      "context_length": 15440,
      "file_pos": 17
    },
    {
      "position": 53,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_msort_sort_complex.b.3.3.1.1",
      "distance": 1.0733131170272827,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 428,
      "end_line": 448,
      "tokens": 135,
      "context_length": 15575
    },
    {
      "position": 54,
      "id": "/tmp/repos/astropy/astropy/nddata/bitmask.py_1__SUPPORTED_FLAGS.1",
      "distance": 1.0754668712615967,
      "file_path": "astropy/nddata/bitmask.py",
      "start_line": 1,
      "end_line": 23,
      "tokens": 117,
      "context_length": 15692
    },
    {
      "position": 55,
      "id": "/tmp/repos/astropy/astropy/io/fits/hdu/base.py_datetime_InvalidHDUException.1",
      "distance": 1.0764671564102173,
      "file_path": "astropy/io/fits/hdu/base.py",
      "start_line": 4,
      "end_line": 82,
      "tokens": 457,
      "context_length": 16149
    },
    {
      "position": 56,
      "id": "/tmp/repos/astropy/astropy/io/misc/asdf/tags/fits/fits.py_2_FitsType.from_tree.5.1",
      "distance": 1.0791559219360352,
      "file_path": "astropy/io/misc/asdf/tags/fits/fits.py",
      "start_line": 2,
      "end_line": 35,
      "tokens": 251,
      "context_length": 16400
    },
    {
      "position": 57,
      "id": "/tmp/repos/astropy/astropy/nddata/ccddata.py_CCDData.to_hdu.4_CCDData.to_hdu.11.1",
      "distance": 1.0802029371261597,
      "file_path": "astropy/nddata/ccddata.py",
      "start_line": 368,
      "end_line": 444,
      "tokens": 815,
      "context_length": 17215
    },
    {
      "position": 58,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_Masked.__new___Masked.__new__.1.3.2.1",
      "distance": 1.0815482139587402,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 70,
      "end_line": 80,
      "tokens": 131,
      "context_length": 17346,
      "file_pos": 20
    },
    {
      "position": 59,
      "id": "/tmp/repos/astropy/astropy/io/misc/asdf/tags/transform/polynomial.py_np_ShiftType.assert_equal.2",
      "distance": 1.0822696685791016,
      "file_path": "astropy/io/misc/asdf/tags/transform/polynomial.py",
      "start_line": 2,
      "end_line": 42,
      "tokens": 282,
      "context_length": 17628
    },
    {
      "position": 60,
      "id": "/tmp/repos/astropy/astropy/units/quantity_helper/helpers.py_57_radian_to_dimensionless_ufuncs.1",
      "distance": 1.0843355655670166,
      "file_path": "astropy/units/quantity_helper/helpers.py",
      "start_line": 338,
      "end_line": 424,
      "tokens": 758,
      "context_length": 18386
    },
    {
      "position": 61,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_concatenate_append.2.1",
      "distance": 1.085653305053711,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 451,
      "end_line": 473,
      "tokens": 186,
      "context_length": 18572
    },
    {
      "position": 62,
      "id": "/tmp/repos/astropy/astropy/io/fits/diff.py_fnmatch__COL_ATTRS.1",
      "distance": 1.0857794284820557,
      "file_path": "astropy/io/fits/diff.py",
      "start_line": 8,
      "end_line": 55,
      "tokens": 266,
      "context_length": 18838
    },
    {
      "position": 63,
      "id": "/tmp/repos/astropy/astropy/nddata/blocks.py_np__process_block_inputs.8.1",
      "distance": 1.0878201723098755,
      "file_path": "astropy/nddata/blocks.py",
      "start_line": 6,
      "end_line": 33,
      "tokens": 211,
      "context_length": 19049
    },
    {
      "position": 64,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_Masked.8_Masked._get_masked_instance.4.1",
      "distance": 1.0910111665725708,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 110,
      "end_line": 125,
      "tokens": 174,
      "context_length": 19223,
      "file_pos": 23
    },
    {
      "position": 65,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_array_str__nanfunc_fill_values.1",
      "distance": 1.09189772605896,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 1013,
      "end_line": 1020,
      "tokens": 108,
      "context_length": 19331
    },
    {
      "position": 66,
      "id": "/tmp/repos/astropy/astropy/table/pprint.py_fnmatch__use_str_for_masked_values.2.1",
      "distance": 1.0926942825317383,
      "file_path": "astropy/table/pprint.py",
      "start_line": 3,
      "end_line": 35,
      "tokens": 189,
      "context_length": 19520
    },
    {
      "position": 67,
      "id": "/tmp/repos/astropy/astropy/stats/funcs.py_kuiper_false_positive_probability.4_kuiper_false_positive_probability.4.4.8.1",
      "distance": 1.0941758155822754,
      "file_path": "astropy/stats/funcs.py",
      "start_line": 1328,
      "end_line": 1368,
      "tokens": 665,
      "context_length": 20185
    }
  ],
  "files": [
    {
      "file_path": "astropy/utils/masked/core.py",
      "position": 1,
      "tokens": 10404,
      "context_length": 10404
    },
    {
      "file_path": "astropy/utils/masked/function_helpers.py",
      "position": 2,
      "tokens": 8907,
      "context_length": 19311
    },
    {
      "file_path": "astropy/cosmology/funcs/comparison.py",
      "position": 3,
      "tokens": 3523,
      "context_length": 22834
    },
    {
      "file_path": "astropy/nddata/compat.py",
      "position": 4,
      "tokens": 2143,
      "context_length": 24977
    },
    {
      "file_path": "astropy/io/votable/tree.py",
      "position": 5,
      "tokens": 29394,
      "context_length": 54371
    },
    {
      "file_path": "astropy/time/core.py",
      "position": 6,
      "tokens": 28262,
      "context_length": 82633
    },
    {
      "file_path": "astropy/nddata/utils.py",
      "position": 7,
      "tokens": 7536,
      "context_length": 90169
    },
    {
      "file_path": "astropy/units/quantity_helper/function_helpers.py",
      "position": 8,
      "tokens": 10094,
      "context_length": 100263
    },
    {
      "file_path": "astropy/utils/masked/__init__.py",
      "position": 9,
      "tokens": 84,
      "context_length": 100347
    },
    {
      "file_path": "astropy/utils/compat/numpycompat.py",
      "position": 10,
      "tokens": 287,
      "context_length": 100634
    },
    {
      "file_path": "astropy/conftest.py",
      "position": 11,
      "tokens": 1159,
      "context_length": 101793
    },
    {
      "file_path": "astropy/time/time_helper/function_helpers.py",
      "position": 12,
      "tokens": 244,
      "context_length": 102037
    },
    {
      "file_path": "astropy/table/operations.py",
      "position": 13,
      "tokens": 14486,
      "context_length": 116523
    },
    {
      "file_path": "astropy/units/quantity_helper/helpers.py",
      "position": 14,
      "tokens": 3855,
      "context_length": 120378
    },
    {
      "file_path": "astropy/nddata/nduncertainty.py",
      "position": 15,
      "tokens": 9602,
      "context_length": 129980
    },
    {
      "file_path": "astropy/io/votable/converters.py",
      "position": 16,
      "tokens": 9940,
      "context_length": 139920
    },
    {
      "file_path": "astropy/nddata/ccddata.py",
      "position": 17,
      "tokens": 6995,
      "context_length": 146915
    },
    {
      "file_path": "astropy/nddata/bitmask.py",
      "position": 18,
      "tokens": 6731,
      "context_length": 153646
    },
    {
      "file_path": "astropy/io/fits/hdu/base.py",
      "position": 19,
      "tokens": 13460,
      "context_length": 167106
    },
    {
      "file_path": "astropy/io/misc/asdf/tags/fits/fits.py",
      "position": 20,
      "tokens": 764,
      "context_length": 167870
    },
    {
      "file_path": "astropy/io/misc/asdf/tags/transform/polynomial.py",
      "position": 21,
      "tokens": 2847,
      "context_length": 170717
    },
    {
      "file_path": "astropy/io/fits/diff.py",
      "position": 22,
      "tokens": 13089,
      "context_length": 183806
    },
    {
      "file_path": "astropy/nddata/blocks.py",
      "position": 23,
      "tokens": 1831,
      "context_length": 185637
    },
    {
      "file_path": "astropy/table/pprint.py",
      "position": 24,
      "tokens": 6435,
      "context_length": 192072
    },
    {
      "file_path": "astropy/stats/funcs.py",
      "position": 25,
      "tokens": 16450,
      "context_length": 208522
    }
  ]
}