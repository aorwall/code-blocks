{
  "instance_id": "astropy__astropy-14907",
  "model_patch": "diff --git a/astropy/table/groups.py b/astropy/table/groups.py\nindex 14104589cb..af2e5e522c 100644\n--- a/astropy/table/groups.py\n+++ b/astropy/table/groups.py\n@@ -79,20 +79,9 @@ def _table_group_by(table, keys):\n     if not table_index and isinstance(table_keys, Table):\n         table_keys = represent_mixins_as_columns(table_keys)\n \n-    # Get the argsort index `idx_sort`, accounting for particulars\n-    try:\n-        # take advantage of index internal sort if possible\n-        if table_index is not None:\n-            idx_sort = table_index.sorted_data()\n-        else:\n-            idx_sort = table_keys.argsort(kind=\"mergesort\")\n-        stable_sort = True\n-    except TypeError:\n-        # Some versions (likely 1.6 and earlier) of numpy don't support\n-        # 'mergesort' for all data types.  MacOSX (Darwin) doesn't have a stable\n-        # sort by default, nor does Windows, while Linux does (or appears to).\n-        idx_sort = table_keys.argsort()\n-        stable_sort = platform.system() not in (\"Darwin\", \"Windows\")\n+    # Get the argsort index `idx_sort`, using 'mergesort' for stability\n+    idx_sort = table_keys.argsort(kind=\"mergesort\")\n+    stable_sort = True\n \n     # Finally do the actual sort of table_keys values\n     table_keys = table_keys[idx_sort]\n@@ -101,12 +90,6 @@ def _table_group_by(table, keys):\n     diffs = np.concatenate(([True], table_keys[1:] != table_keys[:-1], [True]))\n     indices = np.flatnonzero(diffs)\n \n-    # If the sort is not stable (preserves original table order) then sort idx_sort in\n-    # place within each group.\n-    if not stable_sort:\n-        for i0, i1 in zip(indices[:-1], indices[1:]):\n-            idx_sort[i0:i1].sort()\n-\n     # Make a new table and set the _groups to the appropriate TableGroups object.\n     # Take the subset of the original keys at the indices values (group boundaries).\n     out = table.__class__(table[idx_sort])\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "astropy/table/groups.py"
  ],
  "repo": "astropy/astropy",
  "base_commit": "7f0df518e6bd5542b64bd7073052d099ea09dcb4",
  "patch": "diff --git a/astropy/table/index.py b/astropy/table/index.py\n--- a/astropy/table/index.py\n+++ b/astropy/table/index.py\n@@ -94,7 +94,7 @@ def __init__(self, columns, engine=None, unique=False):\n             raise ValueError(\"Cannot create index without at least one column\")\n         elif len(columns) == 1:\n             col = columns[0]\n-            row_index = Column(col.argsort())\n+            row_index = Column(col.argsort(kind=\"stable\"))\n             data = Table([col[row_index]])\n         else:\n             num_rows = len(columns[0])\n@@ -117,7 +117,7 @@ def __init__(self, columns, engine=None, unique=False):\n             try:\n                 lines = table[np.lexsort(sort_columns)]\n             except TypeError:  # arbitrary mixins might not work with lexsort\n-                lines = table[table.argsort()]\n+                lines = table[table.argsort(kind=\"stable\")]\n             data = lines[lines.colnames[:-1]]\n             row_index = lines[lines.colnames[-1]]\n \ndiff --git a/astropy/time/core.py b/astropy/time/core.py\n--- a/astropy/time/core.py\n+++ b/astropy/time/core.py\n@@ -1441,13 +1441,28 @@ def argmax(self, axis=None, out=None):\n \n         return dt.argmax(axis, out)\n \n-    def argsort(self, axis=-1):\n+    def argsort(self, axis=-1, kind=\"stable\"):\n         \"\"\"Returns the indices that would sort the time array.\n \n-        This is similar to :meth:`~numpy.ndarray.argsort`, but adapted to ensure\n-        that the full precision given by the two doubles ``jd1`` and ``jd2``\n-        is used, and that corresponding attributes are copied.  Internally,\n-        it uses :func:`~numpy.lexsort`, and hence no sort method can be chosen.\n+        This is similar to :meth:`~numpy.ndarray.argsort`, but adapted to ensure that\n+        the full precision given by the two doubles ``jd1`` and ``jd2`` is used, and\n+        that corresponding attributes are copied.  Internally, it uses\n+        :func:`~numpy.lexsort`, and hence no sort method can be chosen.\n+\n+        Parameters\n+        ----------\n+        axis : int, optional\n+            Axis along which to sort. Default is -1, which means sort along the last\n+            axis.\n+        kind : 'stable', optional\n+            Sorting is done with :func:`~numpy.lexsort` so this argument is ignored, but\n+            kept for compatibility with :func:`~numpy.argsort`. The sorting is stable,\n+            meaning that the order of equal elements is preserved.\n+\n+        Returns\n+        -------\n+        indices : ndarray\n+            An array of indices that sort the time array.\n         \"\"\"\n         # For procedure, see comment on argmin.\n         jd1, jd2 = self.jd1, self.jd2\n",
  "test_patch": "diff --git a/astropy/table/tests/test_groups.py b/astropy/table/tests/test_groups.py\n--- a/astropy/table/tests/test_groups.py\n+++ b/astropy/table/tests/test_groups.py\n@@ -690,3 +690,23 @@ def test_group_mixins_unsupported(col):\n     tg = t.group_by(\"a\")\n     with pytest.warns(AstropyUserWarning, match=\"Cannot aggregate column 'mix'\"):\n         tg.groups.aggregate(np.sum)\n+\n+\n+@pytest.mark.parametrize(\"add_index\", [False, True])\n+def test_group_stable_sort(add_index):\n+    \"\"\"Test that group_by preserves the order of the table.\n+\n+    This table has 5 groups with an average of 200 rows per group, so it is not\n+    statistically possible that the groups will be in order by chance.\n+\n+    This tests explicitly the case where grouping is done via the index sort.\n+    See: https://github.com/astropy/astropy/issues/14882\n+    \"\"\"\n+    a = np.random.randint(0, 5, 1000)\n+    b = np.arange(len(a))\n+    t = Table([a, b], names=[\"a\", \"b\"])\n+    if add_index:\n+        t.add_index(\"a\")\n+    tg = t.group_by(\"a\")\n+    for grp in tg.groups:\n+        assert np.all(grp[\"b\"] == np.sort(grp[\"b\"]))\n",
  "problem_statement": "TST: test_table_group_by[True] and test_group_by_masked[True] failed with numpy 1.25rc1\nI see this in the predeps job that pulls in numpy 1.25rc1. Example log: https://github.com/astropy/astropy/actions/runs/5117103756/jobs/9199883166\r\n\r\nHard to discern between the other 100+ failures from https://github.com/astropy/astropy/issues/14881 and I do not understand why we didn't catch this earlier in devdeps. @mhvk , does this look familiar to you?\r\n\r\nhttps://github.com/astropy/astropy/blob/88790514bdf248e43c2fb15ee18cfd3390846145/astropy/table/tests/test_groups.py#L35\r\n\r\n```\r\n__________________________ test_table_group_by[True] ___________________________\r\n\r\nT1 = <QTable length=8>\r\n  a    b      c      d      q   \r\n                            m   \r\nint64 str1 float64 int64 float64\r\n-...   0.0     4     4.0\r\n    1    b     3.0     5     5.0\r\n    1    a     2.0     6     6.0\r\n    1    a     1.0     7     7.0\r\n\r\n    def test_table_group_by(T1):\r\n        \"\"\"\r\n        Test basic table group_by functionality for possible key types and for\r\n        masked/unmasked tables.\r\n        \"\"\"\r\n        for masked in (False, True):\r\n            t1 = QTable(T1, masked=masked)\r\n            # Group by a single column key specified by name\r\n            tg = t1.group_by(\"a\")\r\n            assert np.all(tg.groups.indices == np.array([0, 1, 4, 8]))\r\n            assert str(tg.groups) == \"<TableGroups indices=[0 1 4 8]>\"\r\n            assert str(tg[\"a\"].groups) == \"<ColumnGroups indices=[0 1 4 8]>\"\r\n    \r\n            # Sorted by 'a' and in original order for rest\r\n>           assert tg.pformat() == [\r\n                \" a   b   c   d   q \",\r\n                \"                 m \",\r\n                \"--- --- --- --- ---\",\r\n                \"  0   a 0.0   4 4.0\",\r\n                \"  1   b 3.0   5 5.0\",\r\n                \"  1   a 2.0   6 6.0\",\r\n                \"  1   a 1.0   7 7.0\",\r\n                \"  2   c 7.0   0 0.0\",\r\n                \"  2   b 5.0   1 1.0\",\r\n                \"  2   b 6.0   2 2.0\",\r\n                \"  2   a 4.0   3 3.0\",\r\n            ]\r\nE           AssertionError: assert [' a   b   c ...  5 5.0', ...] == [' a   b   c ...  6 6.0', ...]\r\nE             At index 4 diff: '  1   a 1.0   7 7.0' != '  1   b 3.0   5 5.0'\r\nE             Full diff:\r\nE               [\r\nE                ' a   b   c   d   q ',\r\nE                '                 m ',\r\nE                '--- --- --- --- ---',\r\nE                '  0   a 0.0   4 4.0',\r\nE             +  '  1   a 1.0   7 7.0',\r\nE                '  1   b 3.0   5 5.0',\r\nE                '  1   a 2.0   6 6.0',\r\nE             -  '  1   a 1.0   7 7.0',\r\nE             ?     ^     ^     ^^^\r\nE             +  '  2   a 4.0   3 3.0',\r\nE             ?     ^     ^     ^^^\r\nE             +  '  2   b 6.0   2 2.0',\r\nE             +  '  2   b 5.0   1 1.0',\r\nE                '  2   c 7.0   0 0.0',\r\nE             -  '  2   b 5.0   1 1.0',\r\nE             -  '  2   b 6.0   2 2.0',\r\nE             -  '  2   a 4.0   3 3.0',\r\nE               ]\r\n\r\nastropy/table/tests/test_groups.py:49: AssertionError\r\n```\r\n\r\nhttps://github.com/astropy/astropy/blob/88790514bdf248e43c2fb15ee18cfd3390846145/astropy/table/tests/test_groups.py#L326\r\n\r\n```\r\n__________________________ test_group_by_masked[True] __________________________\r\n\r\nT1 = <QTable length=8>\r\n  a    b      c      d      q   \r\n                            m   \r\nint64 str1 float64 int64 float64\r\n-...   0.0     4     4.0\r\n    1    b     3.0     5     5.0\r\n    1    a     2.0     6     6.0\r\n    1    a     1.0     7     7.0\r\n\r\n    def test_group_by_masked(T1):\r\n        t1m = QTable(T1, masked=True)\r\n        t1m[\"c\"].mask[4] = True\r\n        t1m[\"d\"].mask[5] = True\r\n>       assert t1m.group_by(\"a\").pformat() == [\r\n            \" a   b   c   d   q \",\r\n            \"                 m \",\r\n            \"--- --- --- --- ---\",\r\n            \"  0   a  --   4 4.0\",\r\n            \"  1   b 3.0  -- 5.0\",\r\n            \"  1   a 2.0   6 6.0\",\r\n            \"  1   a 1.0   7 7.0\",\r\n            \"  2   c 7.0   0 0.0\",\r\n            \"  2   b 5.0   1 1.0\",\r\n            \"  2   b 6.0   2 2.0\",\r\n            \"  2   a 4.0   3 3.0\",\r\n        ]\r\nE       AssertionError: assert [' a   b   c ... -- 5.0', ...] == [' a   b   c ...  6 6.0', ...]\r\nE         At index 4 diff: '  1   a 1.0   7 7.0' != '  1   b 3.0  -- 5.0'\r\nE         Full diff:\r\nE           [\r\nE            ' a   b   c   d   q ',\r\nE            '                 m ',\r\nE            '--- --- --- --- ---',\r\nE            '  0   a  --   4 4.0',\r\nE         +  '  1   a 1.0   7 7.0',\r\nE            '  1   b 3.0  -- 5.0',\r\nE            '  1   a 2.0   6 6.0',\r\nE         -  '  1   a 1.0   7 7.0',\r\nE         ?     ^     ^     ^^^\r\nE         +  '  2   a 4.0   3 3.0',\r\nE         ?     ^     ^     ^^^\r\nE         +  '  2   b 6.0   2 2.0',\r\nE         +  '  2   b 5.0   1 1.0',\r\nE            '  2   c 7.0   0 0.0',\r\nE         -  '  2   b 5.0   1 1.0',\r\nE         -  '  2   b 6.0   2 2.0',\r\nE         -  '  2   a 4.0   3 3.0',\r\nE           ]\r\n\r\nastropy/table/tests/test_groups.py:330: AssertionError\r\n```\nTST: test_table_group_by[True] and test_group_by_masked[True] failed with numpy 1.25rc1\nI see this in the predeps job that pulls in numpy 1.25rc1. Example log: https://github.com/astropy/astropy/actions/runs/5117103756/jobs/9199883166\r\n\r\nHard to discern between the other 100+ failures from https://github.com/astropy/astropy/issues/14881 and I do not understand why we didn't catch this earlier in devdeps. @mhvk , does this look familiar to you?\r\n\r\nhttps://github.com/astropy/astropy/blob/88790514bdf248e43c2fb15ee18cfd3390846145/astropy/table/tests/test_groups.py#L35\r\n\r\n```\r\n__________________________ test_table_group_by[True] ___________________________\r\n\r\nT1 = <QTable length=8>\r\n  a    b      c      d      q   \r\n                            m   \r\nint64 str1 float64 int64 float64\r\n-...   0.0     4     4.0\r\n    1    b     3.0     5     5.0\r\n    1    a     2.0     6     6.0\r\n    1    a     1.0     7     7.0\r\n\r\n    def test_table_group_by(T1):\r\n        \"\"\"\r\n        Test basic table group_by functionality for possible key types and for\r\n        masked/unmasked tables.\r\n        \"\"\"\r\n        for masked in (False, True):\r\n            t1 = QTable(T1, masked=masked)\r\n            # Group by a single column key specified by name\r\n            tg = t1.group_by(\"a\")\r\n            assert np.all(tg.groups.indices == np.array([0, 1, 4, 8]))\r\n            assert str(tg.groups) == \"<TableGroups indices=[0 1 4 8]>\"\r\n            assert str(tg[\"a\"].groups) == \"<ColumnGroups indices=[0 1 4 8]>\"\r\n    \r\n            # Sorted by 'a' and in original order for rest\r\n>           assert tg.pformat() == [\r\n                \" a   b   c   d   q \",\r\n                \"                 m \",\r\n                \"--- --- --- --- ---\",\r\n                \"  0   a 0.0   4 4.0\",\r\n                \"  1   b 3.0   5 5.0\",\r\n                \"  1   a 2.0   6 6.0\",\r\n                \"  1   a 1.0   7 7.0\",\r\n                \"  2   c 7.0   0 0.0\",\r\n                \"  2   b 5.0   1 1.0\",\r\n                \"  2   b 6.0   2 2.0\",\r\n                \"  2   a 4.0   3 3.0\",\r\n            ]\r\nE           AssertionError: assert [' a   b   c ...  5 5.0', ...] == [' a   b   c ...  6 6.0', ...]\r\nE             At index 4 diff: '  1   a 1.0   7 7.0' != '  1   b 3.0   5 5.0'\r\nE             Full diff:\r\nE               [\r\nE                ' a   b   c   d   q ',\r\nE                '                 m ',\r\nE                '--- --- --- --- ---',\r\nE                '  0   a 0.0   4 4.0',\r\nE             +  '  1   a 1.0   7 7.0',\r\nE                '  1   b 3.0   5 5.0',\r\nE                '  1   a 2.0   6 6.0',\r\nE             -  '  1   a 1.0   7 7.0',\r\nE             ?     ^     ^     ^^^\r\nE             +  '  2   a 4.0   3 3.0',\r\nE             ?     ^     ^     ^^^\r\nE             +  '  2   b 6.0   2 2.0',\r\nE             +  '  2   b 5.0   1 1.0',\r\nE                '  2   c 7.0   0 0.0',\r\nE             -  '  2   b 5.0   1 1.0',\r\nE             -  '  2   b 6.0   2 2.0',\r\nE             -  '  2   a 4.0   3 3.0',\r\nE               ]\r\n\r\nastropy/table/tests/test_groups.py:49: AssertionError\r\n```\r\n\r\nhttps://github.com/astropy/astropy/blob/88790514bdf248e43c2fb15ee18cfd3390846145/astropy/table/tests/test_groups.py#L326\r\n\r\n```\r\n__________________________ test_group_by_masked[True] __________________________\r\n\r\nT1 = <QTable length=8>\r\n  a    b      c      d      q   \r\n                            m   \r\nint64 str1 float64 int64 float64\r\n-...   0.0     4     4.0\r\n    1    b     3.0     5     5.0\r\n    1    a     2.0     6     6.0\r\n    1    a     1.0     7     7.0\r\n\r\n    def test_group_by_masked(T1):\r\n        t1m = QTable(T1, masked=True)\r\n        t1m[\"c\"].mask[4] = True\r\n        t1m[\"d\"].mask[5] = True\r\n>       assert t1m.group_by(\"a\").pformat() == [\r\n            \" a   b   c   d   q \",\r\n            \"                 m \",\r\n            \"--- --- --- --- ---\",\r\n            \"  0   a  --   4 4.0\",\r\n            \"  1   b 3.0  -- 5.0\",\r\n            \"  1   a 2.0   6 6.0\",\r\n            \"  1   a 1.0   7 7.0\",\r\n            \"  2   c 7.0   0 0.0\",\r\n            \"  2   b 5.0   1 1.0\",\r\n            \"  2   b 6.0   2 2.0\",\r\n            \"  2   a 4.0   3 3.0\",\r\n        ]\r\nE       AssertionError: assert [' a   b   c ... -- 5.0', ...] == [' a   b   c ...  6 6.0', ...]\r\nE         At index 4 diff: '  1   a 1.0   7 7.0' != '  1   b 3.0  -- 5.0'\r\nE         Full diff:\r\nE           [\r\nE            ' a   b   c   d   q ',\r\nE            '                 m ',\r\nE            '--- --- --- --- ---',\r\nE            '  0   a  --   4 4.0',\r\nE         +  '  1   a 1.0   7 7.0',\r\nE            '  1   b 3.0  -- 5.0',\r\nE            '  1   a 2.0   6 6.0',\r\nE         -  '  1   a 1.0   7 7.0',\r\nE         ?     ^     ^     ^^^\r\nE         +  '  2   a 4.0   3 3.0',\r\nE         ?     ^     ^     ^^^\r\nE         +  '  2   b 6.0   2 2.0',\r\nE         +  '  2   b 5.0   1 1.0',\r\nE            '  2   c 7.0   0 0.0',\r\nE         -  '  2   b 5.0   1 1.0',\r\nE         -  '  2   b 6.0   2 2.0',\r\nE         -  '  2   a 4.0   3 3.0',\r\nE           ]\r\n\r\nastropy/table/tests/test_groups.py:330: AssertionError\r\n```\n",
  "hints_text": "I cannot reproduce this locally. \ud83e\udd2f  The error log above looks like some lines moved about... but it does not make sense.\r\n\r\nAlso, to run this in an interactive session:\r\n\r\n```python\r\nimport numpy as np\r\nfrom astropy import units as u\r\nfrom astropy.table import QTable\r\n\r\nT = QTable.read(\r\n        [\r\n            \" a b c d\",\r\n            \" 2 c 7.0 0\",\r\n            \" 2 b 5.0 1\",\r\n            \" 2 b 6.0 2\",\r\n            \" 2 a 4.0 3\",\r\n            \" 0 a 0.0 4\",\r\n            \" 1 b 3.0 5\",\r\n            \" 1 a 2.0 6\",\r\n            \" 1 a 1.0 7\",\r\n        ],\r\n        format=\"ascii\",\r\n)\r\nT[\"q\"] = np.arange(len(T)) * u.m\r\nT.meta.update({\"ta\": 1})\r\nT[\"c\"].meta.update({\"a\": 1})\r\nT[\"c\"].description = \"column c\"\r\nT.add_index(\"a\")\r\n\r\nt1 = QTable(T, masked=True)\r\ntg = t1.group_by(\"a\")\r\n```\r\n```python\r\n>>> tg\r\n<QTable length=8>\r\n  a    b      c      d      q\r\n                            m\r\nint64 str1 float64 int64 float64\r\n----- ---- ------- ----- -------\r\n    0    a     0.0     4     4.0\r\n    1    b     3.0     5     5.0\r\n    1    a     2.0     6     6.0\r\n    1    a     1.0     7     7.0\r\n    2    c     7.0     0     0.0\r\n    2    b     5.0     1     1.0\r\n    2    b     6.0     2     2.0\r\n    2    a     4.0     3     3.0\r\n```\n@pllim - I also cannot reproduce the problem locally on my Mac. What to do?\n@taldcroft , does the order matter? I am guessing yes?\r\n\r\nLooks like maybe somehow this test triggers some race condition but only in CI, or some global var is messing it up from a different test. But I don't know enough about internals to make a more educated guess.\nWhat about this: could the sort order have changed? Is the test failure on an \"AVX-512 enabled processor\"?\r\n\r\nhttps://numpy.org/devdocs/release/1.25.0-notes.html#faster-np-sort-on-avx-512-enabled-processors\nHmmm.... maybe?\r\n\r\n* https://github.com/actions/runner-images/discussions/5734\n@pllim - Grouping is supposed to maintain the original order within a group. That depends on the numpy sorting doing the same, which depends on the specific sort algorithm.\nSo that looks promising. Let me remind myself of the code in there...\nSo if we decide that https://github.com/numpy/numpy/pull/22315 is changing our result, is that a numpy bug?\nIt turns out this is likely in the table indexing code, which is never easy to understand. But it does look like this is the issue, because indexing appears to use the numpy default sorting, which is quicksort. But quicksort is not guaranteed to be stable, so maybe it was passing accidentally before.\nI cannot reproduce this locally. \ud83e\udd2f  The error log above looks like some lines moved about... but it does not make sense.\r\n\r\nAlso, to run this in an interactive session:\r\n\r\n```python\r\nimport numpy as np\r\nfrom astropy import units as u\r\nfrom astropy.table import QTable\r\n\r\nT = QTable.read(\r\n        [\r\n            \" a b c d\",\r\n            \" 2 c 7.0 0\",\r\n            \" 2 b 5.0 1\",\r\n            \" 2 b 6.0 2\",\r\n            \" 2 a 4.0 3\",\r\n            \" 0 a 0.0 4\",\r\n            \" 1 b 3.0 5\",\r\n            \" 1 a 2.0 6\",\r\n            \" 1 a 1.0 7\",\r\n        ],\r\n        format=\"ascii\",\r\n)\r\nT[\"q\"] = np.arange(len(T)) * u.m\r\nT.meta.update({\"ta\": 1})\r\nT[\"c\"].meta.update({\"a\": 1})\r\nT[\"c\"].description = \"column c\"\r\nT.add_index(\"a\")\r\n\r\nt1 = QTable(T, masked=True)\r\ntg = t1.group_by(\"a\")\r\n```\r\n```python\r\n>>> tg\r\n<QTable length=8>\r\n  a    b      c      d      q\r\n                            m\r\nint64 str1 float64 int64 float64\r\n----- ---- ------- ----- -------\r\n    0    a     0.0     4     4.0\r\n    1    b     3.0     5     5.0\r\n    1    a     2.0     6     6.0\r\n    1    a     1.0     7     7.0\r\n    2    c     7.0     0     0.0\r\n    2    b     5.0     1     1.0\r\n    2    b     6.0     2     2.0\r\n    2    a     4.0     3     3.0\r\n```\n@pllim - I also cannot reproduce the problem locally on my Mac. What to do?\n@taldcroft , does the order matter? I am guessing yes?\r\n\r\nLooks like maybe somehow this test triggers some race condition but only in CI, or some global var is messing it up from a different test. But I don't know enough about internals to make a more educated guess.\nWhat about this: could the sort order have changed? Is the test failure on an \"AVX-512 enabled processor\"?\r\n\r\nhttps://numpy.org/devdocs/release/1.25.0-notes.html#faster-np-sort-on-avx-512-enabled-processors\nHmmm.... maybe?\r\n\r\n* https://github.com/actions/runner-images/discussions/5734\n@pllim - Grouping is supposed to maintain the original order within a group. That depends on the numpy sorting doing the same, which depends on the specific sort algorithm.\nSo that looks promising. Let me remind myself of the code in there...\nSo if we decide that https://github.com/numpy/numpy/pull/22315 is changing our result, is that a numpy bug?\nIt turns out this is likely in the table indexing code, which is never easy to understand. But it does look like this is the issue, because indexing appears to use the numpy default sorting, which is quicksort. But quicksort is not guaranteed to be stable, so maybe it was passing accidentally before.",
  "created_at": "2023-06-03T10:29:17Z",
  "version": "5.2",
  "FAIL_TO_PASS": "[\"astropy/table/tests/test_groups.py::test_group_by_masked[True]\", \"astropy/table/tests/test_groups.py::test_group_stable_sort[True]\", \"astropy/table/tests/test_groups.py::test_table_group_by[True]\"]",
  "PASS_TO_PASS": "[\"astropy/table/tests/test_groups.py::test_column_aggregate[False]\", \"astropy/table/tests/test_groups.py::test_column_aggregate[True]\", \"astropy/table/tests/test_groups.py::test_column_aggregate_f8\", \"astropy/table/tests/test_groups.py::test_column_filter\", \"astropy/table/tests/test_groups.py::test_column_group_by[False]\", \"astropy/table/tests/test_groups.py::test_column_group_by[True]\", \"astropy/table/tests/test_groups.py::test_group_by_errors[False]\", \"astropy/table/tests/test_groups.py::test_group_by_errors[True]\", \"astropy/table/tests/test_groups.py::test_group_by_masked[False]\", \"astropy/table/tests/test_groups.py::test_group_column_from_table[False]\", \"astropy/table/tests/test_groups.py::test_group_column_from_table[True]\", \"astropy/table/tests/test_groups.py::test_group_mixins\", \"astropy/table/tests/test_groups.py::test_group_mixins_unsupported[col0]\", \"astropy/table/tests/test_groups.py::test_group_mixins_unsupported[col1]\", \"astropy/table/tests/test_groups.py::test_group_mixins_unsupported[col2]\", \"astropy/table/tests/test_groups.py::test_group_stable_sort[False]\", \"astropy/table/tests/test_groups.py::test_grouped_copy[False]\", \"astropy/table/tests/test_groups.py::test_grouped_copy[True]\", \"astropy/table/tests/test_groups.py::test_grouped_item_access[False]\", \"astropy/table/tests/test_groups.py::test_grouped_item_access[True]\", \"astropy/table/tests/test_groups.py::test_grouped_slicing[False]\", \"astropy/table/tests/test_groups.py::test_grouped_slicing[True]\", \"astropy/table/tests/test_groups.py::test_groups_iterator[False]\", \"astropy/table/tests/test_groups.py::test_groups_iterator[True]\", \"astropy/table/tests/test_groups.py::test_groups_keys[False]\", \"astropy/table/tests/test_groups.py::test_groups_keys[True]\", \"astropy/table/tests/test_groups.py::test_groups_keys_meta[False]\", \"astropy/table/tests/test_groups.py::test_groups_keys_meta[True]\", \"astropy/table/tests/test_groups.py::test_mutable_operations[False]\", \"astropy/table/tests/test_groups.py::test_mutable_operations[True]\", \"astropy/table/tests/test_groups.py::test_table_aggregate[False]\", \"astropy/table/tests/test_groups.py::test_table_aggregate[True]\", \"astropy/table/tests/test_groups.py::test_table_aggregate_reduceat[False]\", \"astropy/table/tests/test_groups.py::test_table_aggregate_reduceat[True]\", \"astropy/table/tests/test_groups.py::test_table_filter\", \"astropy/table/tests/test_groups.py::test_table_group_by[False]\", \"astropy/table/tests/test_groups.py::test_table_groups_array_index[False]\", \"astropy/table/tests/test_groups.py::test_table_groups_array_index[True]\", \"astropy/table/tests/test_groups.py::test_table_groups_mask_index[False]\", \"astropy/table/tests/test_groups.py::test_table_groups_mask_index[True]\", \"astropy/table/tests/test_groups.py::test_table_groups_slicing[False]\", \"astropy/table/tests/test_groups.py::test_table_groups_slicing[True]\"]",
  "environment_setup_commit": "362f6df12abf9bd769d4915fabf955c993ea22cf",
  "patch_files": [
    "astropy/table/index.py",
    "astropy/time/core.py"
  ],
  "test_patch_files": [
    "astropy/table/tests/test_groups.py"
  ],
  "patch_diff_details": {
    "astropy/table/index.py": {
      "diffs": [
        {
          "start_line_old": 97,
          "end_line_old": 97
        },
        {
          "start_line_old": 120,
          "end_line_old": 120
        }
      ]
    },
    "astropy/time/core.py": {
      "diffs": [
        {
          "start_line_old": 1444,
          "end_line_old": 1450
        }
      ]
    }
  },
  "vectors": 4610,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/astropy/astropy/table/table.py_itertools___doctest_requires__.1",
      "distance": 0.9604586362838745,
      "file_path": "astropy/table/table.py",
      "start_line": 2,
      "end_line": 90,
      "tokens": 660,
      "context_length": 660
    },
    {
      "position": 2,
      "id": "/tmp/repos/astropy/astropy/table/table.py_Table.from_pandas.9_Table.info.1",
      "distance": 0.9983453750610352,
      "file_path": "astropy/table/table.py",
      "start_line": 4121,
      "end_line": 4172,
      "tokens": 499,
      "context_length": 1159
    },
    {
      "position": 3,
      "id": "/tmp/repos/astropy/astropy/table/table.py_Table.__getstate___Table._mask.2.1",
      "distance": 0.9983710646629333,
      "file_path": "astropy/table/table.py",
      "start_line": 929,
      "end_line": 972,
      "tokens": 307,
      "context_length": 1466
    },
    {
      "position": 4,
      "id": "/tmp/repos/astropy/astropy/table/groups.py_BaseGroups.__getitem___BaseGroups.__len__.1.1",
      "distance": 0.9993219375610352,
      "file_path": "astropy/table/groups.py",
      "start_line": 198,
      "end_line": 228,
      "tokens": 279,
      "context_length": 1745
    },
    {
      "position": 5,
      "id": "/tmp/repos/astropy/astropy/table/serialize.py_2___construct_mixin_classes.1",
      "distance": 1.0086907148361206,
      "file_path": "astropy/table/serialize.py",
      "start_line": 2,
      "end_line": 74,
      "tokens": 794,
      "context_length": 2539
    },
    {
      "position": 6,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray._eq_simple_MaskedNDArray.__ne__.6.1",
      "distance": 1.0106732845306396,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 643,
      "end_line": 672,
      "tokens": 302,
      "context_length": 2841
    },
    {
      "position": 7,
      "id": "/tmp/repos/astropy/astropy/table/groups.py_ColumnGroups.aggregate_ColumnGroups.aggregate.11.1",
      "distance": 1.013185977935791,
      "file_path": "astropy/table/groups.py",
      "start_line": 257,
      "end_line": 291,
      "tokens": 298,
      "context_length": 3139
    },
    {
      "position": 8,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.trace_MaskedNDArray.38.3.argmax.2.1",
      "distance": 1.0181291103363037,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 969,
      "end_line": 1027,
      "tokens": 645,
      "context_length": 3784
    },
    {
      "position": 9,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_20_dispatched_function.1",
      "distance": 1.0214285850524902,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 84,
      "end_line": 161,
      "tokens": 756,
      "context_length": 4540
    },
    {
      "position": 10,
      "id": "/tmp/repos/astropy/astropy/table/table_helpers.py_string_TimingTables.__init__.self.bool_mask.1",
      "distance": 1.0240765810012817,
      "file_path": "astropy/table/table_helpers.py",
      "start_line": 9,
      "end_line": 55,
      "tokens": 421,
      "context_length": 4961
    },
    {
      "position": 11,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py__get_data_and_masks_masked_arr_helper.2.1",
      "distance": 1.0353373289108276,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 164,
      "end_line": 231,
      "tokens": 599,
      "context_length": 5560
    },
    {
      "position": 12,
      "id": "/tmp/repos/astropy/astropy/table/operations.py__hstack.19_",
      "distance": 1.0433045625686646,
      "file_path": "astropy/table/operations.py",
      "start_line": 1598,
      "end_line": 1635,
      "tokens": 315,
      "context_length": 5875
    },
    {
      "position": 13,
      "id": "/tmp/repos/astropy/astropy/io/votable/validator/result.py_get_result_subsets_get_result_subsets.tables.1",
      "distance": 1.0437397956848145,
      "file_path": "astropy/io/votable/validator/result.py",
      "start_line": 235,
      "end_line": 338,
      "tokens": 806,
      "context_length": 6681
    },
    {
      "position": 14,
      "id": "/tmp/repos/astropy/astropy/io/fits/hdu/groups.py_GroupsHDU.columns_GroupsHDU.columns.22.1",
      "distance": 1.0487197637557983,
      "file_path": "astropy/io/fits/hdu/groups.py",
      "start_line": 326,
      "end_line": 365,
      "tokens": 369,
      "context_length": 7050
    },
    {
      "position": 15,
      "id": "/tmp/repos/astropy/astropy/io/ascii/core.py_masked_AllType.1",
      "distance": 1.051822304725647,
      "file_path": "astropy/io/ascii/core.py",
      "start_line": 186,
      "end_line": 270,
      "tokens": 404,
      "context_length": 7454
    },
    {
      "position": 16,
      "id": "/tmp/repos/astropy/astropy/io/fits/hdu/groups.py_GroupsHDU._verify_GroupsHDU._verify.10.1",
      "distance": 1.0535314083099365,
      "file_path": "astropy/io/fits/hdu/groups.py",
      "start_line": 519,
      "end_line": 534,
      "tokens": 213,
      "context_length": 7667
    },
    {
      "position": 17,
      "id": "/tmp/repos/astropy/astropy/io/votable/tree.py_base64__resize.5.1",
      "distance": 1.053926944732666,
      "file_path": "astropy/io/votable/tree.py",
      "start_line": 5,
      "end_line": 132,
      "tokens": 590,
      "context_length": 8257
    },
    {
      "position": 18,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_percentile_array_equal.5.1",
      "distance": 1.0585010051727295,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 654,
      "end_line": 669,
      "tokens": 156,
      "context_length": 8413
    },
    {
      "position": 19,
      "id": "/tmp/repos/astropy/astropy/io/fits/hdu/groups.py_GroupData.__new__.2_GroupData.__new__.3.1",
      "distance": 1.0609050989151,
      "file_path": "astropy/io/fits/hdu/groups.py",
      "start_line": 138,
      "end_line": 222,
      "tokens": 739,
      "context_length": 9152
    },
    {
      "position": 20,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.__array_function___MaskedNDArray.__array_function__.3.6.2.1.1",
      "distance": 1.0632531642913818,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 865,
      "end_line": 911,
      "tokens": 379,
      "context_length": 9531
    },
    {
      "position": 21,
      "id": "/tmp/repos/astropy/astropy/table/__init__.py__config___all__.1",
      "distance": 1.0720293521881104,
      "file_path": "astropy/table/__init__.py",
      "start_line": 3,
      "end_line": 44,
      "tokens": 218,
      "context_length": 9749
    },
    {
      "position": 22,
      "id": "/tmp/repos/astropy/astropy/io/fits/hdu/groups.py_GroupsHDU.update_header_GroupsHDU.update_header.10.2",
      "distance": 1.0745320320129395,
      "file_path": "astropy/io/fits/hdu/groups.py",
      "start_line": 404,
      "end_line": 467,
      "tokens": 642,
      "context_length": 10391
    },
    {
      "position": 23,
      "id": "/tmp/repos/astropy/astropy/units/format/ogip_parsetab.py__lr_productions_",
      "distance": 1.0763776302337646,
      "file_path": "astropy/units/format/ogip_parsetab.py",
      "start_line": 39,
      "end_line": 83,
      "tokens": 1026,
      "context_length": 11417
    },
    {
      "position": 24,
      "id": "/tmp/repos/astropy/astropy/table/table.py_Table._repr_html__Table._is_mixin_for_table.5.1",
      "distance": 1.0767390727996826,
      "file_path": "astropy/table/table.py",
      "start_line": 1622,
      "end_line": 1677,
      "tokens": 446,
      "context_length": 11863
    },
    {
      "position": 25,
      "id": "/tmp/repos/astropy/astropy/utils/masked/function_helpers.py_array_equiv_where.8.1",
      "distance": 1.0769398212432861,
      "file_path": "astropy/utils/masked/function_helpers.py",
      "start_line": 672,
      "end_line": 691,
      "tokens": 139,
      "context_length": 12002
    },
    {
      "position": 26,
      "id": "/tmp/repos/astropy/astropy/table/groups.py_platform__table_group_by.26.1",
      "distance": 1.0770243406295776,
      "file_path": "astropy/table/groups.py",
      "start_line": 3,
      "end_line": 118,
      "tokens": 915,
      "context_length": 12917
    },
    {
      "position": 27,
      "id": "/tmp/repos/astropy/astropy/io/votable/tree.py_Table._parse_tabledata_Table._parse_tabledata.invalid.26.1",
      "distance": 1.0788695812225342,
      "file_path": "astropy/io/votable/tree.py",
      "start_line": 2794,
      "end_line": 2909,
      "tokens": 915,
      "context_length": 13832
    },
    {
      "position": 28,
      "id": "/tmp/repos/astropy/astropy/io/fits/diff.py_TableDataDiff._report_TableDataDiff._report.13",
      "distance": 1.0820673704147339,
      "file_path": "astropy/io/fits/diff.py",
      "start_line": 1490,
      "end_line": 1554,
      "tokens": 553,
      "context_length": 14385
    },
    {
      "position": 29,
      "id": "/tmp/repos/astropy/astropy/io/fits/column.py_ASCII_DEFAULT_WIDTHS_91",
      "distance": 1.0821279287338257,
      "file_path": "astropy/io/fits/column.py",
      "start_line": 86,
      "end_line": 146,
      "tokens": 757,
      "context_length": 15142
    },
    {
      "position": 30,
      "id": "/tmp/repos/astropy/astropy/utils/masked/core.py_MaskedNDArray.std_MaskedNDArray.__format__.2.3.1.1",
      "distance": 1.082232117652893,
      "file_path": "astropy/utils/masked/core.py",
      "start_line": 1183,
      "end_line": 1220,
      "tokens": 357,
      "context_length": 15499
    },
    {
      "position": 31,
      "id": "/tmp/repos/astropy/astropy/io/fits/diff.py_TableDataDiff._diff_TableDataDiff._diff.colsa.self.diff_ratio.1",
      "distance": 1.0826811790466309,
      "file_path": "astropy/io/fits/diff.py",
      "start_line": 1344,
      "end_line": 1488,
      "tokens": 1295,
      "context_length": 16794
    },
    {
      "position": 32,
      "id": "/tmp/repos/astropy/astropy/table/table.py_Table._rows_equal_Table._rows_equal.4.1",
      "distance": 1.0847108364105225,
      "file_path": "astropy/table/table.py",
      "start_line": 3688,
      "end_line": 3732,
      "tokens": 388,
      "context_length": 17182
    },
    {
      "position": 33,
      "id": "/tmp/repos/astropy/astropy/timeseries/core.py_BaseTimeSeries_",
      "distance": 1.0848488807678223,
      "file_path": "astropy/timeseries/core.py",
      "start_line": 46,
      "end_line": 104,
      "tokens": 465,
      "context_length": 17647
    },
    {
      "position": 34,
      "id": "/tmp/repos/astropy/astropy/table/column.py_MaskedColumn.__setitem___",
      "distance": 1.0850038528442383,
      "file_path": "astropy/table/column.py",
      "start_line": 1808,
      "end_line": 1835,
      "tokens": 269,
      "context_length": 17916
    },
    {
      "position": 35,
      "id": "/tmp/repos/astropy/astropy/units/quantity_helper/function_helpers.py_invariant_m_helper_place.2.3.1",
      "distance": 1.0851545333862305,
      "file_path": "astropy/units/quantity_helper/function_helpers.py",
      "start_line": 190,
      "end_line": 276,
      "tokens": 771,
      "context_length": 18687
    },
    {
      "position": 36,
      "id": "/tmp/repos/astropy/astropy/units/format/ogip_parsetab.py__lr_action_items__lr_action_items.1",
      "distance": 1.0858395099639893,
      "file_path": "astropy/units/format/ogip_parsetab.py",
      "start_line": 22,
      "end_line": 22,
      "tokens": 1114,
      "context_length": 19801
    },
    {
      "position": 37,
      "id": "/tmp/repos/astropy/astropy/io/fits/column.py_copy_61",
      "distance": 1.0866278409957886,
      "file_path": "astropy/io/fits/column.py",
      "start_line": 3,
      "end_line": 85,
      "tokens": 770,
      "context_length": 20571
    },
    {
      "position": 38,
      "id": "/tmp/repos/astropy/astropy/table/table.py_Table.values_equal_Table.values_equal.8.1",
      "distance": 1.0866639614105225,
      "file_path": "astropy/table/table.py",
      "start_line": 3734,
      "end_line": 3814,
      "tokens": 650,
      "context_length": 21221
    },
    {
      "position": 39,
      "id": "/tmp/repos/astropy/astropy/io/ascii/ui.py__guess.26__guess.26.3.2.5.7",
      "distance": 1.0867663621902466,
      "file_path": "astropy/io/ascii/ui.py",
      "start_line": 571,
      "end_line": 650,
      "tokens": 645,
      "context_length": 21866
    }
  ],
  "files": [
    {
      "file_path": "astropy/table/table.py",
      "position": 1,
      "tokens": 33427,
      "context_length": 33427
    },
    {
      "file_path": "astropy/table/groups.py",
      "position": 2,
      "tokens": 3070,
      "context_length": 36497
    },
    {
      "file_path": "astropy/table/serialize.py",
      "position": 3,
      "tokens": 4356,
      "context_length": 40853
    },
    {
      "file_path": "astropy/utils/masked/core.py",
      "position": 4,
      "tokens": 10706,
      "context_length": 51559
    },
    {
      "file_path": "astropy/utils/masked/function_helpers.py",
      "position": 5,
      "tokens": 8907,
      "context_length": 60466
    },
    {
      "file_path": "astropy/table/table_helpers.py",
      "position": 6,
      "tokens": 1570,
      "context_length": 62036
    },
    {
      "file_path": "astropy/table/operations.py",
      "position": 7,
      "tokens": 14486,
      "context_length": 76522
    },
    {
      "file_path": "astropy/io/votable/validator/result.py",
      "position": 8,
      "tokens": 2526,
      "context_length": 79048
    },
    {
      "file_path": "astropy/io/fits/hdu/groups.py",
      "position": 9,
      "tokens": 5018,
      "context_length": 84066
    },
    {
      "file_path": "astropy/io/ascii/core.py",
      "position": 10,
      "tokens": 13831,
      "context_length": 97897
    },
    {
      "file_path": "astropy/io/votable/tree.py",
      "position": 11,
      "tokens": 29417,
      "context_length": 127314
    },
    {
      "file_path": "astropy/table/__init__.py",
      "position": 12,
      "tokens": 809,
      "context_length": 128123
    },
    {
      "file_path": "astropy/units/format/ogip_parsetab.py",
      "position": 13,
      "tokens": 3165,
      "context_length": 131288
    },
    {
      "file_path": "astropy/io/fits/diff.py",
      "position": 14,
      "tokens": 13089,
      "context_length": 144377
    },
    {
      "file_path": "astropy/io/fits/column.py",
      "position": 15,
      "tokens": 22688,
      "context_length": 167065
    },
    {
      "file_path": "astropy/timeseries/core.py",
      "position": 16,
      "tokens": 736,
      "context_length": 167801
    },
    {
      "file_path": "astropy/table/column.py",
      "position": 17,
      "tokens": 14829,
      "context_length": 182630
    },
    {
      "file_path": "astropy/units/quantity_helper/function_helpers.py",
      "position": 18,
      "tokens": 10247,
      "context_length": 192877
    },
    {
      "file_path": "astropy/io/ascii/ui.py",
      "position": 19,
      "tokens": 8061,
      "context_length": 200938
    }
  ]
}