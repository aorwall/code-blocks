{
  "instance_id": "django__django-12771",
  "model_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex fe8594ad77..c7465e4497 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -359,16 +359,14 @@ class ModelState:\n     def __init__(self, app_label, name, fields, options=None, bases=None, managers=None):\n         self.app_label = app_label\n         self.name = name\n-        self.fields = fields\n+        self.fields = {name: field for name, field in fields}\n         self.options = options or {}\n-        self.options.setdefault('indexes', [])\n-        self.options.setdefault('constraints', [])\n+        self.options.setdefault('indexes', {})\n+        self.options.setdefault('constraints', {})\n         self.bases = bases or (models.Model,)\n         self.managers = managers or []\n         # Sanity-check that fields is NOT a dict. It must be ordered.\n-        if isinstance(self.fields, dict):\n-            raise ValueError(\"ModelState.fields cannot be a dict - it must be a list of 2-tuples.\")\n-        for name, field in fields:\n+        for name, field in self.fields.items():\n             # Sanity-check that fields are NOT already bound to a model.\n             if hasattr(field, 'model'):\n                 raise ValueError(\n@@ -386,12 +384,19 @@ class ModelState:\n                     'Use a string reference instead.' % name\n                 )\n         # Sanity-check that indexes have their name set.\n-        for index in self.options['indexes']:\n+        for index in self.options['indexes'].values():\n             if not index.name:\n                 raise ValueError(\n                     \"Indexes passed to ModelState require a name attribute. \"\n                     \"%r doesn't have one.\" % index\n                 )\n+        # Sanity-check that constraints have their name set.\n+        for constraint in self.options['constraints'].values():\n+            if not constraint.name:\n+                raise ValueError(\n+                    \"Constraints passed to ModelState require a name attribute. \"\n+                    \"%r doesn't have one.\" % constraint\n+                )\n \n     @cached_property\n     def name_lower(self):\n@@ -441,13 +446,13 @@ class ModelState:\n                     it = model._meta.original_attrs[\"index_together\"]\n                     options[name] = set(normalize_together(it))\n                 elif name == \"indexes\":\n-                    indexes = [idx.clone() for idx in model._meta.indexes]\n-                    for index in indexes:\n+                    indexes = {idx.name: idx.clone() for idx in model._meta.indexes}\n+                    for index in indexes.values():\n                         if not index.name:\n                             index.set_name_with_model(model)\n                     options['indexes'] = indexes\n                 elif name == 'constraints':\n-                    options['constraints'] = [con.clone() for con in model._meta.constraints]\n+                    options['constraints'] = {con.name: con.clone() for con in model._meta.constraints}\n                 else:\n                     options[name] = model._meta.original_attrs[name]\n         # If we're ignoring relationships, remove all field-listing model\n@@ -544,7 +549,7 @@ class ModelState:\n         return self.__class__(\n             app_label=self.app_label,\n             name=self.name,\n-            fields=list(self.fields),\n+            fields=dict(self.fields),\n             # Since options are shallow-copied here, operations such as\n             # AddIndex must replace their option (e.g 'indexes') rather\n             # than mutating it.\n@@ -567,7 +572,7 @@ class ModelState:\n         except LookupError:\n             raise InvalidBasesError(\"Cannot resolve one or more bases from %r\" % (self.bases,))\n         # Turn fields into a dict for the body, add other bits\n-        body = {name: field.clone() for name, field in self.fields}\n+        body = {name: field.clone() for name, field in self.fields.items()}\n         body['Meta'] = meta\n         body['__module__'] = \"__fake__\"\n \n@@ -577,22 +582,13 @@ class ModelState:\n         return type(self.name, bases, body)\n \n     def get_field_by_name(self, name):\n-        for fname, field in self.fields:\n-            if fname == name:\n-                return field\n-        raise ValueError(\"No field called %s on model %s\" % (name, self.name))\n+        return self.fields[name]\n \n     def get_index_by_name(self, name):\n-        for index in self.options['indexes']:\n-            if index.name == name:\n-                return index\n-        raise ValueError(\"No index named %s on model %s\" % (name, self.name))\n+        return self.options['indexes'][name]\n \n     def get_constraint_by_name(self, name):\n-        for constraint in self.options['constraints']:\n-            if constraint.name == name:\n-                return constraint\n-        raise ValueError('No constraint named %s on model %s' % (name, self.name))\n+        return self.options['constraints'][name]\n \n     def __repr__(self):\n         return \"<%s: '%s.%s'>\" % (self.__class__.__name__, self.app_label, self.name)\n@@ -601,9 +597,7 @@ class ModelState:\n         return (\n             (self.app_label == other.app_label) and\n             (self.name == other.name) and\n-            (len(self.fields) == len(other.fields)) and\n-            all((k1 == k2 and (f1.deconstruct()[1:] == f2.deconstruct()[1:]))\n-                for (k1, f1), (k2, f2) in zip(self.fields, other.fields)) and\n+            (self.fields == other.fields) and\n             (self.options == other.options) and\n             (self.bases == other.bases) and\n             (self.managers == other.managers)\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "django/db/migrations/state.py"
  ],
  "repo": "django/django",
  "base_commit": "0f2885e3f6e0c73c9f455dcbc0326ac11ba4b84c",
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -93,7 +93,7 @@ def only_relation_agnostic_fields(self, fields):\n         of course, the related fields change during renames).\n         \"\"\"\n         fields_def = []\n-        for name, field in sorted(fields):\n+        for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n                 del deconstruction[2]['to']\n@@ -208,17 +208,17 @@ def _prepare_field_lists(self):\n         self.kept_unmanaged_keys = self.old_unmanaged_keys & self.new_unmanaged_keys\n         self.through_users = {}\n         self.old_field_keys = {\n-            (app_label, model_name, x)\n+            (app_label, model_name, field_name)\n             for app_label, model_name in self.kept_model_keys\n-            for x, y in self.from_state.models[\n+            for field_name in self.from_state.models[\n                 app_label,\n                 self.renamed_models.get((app_label, model_name), model_name)\n             ].fields\n         }\n         self.new_field_keys = {\n-            (app_label, model_name, x)\n+            (app_label, model_name, field_name)\n             for app_label, model_name in self.kept_model_keys\n-            for x, y in self.to_state.models[app_label, model_name].fields\n+            for field_name in self.to_state.models[app_label, model_name].fields\n         }\n \n     def _generate_through_model_map(self):\n@@ -226,7 +226,7 @@ def _generate_through_model_map(self):\n         for app_label, model_name in sorted(self.old_model_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n-            for field_name, field in old_model_state.fields:\n+            for field_name in old_model_state.fields:\n                 old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n                         not old_field.remote_field.through._meta.auto_created):\n@@ -576,7 +576,7 @@ def generate_created_models(self):\n                 app_label,\n                 operations.CreateModel(\n                     name=model_state.name,\n-                    fields=[d for d in model_state.fields if d[0] not in related_fields],\n+                    fields=[d for d in model_state.fields.items() if d[0] not in related_fields],\n                     options=model_state.options,\n                     bases=model_state.bases,\n                     managers=model_state.managers,\n@@ -820,7 +820,7 @@ def generate_renamed_fields(self):\n             field_dec = self.deep_deconstruct(field)\n             for rem_app_label, rem_model_name, rem_field_name in sorted(self.old_field_keys - self.new_field_keys):\n                 if rem_app_label == app_label and rem_model_name == model_name:\n-                    old_field = old_model_state.get_field_by_name(rem_field_name)\n+                    old_field = old_model_state.fields[rem_field_name]\n                     old_field_dec = self.deep_deconstruct(old_field)\n                     if field.remote_field and field.remote_field.model and 'to' in old_field_dec[2]:\n                         old_rel_to = old_field_dec[2]['to']\ndiff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -89,7 +89,7 @@ def state_forwards(self, app_label, state):\n             field.default = NOT_PROVIDED\n         else:\n             field = self.field\n-        state.models[app_label, self.model_name_lower].fields.append((self.name, field))\n+        state.models[app_label, self.model_name_lower].fields[self.name] = field\n         # Delay rendering of relationships if it's not a relational field\n         delay = not field.is_relation\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n@@ -154,14 +154,8 @@ def deconstruct(self):\n         )\n \n     def state_forwards(self, app_label, state):\n-        new_fields = []\n-        old_field = None\n-        for name, instance in state.models[app_label, self.model_name_lower].fields:\n-            if name != self.name:\n-                new_fields.append((name, instance))\n-            else:\n-                old_field = instance\n-        state.models[app_label, self.model_name_lower].fields = new_fields\n+        model_state = state.models[app_label, self.model_name_lower]\n+        old_field = model_state.fields.pop(self.name)\n         # Delay rendering of relationships if it's not a relational field\n         delay = not old_field.is_relation\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n@@ -217,11 +211,8 @@ def state_forwards(self, app_label, state):\n             field.default = NOT_PROVIDED\n         else:\n             field = self.field\n-        state.models[app_label, self.model_name_lower].fields = [\n-            (n, field if n == self.name else f)\n-            for n, f in\n-            state.models[app_label, self.model_name_lower].fields\n-        ]\n+        model_state = state.models[app_label, self.model_name_lower]\n+        model_state.fields[self.name] = field\n         # TODO: investigate if old relational fields must be reloaded or if it's\n         # sufficient if the new field is (#27737).\n         # Delay rendering of relationships if it's not a relational field and\n@@ -299,11 +290,14 @@ def state_forwards(self, app_label, state):\n         model_state = state.models[app_label, self.model_name_lower]\n         # Rename the field\n         fields = model_state.fields\n-        found = None\n-        for index, (name, field) in enumerate(fields):\n-            if not found and name == self.old_name:\n-                fields[index] = (self.new_name, field)\n-                found = field\n+        try:\n+            found = fields.pop(self.old_name)\n+        except KeyError:\n+            raise FieldDoesNotExist(\n+                \"%s.%s has no field named '%s'\" % (app_label, self.model_name, self.old_name)\n+            )\n+        fields[self.new_name] = found\n+        for field in fields.values():\n             # Fix from_fields to refer to the new field.\n             from_fields = getattr(field, 'from_fields', None)\n             if from_fields:\n@@ -311,10 +305,6 @@ def state_forwards(self, app_label, state):\n                     self.new_name if from_field_name == self.old_name else from_field_name\n                     for from_field_name in from_fields\n                 ])\n-        if found is None:\n-            raise FieldDoesNotExist(\n-                \"%s.%s has no field named '%s'\" % (app_label, self.model_name, self.old_name)\n-            )\n         # Fix index/unique_together to refer to the new field\n         options = model_state.options\n         for option in ('index_together', 'unique_together'):\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -310,7 +310,7 @@ def state_forwards(self, app_label, state):\n         old_model_tuple = (app_label, self.old_name_lower)\n         new_remote_model = '%s.%s' % (app_label, self.new_name)\n         to_reload = set()\n-        for model_state, index, name, field, reference in get_references(state, old_model_tuple):\n+        for model_state, name, field, reference in get_references(state, old_model_tuple):\n             changed_field = None\n             if reference.to:\n                 changed_field = field.clone()\n@@ -320,7 +320,7 @@ def state_forwards(self, app_label, state):\n                     changed_field = field.clone()\n                 changed_field.remote_field.through = new_remote_model\n             if changed_field:\n-                model_state.fields[index] = name, changed_field\n+                model_state.fields[name] = changed_field\n                 to_reload.add((model_state.app_label, model_state.name_lower))\n         # Reload models related to old model before removing the old model.\n         state.reload_models(to_reload, delay=True)\ndiff --git a/django/db/migrations/operations/utils.py b/django/db/migrations/operations/utils.py\n--- a/django/db/migrations/operations/utils.py\n+++ b/django/db/migrations/operations/utils.py\n@@ -83,17 +83,17 @@ def field_references(\n \n def get_references(state, model_tuple, field_tuple=()):\n     \"\"\"\n-    Generator of (model_state, index, name, field, reference) referencing\n+    Generator of (model_state, name, field, reference) referencing\n     provided context.\n \n     If field_tuple is provided only references to this particular field of\n     model_tuple will be generated.\n     \"\"\"\n     for state_model_tuple, model_state in state.models.items():\n-        for index, (name, field) in enumerate(model_state.fields):\n+        for name, field in model_state.fields.items():\n             reference = field_references(state_model_tuple, field, model_tuple, *field_tuple)\n             if reference:\n-                yield model_state, index, name, field, reference\n+                yield model_state, name, field, reference\n \n \n def field_is_referenced(state, model_tuple, field_tuple):\ndiff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -125,7 +125,7 @@ def _find_reload_model(self, app_label, model_name, delay=False):\n         # Directly related models are the models pointed to by ForeignKeys,\n         # OneToOneFields, and ManyToManyFields.\n         direct_related_models = set()\n-        for name, field in model_state.fields:\n+        for field in model_state.fields.values():\n             if field.is_relation:\n                 if field.remote_field.model == RECURSIVE_RELATIONSHIP_CONSTANT:\n                     continue\n@@ -359,16 +359,13 @@ class ModelState:\n     def __init__(self, app_label, name, fields, options=None, bases=None, managers=None):\n         self.app_label = app_label\n         self.name = name\n-        self.fields = fields\n+        self.fields = dict(fields)\n         self.options = options or {}\n         self.options.setdefault('indexes', [])\n         self.options.setdefault('constraints', [])\n         self.bases = bases or (models.Model,)\n         self.managers = managers or []\n-        # Sanity-check that fields is NOT a dict. It must be ordered.\n-        if isinstance(self.fields, dict):\n-            raise ValueError(\"ModelState.fields cannot be a dict - it must be a list of 2-tuples.\")\n-        for name, field in fields:\n+        for name, field in self.fields.items():\n             # Sanity-check that fields are NOT already bound to a model.\n             if hasattr(field, 'model'):\n                 raise ValueError(\n@@ -544,7 +541,7 @@ def clone(self):\n         return self.__class__(\n             app_label=self.app_label,\n             name=self.name,\n-            fields=list(self.fields),\n+            fields=dict(self.fields),\n             # Since options are shallow-copied here, operations such as\n             # AddIndex must replace their option (e.g 'indexes') rather\n             # than mutating it.\n@@ -566,8 +563,8 @@ def render(self, apps):\n             )\n         except LookupError:\n             raise InvalidBasesError(\"Cannot resolve one or more bases from %r\" % (self.bases,))\n-        # Turn fields into a dict for the body, add other bits\n-        body = {name: field.clone() for name, field in self.fields}\n+        # Clone fields for the body, add other bits.\n+        body = {name: field.clone() for name, field in self.fields.items()}\n         body['Meta'] = meta\n         body['__module__'] = \"__fake__\"\n \n@@ -576,12 +573,6 @@ def render(self, apps):\n         # Then, make a Model object (apps.register_model is called in __new__)\n         return type(self.name, bases, body)\n \n-    def get_field_by_name(self, name):\n-        for fname, field in self.fields:\n-            if fname == name:\n-                return field\n-        raise ValueError(\"No field called %s on model %s\" % (name, self.name))\n-\n     def get_index_by_name(self, name):\n         for index in self.options['indexes']:\n             if index.name == name:\n@@ -602,8 +593,13 @@ def __eq__(self, other):\n             (self.app_label == other.app_label) and\n             (self.name == other.name) and\n             (len(self.fields) == len(other.fields)) and\n-            all((k1 == k2 and (f1.deconstruct()[1:] == f2.deconstruct()[1:]))\n-                for (k1, f1), (k2, f2) in zip(self.fields, other.fields)) and\n+            all(\n+                k1 == k2 and f1.deconstruct()[1:] == f2.deconstruct()[1:]\n+                for (k1, f1), (k2, f2) in zip(\n+                    sorted(self.fields.items()),\n+                    sorted(other.fields.items()),\n+                )\n+            ) and\n             (self.options == other.options) and\n             (self.bases == other.bases) and\n             (self.managers == other.managers)\n",
  "test_patch": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -516,13 +516,13 @@ def test_unrelated_applied_migrations_mutate_state(self):\n         state = executor.migrate([\n             ('mutate_state_a', '0001_initial'),\n         ])\n-        self.assertIn('added', dict(state.models['mutate_state_b', 'b'].fields))\n+        self.assertIn('added', state.models['mutate_state_b', 'b'].fields)\n         executor.loader.build_graph()\n         # Migrate backward.\n         state = executor.migrate([\n             ('mutate_state_a', None),\n         ])\n-        self.assertIn('added', dict(state.models['mutate_state_b', 'b'].fields))\n+        self.assertIn('added', state.models['mutate_state_b', 'b'].fields)\n         executor.migrate([\n             ('mutate_state_b', None),\n         ])\ndiff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -73,15 +73,12 @@ def test_load(self):\n \n         author_state = project_state.models[\"migrations\", \"author\"]\n         self.assertEqual(\n-            [x for x, y in author_state.fields],\n+            list(author_state.fields),\n             [\"id\", \"name\", \"slug\", \"age\", \"rating\"]\n         )\n \n         book_state = project_state.models[\"migrations\", \"book\"]\n-        self.assertEqual(\n-            [x for x, y in book_state.fields],\n-            [\"id\", \"author\"]\n-        )\n+        self.assertEqual(list(book_state.fields), ['id', 'author'])\n \n         # Ensure we've included unmigrated apps in there too\n         self.assertIn(\"basic\", project_state.real_apps)\n@@ -122,10 +119,7 @@ def test_load_unmigrated_dependency(self):\n         self.assertEqual(len([m for a, m in project_state.models if a == \"migrations\"]), 1)\n \n         book_state = project_state.models[\"migrations\", \"book\"]\n-        self.assertEqual(\n-            [x for x, y in book_state.fields],\n-            [\"id\", \"user\"]\n-        )\n+        self.assertEqual(list(book_state.fields), ['id', 'user'])\n \n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_run_before\"})\n     def test_run_before(self):\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -521,7 +521,10 @@ def test_rename_model(self):\n         self.assertNotIn((\"test_rnmo\", \"pony\"), new_state.models)\n         self.assertIn((\"test_rnmo\", \"horse\"), new_state.models)\n         # RenameModel also repoints all incoming FKs and M2Ms\n-        self.assertEqual(\"test_rnmo.Horse\", new_state.models[\"test_rnmo\", \"rider\"].fields[1][1].remote_field.model)\n+        self.assertEqual(\n+            new_state.models['test_rnmo', 'rider'].fields['pony'].remote_field.model,\n+            'test_rnmo.Horse',\n+        )\n         self.assertTableNotExists(\"test_rnmo_pony\")\n         self.assertTableExists(\"test_rnmo_horse\")\n         if connection.features.supports_foreign_keys:\n@@ -532,7 +535,10 @@ def test_rename_model(self):\n         # Test original state and database\n         self.assertIn((\"test_rnmo\", \"pony\"), original_state.models)\n         self.assertNotIn((\"test_rnmo\", \"horse\"), original_state.models)\n-        self.assertEqual(\"Pony\", original_state.models[\"test_rnmo\", \"rider\"].fields[1][1].remote_field.model)\n+        self.assertEqual(\n+            original_state.models['test_rnmo', 'rider'].fields['pony'].remote_field.model,\n+            'Pony',\n+        )\n         self.assertTableExists(\"test_rnmo_pony\")\n         self.assertTableNotExists(\"test_rnmo_horse\")\n         if connection.features.supports_foreign_keys:\n@@ -579,7 +585,7 @@ def test_rename_model_with_self_referential_fk(self):\n         # Remember, RenameModel also repoints all incoming FKs and M2Ms\n         self.assertEqual(\n             'self',\n-            new_state.models[\"test_rmwsrf\", \"horserider\"].fields[2][1].remote_field.model\n+            new_state.models[\"test_rmwsrf\", \"horserider\"].fields['friend'].remote_field.model\n         )\n         HorseRider = new_state.apps.get_model('test_rmwsrf', 'horserider')\n         self.assertIs(HorseRider._meta.get_field('horserider').remote_field.model, HorseRider)\n@@ -621,8 +627,8 @@ def test_rename_model_with_superclass_fk(self):\n         self.assertIn((\"test_rmwsc\", \"littlehorse\"), new_state.models)\n         # RenameModel shouldn't repoint the superclass's relations, only local ones\n         self.assertEqual(\n-            project_state.models[\"test_rmwsc\", \"rider\"].fields[1][1].remote_field.model,\n-            new_state.models[\"test_rmwsc\", \"rider\"].fields[1][1].remote_field.model\n+            project_state.models['test_rmwsc', 'rider'].fields['pony'].remote_field.model,\n+            new_state.models['test_rmwsc', 'rider'].fields['pony'].remote_field.model,\n         )\n         # Before running the migration we have a table for Shetland Pony, not Little Horse\n         self.assertTableExists(\"test_rmwsc_shetlandpony\")\n@@ -797,10 +803,7 @@ def test_add_field(self):\n         self.assertEqual(operation.describe(), \"Add field height to Pony\")\n         project_state, new_state = self.make_test_state(\"test_adfl\", operation)\n         self.assertEqual(len(new_state.models[\"test_adfl\", \"pony\"].fields), 4)\n-        field = [\n-            f for n, f in new_state.models[\"test_adfl\", \"pony\"].fields\n-            if n == \"height\"\n-        ][0]\n+        field = new_state.models['test_adfl', 'pony'].fields['height']\n         self.assertEqual(field.default, 5)\n         # Test the database alteration\n         self.assertColumnNotExists(\"test_adfl_pony\", \"height\")\n@@ -974,10 +977,7 @@ def test_add_field_preserve_default(self):\n         new_state = project_state.clone()\n         operation.state_forwards(\"test_adflpd\", new_state)\n         self.assertEqual(len(new_state.models[\"test_adflpd\", \"pony\"].fields), 4)\n-        field = [\n-            f for n, f in new_state.models[\"test_adflpd\", \"pony\"].fields\n-            if n == \"height\"\n-        ][0]\n+        field = new_state.models['test_adflpd', 'pony'].fields['height']\n         self.assertEqual(field.default, models.NOT_PROVIDED)\n         # Test the database alteration\n         project_state.apps.get_model(\"test_adflpd\", \"pony\").objects.create(\n@@ -1234,8 +1234,8 @@ def test_alter_field(self):\n         self.assertEqual(operation.describe(), \"Alter field pink on Pony\")\n         new_state = project_state.clone()\n         operation.state_forwards(\"test_alfl\", new_state)\n-        self.assertIs(project_state.models[\"test_alfl\", \"pony\"].get_field_by_name(\"pink\").null, False)\n-        self.assertIs(new_state.models[\"test_alfl\", \"pony\"].get_field_by_name(\"pink\").null, True)\n+        self.assertIs(project_state.models['test_alfl', 'pony'].fields['pink'].null, False)\n+        self.assertIs(new_state.models['test_alfl', 'pony'].fields['pink'].null, True)\n         # Test the database alteration\n         self.assertColumnNotNull(\"test_alfl_pony\", \"pink\")\n         with connection.schema_editor() as editor:\n@@ -1260,8 +1260,14 @@ def test_alter_field_pk(self):\n         operation = migrations.AlterField(\"Pony\", \"id\", models.IntegerField(primary_key=True))\n         new_state = project_state.clone()\n         operation.state_forwards(\"test_alflpk\", new_state)\n-        self.assertIsInstance(project_state.models[\"test_alflpk\", \"pony\"].get_field_by_name(\"id\"), models.AutoField)\n-        self.assertIsInstance(new_state.models[\"test_alflpk\", \"pony\"].get_field_by_name(\"id\"), models.IntegerField)\n+        self.assertIsInstance(\n+            project_state.models['test_alflpk', 'pony'].fields['id'],\n+            models.AutoField,\n+        )\n+        self.assertIsInstance(\n+            new_state.models['test_alflpk', 'pony'].fields['id'],\n+            models.IntegerField,\n+        )\n         # Test the database alteration\n         with connection.schema_editor() as editor:\n             operation.database_forwards(\"test_alflpk\", editor, project_state, new_state)\n@@ -1289,8 +1295,14 @@ def test_alter_field_pk_fk(self):\n         operation = migrations.AlterField(\"Pony\", \"id\", models.FloatField(primary_key=True))\n         new_state = project_state.clone()\n         operation.state_forwards(\"test_alflpkfk\", new_state)\n-        self.assertIsInstance(project_state.models[\"test_alflpkfk\", \"pony\"].get_field_by_name(\"id\"), models.AutoField)\n-        self.assertIsInstance(new_state.models[\"test_alflpkfk\", \"pony\"].get_field_by_name(\"id\"), models.FloatField)\n+        self.assertIsInstance(\n+            project_state.models['test_alflpkfk', 'pony'].fields['id'],\n+            models.AutoField,\n+        )\n+        self.assertIsInstance(\n+            new_state.models['test_alflpkfk', 'pony'].fields['id'],\n+            models.FloatField,\n+        )\n \n         def assertIdTypeEqualsFkType():\n             with connection.cursor() as cursor:\n@@ -1479,8 +1491,8 @@ def test_rename_field(self):\n         self.assertEqual(operation.describe(), \"Rename field pink on Pony to blue\")\n         new_state = project_state.clone()\n         operation.state_forwards(\"test_rnfl\", new_state)\n-        self.assertIn(\"blue\", [n for n, f in new_state.models[\"test_rnfl\", \"pony\"].fields])\n-        self.assertNotIn(\"pink\", [n for n, f in new_state.models[\"test_rnfl\", \"pony\"].fields])\n+        self.assertIn(\"blue\", new_state.models[\"test_rnfl\", \"pony\"].fields)\n+        self.assertNotIn(\"pink\", new_state.models[\"test_rnfl\", \"pony\"].fields)\n         # Make sure the unique_together has the renamed column too\n         self.assertIn(\"blue\", new_state.models[\"test_rnfl\", \"pony\"].options['unique_together'][0])\n         self.assertNotIn(\"pink\", new_state.models[\"test_rnfl\", \"pony\"].options['unique_together'][0])\n@@ -1536,19 +1548,19 @@ def test_rename_referenced_field_state_forward(self):\n         operation = migrations.RenameField('Model', 'field', 'renamed')\n         new_state = state.clone()\n         operation.state_forwards('app', new_state)\n-        self.assertEqual(new_state.models['app', 'othermodel'].fields[1][1].remote_field.field_name, 'renamed')\n-        self.assertEqual(new_state.models['app', 'othermodel'].fields[1][1].from_fields, ['self'])\n-        self.assertEqual(new_state.models['app', 'othermodel'].fields[1][1].to_fields, ('renamed',))\n-        self.assertEqual(new_state.models['app', 'othermodel'].fields[2][1].from_fields, ('fk',))\n-        self.assertEqual(new_state.models['app', 'othermodel'].fields[2][1].to_fields, ('renamed',))\n+        self.assertEqual(new_state.models['app', 'othermodel'].fields['fk'].remote_field.field_name, 'renamed')\n+        self.assertEqual(new_state.models['app', 'othermodel'].fields['fk'].from_fields, ['self'])\n+        self.assertEqual(new_state.models['app', 'othermodel'].fields['fk'].to_fields, ('renamed',))\n+        self.assertEqual(new_state.models['app', 'othermodel'].fields['fo'].from_fields, ('fk',))\n+        self.assertEqual(new_state.models['app', 'othermodel'].fields['fo'].to_fields, ('renamed',))\n         operation = migrations.RenameField('OtherModel', 'fk', 'renamed_fk')\n         new_state = state.clone()\n         operation.state_forwards('app', new_state)\n-        self.assertEqual(new_state.models['app', 'othermodel'].fields[1][1].remote_field.field_name, 'renamed')\n-        self.assertEqual(new_state.models['app', 'othermodel'].fields[1][1].from_fields, ('self',))\n-        self.assertEqual(new_state.models['app', 'othermodel'].fields[1][1].to_fields, ('renamed',))\n-        self.assertEqual(new_state.models['app', 'othermodel'].fields[2][1].from_fields, ('renamed_fk',))\n-        self.assertEqual(new_state.models['app', 'othermodel'].fields[2][1].to_fields, ('renamed',))\n+        self.assertEqual(new_state.models['app', 'othermodel'].fields['renamed_fk'].remote_field.field_name, 'renamed')\n+        self.assertEqual(new_state.models['app', 'othermodel'].fields['renamed_fk'].from_fields, ('self',))\n+        self.assertEqual(new_state.models['app', 'othermodel'].fields['renamed_fk'].to_fields, ('renamed',))\n+        self.assertEqual(new_state.models['app', 'othermodel'].fields['fo'].from_fields, ('renamed_fk',))\n+        self.assertEqual(new_state.models['app', 'othermodel'].fields['fo'].to_fields, ('renamed',))\n \n     def test_alter_unique_together(self):\n         \"\"\"\ndiff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -121,10 +121,10 @@ class Meta:\n \n         self.assertEqual(author_state.app_label, \"migrations\")\n         self.assertEqual(author_state.name, \"Author\")\n-        self.assertEqual([x for x, y in author_state.fields], [\"id\", \"name\", \"bio\", \"age\"])\n-        self.assertEqual(author_state.fields[1][1].max_length, 255)\n-        self.assertIs(author_state.fields[2][1].null, False)\n-        self.assertIs(author_state.fields[3][1].null, True)\n+        self.assertEqual(list(author_state.fields), [\"id\", \"name\", \"bio\", \"age\"])\n+        self.assertEqual(author_state.fields['name'].max_length, 255)\n+        self.assertIs(author_state.fields['bio'].null, False)\n+        self.assertIs(author_state.fields['age'].null, True)\n         self.assertEqual(\n             author_state.options,\n             {\n@@ -138,10 +138,10 @@ class Meta:\n \n         self.assertEqual(book_state.app_label, \"migrations\")\n         self.assertEqual(book_state.name, \"Book\")\n-        self.assertEqual([x for x, y in book_state.fields], [\"id\", \"title\", \"author\", \"contributors\"])\n-        self.assertEqual(book_state.fields[1][1].max_length, 1000)\n-        self.assertIs(book_state.fields[2][1].null, False)\n-        self.assertEqual(book_state.fields[3][1].__class__.__name__, \"ManyToManyField\")\n+        self.assertEqual(list(book_state.fields), [\"id\", \"title\", \"author\", \"contributors\"])\n+        self.assertEqual(book_state.fields['title'].max_length, 1000)\n+        self.assertIs(book_state.fields['author'].null, False)\n+        self.assertEqual(book_state.fields['contributors'].__class__.__name__, 'ManyToManyField')\n         self.assertEqual(\n             book_state.options,\n             {\"verbose_name\": \"tome\", \"db_table\": \"test_tome\", \"indexes\": [book_index], \"constraints\": []},\n@@ -150,7 +150,7 @@ class Meta:\n \n         self.assertEqual(author_proxy_state.app_label, \"migrations\")\n         self.assertEqual(author_proxy_state.name, \"AuthorProxy\")\n-        self.assertEqual(author_proxy_state.fields, [])\n+        self.assertEqual(author_proxy_state.fields, {})\n         self.assertEqual(\n             author_proxy_state.options,\n             {\"proxy\": True, \"ordering\": [\"name\"], \"indexes\": [], \"constraints\": []},\n@@ -923,7 +923,7 @@ class Meta:\n         project_state.add_model(ModelState.from_model(Author))\n         project_state.add_model(ModelState.from_model(Book))\n         self.assertEqual(\n-            [name for name, field in project_state.models[\"migrations\", \"book\"].fields],\n+            list(project_state.models['migrations', 'book'].fields),\n             [\"id\", \"author\"],\n         )\n \n@@ -1042,6 +1042,28 @@ def test_repr(self):\n         with self.assertRaisesMessage(InvalidBasesError, \"Cannot resolve bases for [<ModelState: 'app.Model'>]\"):\n             project_state.apps\n \n+    def test_fields_ordering_equality(self):\n+        state = ModelState(\n+            'migrations',\n+            'Tag',\n+            [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=100)),\n+                ('hidden', models.BooleanField()),\n+            ],\n+        )\n+        reordered_state = ModelState(\n+            'migrations',\n+            'Tag',\n+            [\n+                ('id', models.AutoField(primary_key=True)),\n+                # Purposedly re-ordered.\n+                ('hidden', models.BooleanField()),\n+                ('name', models.CharField(max_length=100)),\n+            ],\n+        )\n+        self.assertEqual(state, reordered_state)\n+\n     @override_settings(TEST_SWAPPABLE_MODEL='migrations.SomeFakeModel')\n     def test_create_swappable(self):\n         \"\"\"\n@@ -1062,10 +1084,10 @@ class Meta:\n         author_state = ModelState.from_model(Author)\n         self.assertEqual(author_state.app_label, 'migrations')\n         self.assertEqual(author_state.name, 'Author')\n-        self.assertEqual([x for x, y in author_state.fields], ['id', 'name', 'bio', 'age'])\n-        self.assertEqual(author_state.fields[1][1].max_length, 255)\n-        self.assertIs(author_state.fields[2][1].null, False)\n-        self.assertIs(author_state.fields[3][1].null, True)\n+        self.assertEqual(list(author_state.fields), ['id', 'name', 'bio', 'age'])\n+        self.assertEqual(author_state.fields['name'].max_length, 255)\n+        self.assertIs(author_state.fields['bio'].null, False)\n+        self.assertIs(author_state.fields['age'].null, True)\n         self.assertEqual(author_state.options, {'swappable': 'TEST_SWAPPABLE_MODEL', 'indexes': [], \"constraints\": []})\n         self.assertEqual(author_state.bases, (models.Model,))\n         self.assertEqual(author_state.managers, [])\n@@ -1104,11 +1126,11 @@ class Meta(Station.Meta):\n         self.assertEqual(station_state.app_label, 'migrations')\n         self.assertEqual(station_state.name, 'BusStation')\n         self.assertEqual(\n-            [x for x, y in station_state.fields],\n+            list(station_state.fields),\n             ['searchablelocation_ptr', 'name', 'bus_routes', 'inbound']\n         )\n-        self.assertEqual(station_state.fields[1][1].max_length, 128)\n-        self.assertIs(station_state.fields[2][1].null, False)\n+        self.assertEqual(station_state.fields['name'].max_length, 128)\n+        self.assertIs(station_state.fields['bus_routes'].null, False)\n         self.assertEqual(\n             station_state.options,\n             {'abstract': False, 'swappable': 'TEST_SWAPPABLE_MODEL', 'indexes': [], 'constraints': []}\n",
  "problem_statement": "Store ModeState.fields into a dict.\nDescription\n\t\nModeState initially stored its fields into a List[Tuple[str, models.Field]] because \u200bit wanted to preserve ordering.\nHowever the auto-detector doesn't consider field re-ordering as a state change and Django doesn't support table column reordering in the first place. The only reason I'm aware of for keeping field ordering is to generate model forms out of them which is unlikely to happen during migrations and if it was the case the only the order in which field are ordered and validated would change if Meta.fields = '__all__ is used \u200bwhich is discouraged.\nGiven storing fields this way results in awkward and inefficient lookup by name for no apparent benefits and that dict now preserves insertion ordering I suggest we switch ModelState.fields to Dict[str, models.Field]. I suggest we do the same for ModelState.indexes and .constraints since they suggest from the same awkwardness which was likely cargo culted from ModelState.fields design decision.\n",
  "hints_text": "\u200bPR",
  "created_at": "2020-04-22T03:21:43Z",
  "version": "3.1",
  "FAIL_TO_PASS": "[\"test_add_field (migrations.test_operations.OperationTests)\", \"test_add_field_preserve_default (migrations.test_operations.OperationTests)\", \"test_alter_field (migrations.test_operations.OperationTests)\", \"test_alter_field_pk (migrations.test_operations.OperationTests)\", \"test_alter_field_pk_fk (migrations.test_operations.OperationTests)\", \"test_create (migrations.test_state.StateTests)\", \"test_create_swappable (migrations.test_state.ModelStateTests)\", \"test_create_swappable_from_abstract (migrations.test_state.ModelStateTests)\", \"test_fields_ordering_equality (migrations.test_state.ModelStateTests)\", \"test_ignore_order_wrt (migrations.test_state.StateTests)\", \"test_load (migrations.test_loader.LoaderTests)\", \"test_load_unmigrated_dependency (migrations.test_loader.LoaderTests)\", \"test_rename_field (migrations.test_operations.OperationTests)\", \"test_rename_model (migrations.test_operations.OperationTests)\", \"test_rename_model_with_self_referential_fk (migrations.test_operations.OperationTests)\", \"test_rename_model_with_superclass_fk (migrations.test_operations.OperationTests)\", \"test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests)\", \"test_unrelated_applied_migrations_mutate_state (migrations.test_executor.ExecutorTests)\"]",
  "PASS_TO_PASS": "[\"A field may be migrated from AutoField to BigAutoField.\", \"A field may be migrated from SmallAutoField to AutoField.\", \"A field may be migrated from SmallAutoField to BigAutoField.\", \"Files prefixed with underscore, tilde, or dot aren't loaded.\", \"Migration directories without an __init__.py file are loaded.\", \"Migrations are applied and recorded atomically.\", \"RenameModel renames a many-to-many column after a RenameField.\", \"Tests loading a complex but erroneous set of squashed migrations\", \"Tests loading a complex set of squashed migrations\", \"Tests loading a squashed migration\", \"Tests loading a squashed migration with a new migration referencing it\", \"Tests prefix name matching\", \"test_abstract_base (migrations.test_state.RelatedModelsTests)\", \"test_abstract_model_children_inherit_indexes (migrations.test_state.ModelStateTests)\", \"test_add_binaryfield (migrations.test_operations.OperationTests)\", \"test_add_charfield (migrations.test_operations.OperationTests)\", \"test_add_constraint (migrations.test_operations.OperationTests)\", \"test_add_constraint_combinable (migrations.test_operations.OperationTests)\", \"test_add_constraint_percent_escaping (migrations.test_operations.OperationTests)\", \"test_add_field_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_add_field_m2m (migrations.test_operations.OperationTests)\", \"test_add_index (migrations.test_operations.OperationTests)\", \"test_add_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_add_or_constraint (migrations.test_operations.OperationTests)\", \"test_add_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_relations (migrations.test_state.StateTests)\", \"test_add_textfield (migrations.test_operations.OperationTests)\", \"test_alter_field_m2m (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_changes (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests)\", \"test_alter_field_with_index (migrations.test_operations.OperationTests)\", \"test_alter_fk (migrations.test_operations.OperationTests)\", \"test_alter_fk_non_fk (migrations.test_operations.OperationTests)\", \"test_alter_id_type_with_fk (migrations.test_executor.ExecutorTests)\", \"test_alter_index_together (migrations.test_operations.OperationTests)\", \"test_alter_index_together_remove (migrations.test_operations.OperationTests)\", \"test_alter_model_managers (migrations.test_operations.OperationTests)\", \"test_alter_model_managers_emptying (migrations.test_operations.OperationTests)\", \"test_alter_model_options (migrations.test_operations.OperationTests)\", \"test_alter_model_options_emptying (migrations.test_operations.OperationTests)\", \"test_alter_model_table (migrations.test_operations.OperationTests)\", \"test_alter_model_table_m2m (migrations.test_operations.OperationTests)\", \"test_alter_model_table_none (migrations.test_operations.OperationTests)\", \"test_alter_model_table_noop (migrations.test_operations.OperationTests)\", \"test_alter_order_with_respect_to (migrations.test_operations.OperationTests)\", \"test_alter_unique_together (migrations.test_operations.OperationTests)\", \"test_alter_unique_together_remove (migrations.test_operations.OperationTests)\", \"test_apply (migrations.test_loader.RecorderTests)\", \"test_apply_all_replaced_marks_replacement_as_applied (migrations.test_executor.ExecutorTests)\", \"test_apps_bulk_update (migrations.test_state.StateTests)\", \"test_atomic_operation_in_non_atomic_migration (migrations.test_executor.ExecutorTests)\", \"test_backwards_nothing_to_do (migrations.test_executor.ExecutorUnitTests)\", \"test_base (migrations.test_state.RelatedModelsTests)\", \"test_base_to_base_fk (migrations.test_state.RelatedModelsTests)\", \"test_base_to_subclass_fk (migrations.test_state.RelatedModelsTests)\", \"test_bound_field_sanity_check (migrations.test_state.ModelStateTests)\", \"test_check_consistent_history (migrations.test_loader.LoaderTests)\", \"test_check_consistent_history_squashed (migrations.test_loader.LoaderTests)\", \"test_choices_iterator (migrations.test_state.StateTests)\", \"test_circle (migrations.test_state.RelatedModelsTests)\", \"test_column_name_quoting (migrations.test_operations.OperationTests)\", \"test_create_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_create_model (migrations.test_operations.OperationTests)\", \"test_create_model_inheritance (migrations.test_operations.OperationTests)\", \"test_create_model_m2m (migrations.test_operations.OperationTests)\", \"test_create_model_managers (migrations.test_operations.OperationTests)\", \"test_create_model_with_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_base (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_unique_after (migrations.test_operations.OperationTests)\", \"test_create_proxy_model (migrations.test_operations.OperationTests)\", \"test_create_unmanaged_model (migrations.test_operations.OperationTests)\", \"test_custom_base_manager (migrations.test_state.StateTests)\", \"test_custom_default_manager (migrations.test_state.StateTests)\", \"test_custom_default_manager_added_to_the_model_state (migrations.test_state.StateTests)\", \"test_custom_default_manager_named_objects_with_false_migration_flag (migrations.test_state.StateTests)\", \"test_custom_manager_swappable (migrations.test_state.ModelStateTests)\", \"test_custom_model_base (migrations.test_state.ModelStateTests)\", \"test_custom_user (migrations.test_executor.ExecutorTests)\", \"test_dangling_references_throw_error (migrations.test_state.StateTests)\", \"test_delete_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_delete_model (migrations.test_operations.OperationTests)\", \"test_delete_mti_model (migrations.test_operations.OperationTests)\", \"test_delete_proxy_model (migrations.test_operations.OperationTests)\", \"test_detect_soft_applied_add_field_manytomanyfield (migrations.test_executor.ExecutorTests)\", \"test_direct_fk (migrations.test_state.RelatedModelsTests)\", \"test_direct_hidden_fk (migrations.test_state.RelatedModelsTests)\", \"test_direct_m2m (migrations.test_state.RelatedModelsTests)\", \"test_direct_m2m_self (migrations.test_state.RelatedModelsTests)\", \"test_empty_plan (migrations.test_executor.ExecutorTests)\", \"test_equality (migrations.test_state.StateTests)\", \"test_explicit_index_name (migrations.test_state.ModelStateTests)\", \"test_explicit_missing_module (migrations.test_loader.LoaderTests)\", \"test_fields_immutability (migrations.test_state.ModelStateTests)\", \"test_first (migrations.test_loader.LoaderTests)\", \"test_fk_through_proxy (migrations.test_state.RelatedModelsTests)\", \"test_from_model_constraints (migrations.test_state.ModelStateTests)\", \"test_generic_fk (migrations.test_state.RelatedModelsTests)\", \"test_indexes_ignore_swapped (migrations.test_operations.SwappableOperationTests)\", \"test_intermediate_m2m (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_base (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_extern_fk (migrations.test_state.RelatedModelsTests)\", \"test_intermediate_m2m_self (migrations.test_state.RelatedModelsTests)\", \"test_invalid (migrations.test_loader.PycLoaderTests)\", \"test_load_empty_dir (migrations.test_loader.LoaderTests)\", \"test_load_import_error (migrations.test_loader.LoaderTests)\", \"test_load_module_file (migrations.test_loader.LoaderTests)\", \"test_loading_squashed_complex_multi_apps (migrations.test_loader.LoaderTests)\", \"test_loading_squashed_complex_multi_apps_partially_applied (migrations.test_loader.LoaderTests)\", \"test_manager_refer_correct_model_version (migrations.test_state.StateTests)\", \"test_marked_as_migrated (migrations.test_loader.LoaderTests)\", \"test_marked_as_unmigrated (migrations.test_loader.LoaderTests)\", \"test_migrate_marks_replacement_applied_even_if_it_did_nothing (migrations.test_executor.ExecutorTests)\", \"test_minimize_rollbacks (migrations.test_executor.ExecutorUnitTests)\", \"test_minimize_rollbacks_branchy (migrations.test_executor.ExecutorUnitTests)\", \"test_mixed_plan_not_supported (migrations.test_executor.ExecutorTests)\", \"test_model_with_bigautofield (migrations.test_operations.OperationTests)\", \"test_multiple_bases (migrations.test_state.RelatedModelsTests)\", \"test_multiple_mixed_bases (migrations.test_state.RelatedModelsTests)\", \"test_multiple_nested_bases (migrations.test_state.RelatedModelsTests)\", \"test_nested_abstract_base (migrations.test_state.RelatedModelsTests)\", \"test_nested_base (migrations.test_state.RelatedModelsTests)\", \"test_nested_fk (migrations.test_state.RelatedModelsTests)\", \"test_nested_proxy_base (migrations.test_state.RelatedModelsTests)\", \"test_no_duplicate_managers (migrations.test_state.StateTests)\", \"test_non_atomic_migration (migrations.test_executor.ExecutorTests)\", \"test_order_with_respect_to_private_field (migrations.test_state.ModelStateTests)\", \"test_plan_handles_repeated_migrations (migrations.test_loader.LoaderTests)\", \"test_process_callback (migrations.test_executor.ExecutorTests)\", \"test_proxy_base (migrations.test_state.RelatedModelsTests)\", \"test_real_apps (migrations.test_state.StateTests)\", \"test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_name (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_through (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_model (migrations.test_operations.FieldOperationTests)\", \"test_references_model_mixin (migrations.test_operations.TestCreateModel)\", \"test_reload_model_relationship_consistency (migrations.test_state.StateTests)\", \"test_reload_related_model_on_non_relational_fields (migrations.test_state.StateTests)\", \"test_remove_constraint (migrations.test_operations.OperationTests)\", \"test_remove_field (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m_with_through (migrations.test_operations.OperationTests)\", \"test_remove_fk (migrations.test_operations.OperationTests)\", \"test_remove_index (migrations.test_operations.OperationTests)\", \"test_remove_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_remove_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_remove_relations (migrations.test_state.StateTests)\", \"test_rename_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)\", \"test_rename_m2m_target_model (migrations.test_operations.OperationTests)\", \"test_rename_m2m_through_model (migrations.test_operations.OperationTests)\", \"test_rename_missing_field (migrations.test_operations.OperationTests)\", \"test_rename_model_state_forwards (migrations.test_operations.OperationTests)\", \"test_rename_model_with_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests)\", \"test_render (migrations.test_state.StateTests)\", \"test_render_model_inheritance (migrations.test_state.StateTests)\", \"test_render_model_with_multiple_inheritance (migrations.test_state.StateTests)\", \"test_render_project_dependencies (migrations.test_state.StateTests)\", \"test_render_unique_app_labels (migrations.test_state.StateTests)\", \"test_repoint_field_m2m (migrations.test_operations.OperationTests)\", \"test_repr (migrations.test_state.ModelStateTests)\", \"test_run (migrations.test_executor.ExecutorTests)\", \"test_run_before (migrations.test_loader.LoaderTests)\", \"test_run_python (migrations.test_operations.OperationTests)\", \"test_run_python_atomic (migrations.test_operations.OperationTests)\", \"test_run_python_noop (migrations.test_operations.OperationTests)\", \"test_run_python_related_assignment (migrations.test_operations.OperationTests)\", \"test_run_sql (migrations.test_operations.OperationTests)\", \"test_run_sql_noop (migrations.test_operations.OperationTests)\", \"test_run_sql_params (migrations.test_operations.OperationTests)\", \"test_run_sql_params_invalid (migrations.test_operations.OperationTests)\", \"test_run_with_squashed (migrations.test_executor.ExecutorTests)\", \"test_sanity_check_through (migrations.test_state.ModelStateTests)\", \"test_sanity_check_to (migrations.test_state.ModelStateTests)\", \"test_sanity_index_name (migrations.test_state.ModelStateTests)\", \"test_self_relation (migrations.test_state.StateTests)\", \"test_separate_database_and_state (migrations.test_operations.OperationTests)\", \"test_separate_database_and_state2 (migrations.test_operations.OperationTests)\", \"test_soft_apply (migrations.test_executor.ExecutorTests)\", \"test_two_sided (migrations.test_state.RelatedModelsTests)\", \"test_unrelated (migrations.test_state.RelatedModelsTests)\", \"test_unrelated_model_lookups_backwards (migrations.test_executor.ExecutorTests)\", \"test_unrelated_model_lookups_forwards (migrations.test_executor.ExecutorTests)\", \"test_valid (migrations.test_loader.PycLoaderTests)\"]",
  "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab",
  "patch_files": [
    "django/db/migrations/autodetector.py",
    "django/db/migrations/operations/fields.py",
    "django/db/migrations/operations/models.py",
    "django/db/migrations/operations/utils.py",
    "django/db/migrations/state.py"
  ],
  "test_patch_files": [
    "tests/migrations/test_executor.py",
    "tests/migrations/test_loader.py",
    "tests/migrations/test_operations.py",
    "tests/migrations/test_state.py"
  ],
  "patch_diff_details": {
    "django/db/migrations/autodetector.py": {
      "diffs": [
        {
          "start_line_old": 96,
          "end_line_old": 96,
          "file_pos": 4,
          "file_context_length": 44310,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector.create_altered_constraints_MigrationAutodetector.create_altered_constraints.2.8",
          "closest_snippet_line_distance": 934
        },
        {
          "start_line_old": 211,
          "end_line_old": 221,
          "file_pos": 4,
          "file_context_length": 44310,
          "pos": 9,
          "context_length": 3249
        },
        {
          "start_line_old": 229,
          "end_line_old": 229,
          "file_pos": 4,
          "file_context_length": 44310,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector.create_altered_constraints_MigrationAutodetector.create_altered_constraints.2.8",
          "closest_snippet_line_distance": 801
        },
        {
          "start_line_old": 579,
          "end_line_old": 579,
          "file_pos": 4,
          "file_context_length": 44310,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector.create_altered_constraints_MigrationAutodetector.create_altered_constraints.2.8",
          "closest_snippet_line_distance": 451
        },
        {
          "start_line_old": 823,
          "end_line_old": 823,
          "file_pos": 4,
          "file_context_length": 44310,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector.generate_altered_fields_MigrationAutodetector.generate_altered_fields.2.old_model_name.12.3.3.2",
          "closest_snippet_line_distance": 84,
          "pos": 82,
          "context_length": 28603
        }
      ]
    },
    "django/db/migrations/operations/fields.py": {
      "diffs": [
        {
          "start_line_old": 92,
          "end_line_old": 92,
          "file_pos": 9,
          "file_context_length": 79884,
          "pos": 17,
          "context_length": 6219
        },
        {
          "start_line_old": 157,
          "end_line_old": 164,
          "file_pos": 9,
          "file_context_length": 79884,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/operations/fields.py_AlterField.database_backwards_AlterField.reduce.2.1",
          "closest_snippet_line_distance": 92
        },
        {
          "start_line_old": 220,
          "end_line_old": 224,
          "file_pos": 9,
          "file_context_length": 79884,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/operations/fields.py_RenameField.state_forwards_RenameField.state_forwards.14",
          "closest_snippet_line_distance": 78,
          "pos": 26,
          "context_length": 10152
        },
        {
          "start_line_old": 302,
          "end_line_old": 306,
          "file_pos": 9,
          "file_context_length": 79884,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/operations/fields.py_AddField.state_forwards_AddField.state_forwards.2.7",
          "closest_snippet_line_distance": 211,
          "pos": 24,
          "context_length": 9602
        },
        {
          "start_line_old": 314,
          "end_line_old": 317,
          "file_pos": 9,
          "file_context_length": 79884,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/operations/fields.py_AddField.state_forwards_AddField.state_forwards.2.7",
          "closest_snippet_line_distance": 222,
          "pos": 24,
          "context_length": 9602
        }
      ]
    },
    "django/db/migrations/operations/models.py": {
      "diffs": [
        {
          "start_line_old": 313,
          "end_line_old": 313,
          "file_pos": 24,
          "file_context_length": 152291,
          "pos": 76,
          "context_length": 26426
        },
        {
          "start_line_old": 323,
          "end_line_old": 323,
          "file_pos": 24,
          "file_context_length": 152291,
          "pos": 76,
          "context_length": 26426
        }
      ]
    },
    "django/db/migrations/operations/utils.py": {
      "diffs": [
        {
          "start_line_old": 86,
          "end_line_old": 96,
          "file_pos": 30,
          "file_context_length": 188754,
          "pos": 121,
          "context_length": 39341
        }
      ]
    },
    "django/db/migrations/state.py": {
      "diffs": [
        {
          "start_line_old": 128,
          "end_line_old": 128,
          "file_pos": 2,
          "file_context_length": 20851,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/state.py_copy__get_app_label_and_model_name.1.3.1.1",
          "closest_snippet_line_distance": 105
        },
        {
          "start_line_old": 362,
          "end_line_old": 371,
          "file_pos": 2,
          "file_context_length": 20851,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/state.py_ModelState.get_field_by_name_ModelState.__repr__.1.1",
          "closest_snippet_line_distance": 217,
          "pos": 3,
          "context_length": 787
        },
        {
          "start_line_old": 547,
          "end_line_old": 547,
          "file_pos": 2,
          "file_context_length": 20851,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/state.py_ModelState.__eq___",
          "closest_snippet_line_distance": 53,
          "pos": 14,
          "context_length": 5664
        },
        {
          "start_line_old": 569,
          "end_line_old": 570,
          "file_pos": 2,
          "file_context_length": 20851,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/state.py_ModelState.construct_managers_ModelState.clone.2.1",
          "closest_snippet_line_distance": 16,
          "pos": 51,
          "context_length": 17562
        },
        {
          "start_line_old": 579,
          "end_line_old": 584,
          "file_pos": 2,
          "file_context_length": 20851,
          "pos": 2,
          "context_length": 316
        },
        {
          "start_line_old": 605,
          "end_line_old": 606,
          "file_pos": 2,
          "file_context_length": 20851,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/state.py_ModelState.from_model.26_ModelState.from_model.30.1",
          "closest_snippet_line_distance": 79,
          "pos": 6,
          "context_length": 1982
        }
      ]
    }
  },
  "vectors": 3446,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/django/django/db/models/base.py_ModelStateFieldsCacheDescriptor_ModelState.fields_cache.1",
      "distance": 0.7809755802154541,
      "file_path": "django/db/models/base.py",
      "start_line": 385,
      "end_line": 401,
      "tokens": 128,
      "context_length": 128
    },
    {
      "position": 2,
      "id": "/tmp/repos/django/django/db/migrations/state.py_ModelState.get_field_by_name_ModelState.__repr__.1.1",
      "distance": 0.7917453050613403,
      "file_path": "django/db/migrations/state.py",
      "start_line": 579,
      "end_line": 598,
      "tokens": 188,
      "context_length": 316,
      "file_pos": 2
    },
    {
      "position": 3,
      "id": "/tmp/repos/django/django/db/migrations/state.py_ModelState_ModelState.name_lower.1.1",
      "distance": 0.823001503944397,
      "file_path": "django/db/migrations/state.py",
      "start_line": 348,
      "end_line": 398,
      "tokens": 471,
      "context_length": 787,
      "file_pos": 2
    },
    {
      "position": 4,
      "id": "/tmp/repos/django/django/db/migrations/state.py_ModelState.from_model_ModelState.from_model.default_manager_shim.1",
      "distance": 0.8557793498039246,
      "file_path": "django/db/migrations/state.py",
      "start_line": 400,
      "end_line": 494,
      "tokens": 809,
      "context_length": 1596,
      "file_pos": 2
    },
    {
      "position": 5,
      "id": "/tmp/repos/django/django/db/migrations/state.py_ModelState.from_model.26_ModelState.from_model.30.1",
      "distance": 0.8608342409133911,
      "file_path": "django/db/migrations/state.py",
      "start_line": 495,
      "end_line": 527,
      "tokens": 250,
      "context_length": 1846,
      "file_pos": 2
    },
    {
      "position": 6,
      "id": "/tmp/repos/django/django/db/migrations/state.py_ModelState.__eq___",
      "distance": 0.9176239371299744,
      "file_path": "django/db/migrations/state.py",
      "start_line": 600,
      "end_line": 611,
      "tokens": 136,
      "context_length": 1982,
      "file_pos": 2
    },
    {
      "position": 7,
      "id": "/tmp/repos/django/django/forms/models.py_fields_for_model_fields_for_model.10.1",
      "distance": 0.9376267194747925,
      "file_path": "django/forms/models.py",
      "start_line": 106,
      "end_line": 192,
      "tokens": 747,
      "context_length": 2729
    },
    {
      "position": 8,
      "id": "/tmp/repos/django/django/forms/models.py_16_apply_limit_choices_to_to_formfield.2.2.formfield.queryset.1",
      "distance": 0.9394515752792358,
      "file_path": "django/forms/models.py",
      "start_line": 71,
      "end_line": 103,
      "tokens": 281,
      "context_length": 3010
    },
    {
      "position": 9,
      "id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector._prepare_field_lists_MigrationAutodetector._prepare_field_lists.self.new_field_keys.1",
      "distance": 0.997566819190979,
      "file_path": "django/db/migrations/autodetector.py",
      "start_line": 200,
      "end_line": 222,
      "tokens": 239,
      "context_length": 3249,
      "file_pos": 4
    },
    {
      "position": 10,
      "id": "/tmp/repos/django/django/forms/forms.py_BaseForm.order_fields_BaseForm.order_fields.self.fields.1",
      "distance": 1.0084624290466309,
      "file_path": "django/forms/forms.py",
      "start_line": 111,
      "end_line": 131,
      "tokens": 177,
      "context_length": 3426
    },
    {
      "position": 11,
      "id": "/tmp/repos/django/django/db/models/base.py_Model_Model.__init__.cls.19",
      "distance": 1.0140330791473389,
      "file_path": "django/db/models/base.py",
      "start_line": 404,
      "end_line": 503,
      "tokens": 856,
      "context_length": 4282
    },
    {
      "position": 12,
      "id": "/tmp/repos/django/django/db/models/fields/files.py_datetime_FieldFile.__setstate__.self.storage.1",
      "distance": 1.0383305549621582,
      "file_path": "django/db/models/fields/files.py",
      "start_line": 1,
      "end_line": 140,
      "tokens": 930,
      "context_length": 5212
    },
    {
      "position": 13,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_Field.__reduce___Field.__reduce__.3.1",
      "distance": 1.0395196676254272,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 548,
      "end_line": 566,
      "tokens": 224,
      "context_length": 5436
    },
    {
      "position": 14,
      "id": "/tmp/repos/django/django/db/migrations/state.py_ModelState.construct_managers_ModelState.clone.2.1",
      "distance": 1.0409917831420898,
      "file_path": "django/db/migrations/state.py",
      "start_line": 529,
      "end_line": 554,
      "tokens": 228,
      "context_length": 5664,
      "file_pos": 7
    },
    {
      "position": 15,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_Field._check_deprecation_details_Field._check_deprecation_details.2.1",
      "distance": 1.055474877357483,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 367,
      "end_line": 393,
      "tokens": 199,
      "context_length": 5863
    },
    {
      "position": 16,
      "id": "/tmp/repos/django/django/db/models/options.py_Options._forward_fields_map_Options.fields_map.4.1",
      "distance": 1.0635812282562256,
      "file_path": "django/db/models/options.py",
      "start_line": 524,
      "end_line": 552,
      "tokens": 231,
      "context_length": 6094
    },
    {
      "position": 17,
      "id": "/tmp/repos/django/django/db/migrations/operations/fields.py_AddField.state_forwards_AddField.state_forwards.2.7",
      "distance": 1.0639647245407104,
      "file_path": "django/db/migrations/operations/fields.py",
      "start_line": 85,
      "end_line": 95,
      "tokens": 125,
      "context_length": 6219,
      "file_pos": 9
    },
    {
      "position": 18,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_collections.abc_return_None.1.1",
      "distance": 1.065481185913086,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 1,
      "end_line": 81,
      "tokens": 633,
      "context_length": 6852
    },
    {
      "position": 19,
      "id": "/tmp/repos/django/django/forms/models.py_BaseInlineFormSet.add_fields_BaseInlineFormSet.get_unique_error_message.2.1",
      "distance": 1.0709502696990967,
      "file_path": "django/forms/models.py",
      "start_line": 953,
      "end_line": 986,
      "tokens": 367,
      "context_length": 7219
    },
    {
      "position": 20,
      "id": "/tmp/repos/django/django/db/migrations/operations/__init__.py_RenameField_",
      "distance": 1.0729117393493652,
      "file_path": "django/db/migrations/operations/__init__.py",
      "start_line": 1,
      "end_line": 18,
      "tokens": 195,
      "context_length": 7414
    },
    {
      "position": 21,
      "id": "/tmp/repos/django/django/forms/models.py_ModelFormMetaclass_ModelFormMetaclass.__new__.13.1",
      "distance": 1.074470043182373,
      "file_path": "django/forms/models.py",
      "start_line": 208,
      "end_line": 277,
      "tokens": 616,
      "context_length": 8030
    },
    {
      "position": 22,
      "id": "/tmp/repos/django/django/db/models/base.py_Model.from_db_Model.__getstate__.2.1",
      "distance": 1.0761537551879883,
      "file_path": "django/db/models/base.py",
      "start_line": 505,
      "end_line": 547,
      "tokens": 347,
      "context_length": 8377
    },
    {
      "position": 23,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_Field.deconstruct_Field.deconstruct.12.1",
      "distance": 1.0762877464294434,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 417,
      "end_line": 504,
      "tokens": 795,
      "context_length": 9172
    },
    {
      "position": 24,
      "id": "/tmp/repos/django/django/db/migrations/operations/fields.py_RenameField.state_forwards_RenameField.state_forwards.14",
      "distance": 1.0778900384902954,
      "file_path": "django/db/migrations/operations/fields.py",
      "start_line": 298,
      "end_line": 342,
      "tokens": 430,
      "context_length": 9602,
      "file_pos": 10
    },
    {
      "position": 25,
      "id": "/tmp/repos/django/django/contrib/postgres/forms/hstore.py_json_",
      "distance": 1.0783578157424927,
      "file_path": "django/contrib/postgres/forms/hstore.py",
      "start_line": 1,
      "end_line": 59,
      "tokens": 339,
      "context_length": 9941
    },
    {
      "position": 26,
      "id": "/tmp/repos/django/django/db/migrations/operations/fields.py_AlterField.state_forwards_AlterField.state_forwards.8",
      "distance": 1.0803122520446777,
      "file_path": "django/db/migrations/operations/fields.py",
      "start_line": 214,
      "end_line": 235,
      "tokens": 211,
      "context_length": 10152,
      "file_pos": 11
    },
    {
      "position": 27,
      "id": "/tmp/repos/django/django/db/models/fields/files.py_FileDescriptor.__get___FileDescriptor.__set__.1",
      "distance": 1.0815842151641846,
      "file_path": "django/db/models/fields/files.py",
      "start_line": 160,
      "end_line": 219,
      "tokens": 645,
      "context_length": 10797
    },
    {
      "position": 28,
      "id": "/tmp/repos/django/django/db/models/base.py_Model.clean_fields_Model.clean_fields.5.1",
      "distance": 1.0832852125167847,
      "file_path": "django/db/models/base.py",
      "start_line": 1229,
      "end_line": 1252,
      "tokens": 172,
      "context_length": 10969
    },
    {
      "position": 29,
      "id": "/tmp/repos/django/django/forms/forms.py_BaseForm.changed_data_BaseForm.changed_data.3.1",
      "distance": 1.085176944732666,
      "file_path": "django/forms/forms.py",
      "start_line": 429,
      "end_line": 451,
      "tokens": 195,
      "context_length": 11164
    },
    {
      "position": 30,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._check_local_fields_Model._check_local_fields.8.1",
      "distance": 1.0884562730789185,
      "file_path": "django/db/models/base.py",
      "start_line": 1638,
      "end_line": 1686,
      "tokens": 348,
      "context_length": 11512
    },
    {
      "position": 31,
      "id": "/tmp/repos/django/django/db/models/base.py_Model.__setstate___Model.__setstate__.5",
      "distance": 1.0955692529678345,
      "file_path": "django/db/models/base.py",
      "start_line": 549,
      "end_line": 565,
      "tokens": 142,
      "context_length": 11654
    },
    {
      "position": 32,
      "id": "/tmp/repos/django/django/db/models/__init__.py_1_",
      "distance": 1.101117491722107,
      "file_path": "django/db/models/__init__.py",
      "start_line": 1,
      "end_line": 52,
      "tokens": 605,
      "context_length": 12259
    },
    {
      "position": 33,
      "id": "/tmp/repos/django/django/forms/fields.py_FileField.to_python_FileField.to_python.7.1",
      "distance": 1.1036527156829834,
      "file_path": "django/forms/fields.py",
      "start_line": 558,
      "end_line": 577,
      "tokens": 171,
      "context_length": 12430
    },
    {
      "position": 34,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._check_ordering_Model._check_ordering.29.1",
      "distance": 1.106953501701355,
      "file_path": "django/db/models/base.py",
      "start_line": 1688,
      "end_line": 1786,
      "tokens": 717,
      "context_length": 13147
    },
    {
      "position": 35,
      "id": "/tmp/repos/django/django/forms/formsets.py_BaseFormSet.ordered_forms_BaseFormSet.ordered_forms.10.1",
      "distance": 1.1075420379638672,
      "file_path": "django/forms/formsets.py",
      "start_line": 228,
      "end_line": 264,
      "tokens": 420,
      "context_length": 13567
    },
    {
      "position": 36,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._get_pk_val_Model.get_deferred_fields.2.1",
      "distance": 1.1140697002410889,
      "file_path": "django/db/models/base.py",
      "start_line": 567,
      "end_line": 586,
      "tokens": 170,
      "context_length": 13737
    },
    {
      "position": 37,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_Field._check_db_index_Field._check_null_allowed_for_primary_keys.1.5.1.1",
      "distance": 1.1147689819335938,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 308,
      "end_line": 336,
      "tokens": 205,
      "context_length": 13942
    },
    {
      "position": 38,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_AutoFieldMixin_AutoFieldMixin.formfield.1.1",
      "distance": 1.1159803867340088,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 2342,
      "end_line": 2391,
      "tokens": 311,
      "context_length": 14253
    },
    {
      "position": 39,
      "id": "/tmp/repos/django/django/forms/models.py_BaseModelForm._get_validation_exclusions_BaseModelForm._get_validation_exclusions.6.1",
      "distance": 1.116568684577942,
      "file_path": "django/forms/models.py",
      "start_line": 310,
      "end_line": 349,
      "tokens": 387,
      "context_length": 14640
    },
    {
      "position": 40,
      "id": "/tmp/repos/django/django/db/migrations/serializer.py_ModelFieldSerializer_OperationSerializer.serialize.4.1",
      "distance": 1.1192569732666016,
      "file_path": "django/db/migrations/serializer.py",
      "start_line": 196,
      "end_line": 217,
      "tokens": 183,
      "context_length": 14823
    },
    {
      "position": 41,
      "id": "/tmp/repos/django/django/db/migrations/operations/fields.py_AlterField.database_forwards_AlterField.database_forwards.2.6.to_field.default.1",
      "distance": 1.1195682287216187,
      "file_path": "django/db/migrations/operations/fields.py",
      "start_line": 237,
      "end_line": 247,
      "tokens": 146,
      "context_length": 14969,
      "file_pos": 15
    },
    {
      "position": 42,
      "id": "/tmp/repos/django/django/forms/forms.py_DeclarativeFieldsMetaclass_DeclarativeFieldsMetaclass.__new__.current_fields.10.1",
      "distance": 1.1199153661727905,
      "file_path": "django/forms/forms.py",
      "start_line": 22,
      "end_line": 50,
      "tokens": 219,
      "context_length": 15188
    },
    {
      "position": 43,
      "id": "/tmp/repos/django/django/db/models/base.py_35_",
      "distance": 1.1202415227890015,
      "file_path": "django/db/models/base.py",
      "start_line": 1910,
      "end_line": 1961,
      "tokens": 351,
      "context_length": 15539
    },
    {
      "position": 44,
      "id": "/tmp/repos/django/django/forms/fields.py_FileField.clean_FileField.has_changed.1.1",
      "distance": 1.1215375661849976,
      "file_path": "django/forms/fields.py",
      "start_line": 579,
      "end_line": 604,
      "tokens": 243,
      "context_length": 15782
    },
    {
      "position": 45,
      "id": "/tmp/repos/django/django/db/models/fields/proxy.py_1_",
      "distance": 1.1227993965148926,
      "file_path": "django/db/models/fields/proxy.py",
      "start_line": 1,
      "end_line": 19,
      "tokens": 117,
      "context_length": 15899
    },
    {
      "position": 46,
      "id": "/tmp/repos/django/django/db/models/sql/query.py_Query.get_loaded_field_names_Query.get_loaded_field_names.4.2.4.1",
      "distance": 1.1242607831954956,
      "file_path": "django/db/models/sql/query.py",
      "start_line": 2078,
      "end_line": 2095,
      "tokens": 156,
      "context_length": 16055
    },
    {
      "position": 47,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_Field.get_filter_kwargs_for_object_Field._get_default.4",
      "distance": 1.1266565322875977,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 781,
      "end_line": 840,
      "tokens": 431,
      "context_length": 16486
    },
    {
      "position": 48,
      "id": "/tmp/repos/django/django/forms/models.py_BaseInlineFormSet._construct_form_BaseInlineFormSet.save_new.4",
      "distance": 1.1291518211364746,
      "file_path": "django/forms/models.py",
      "start_line": 919,
      "end_line": 951,
      "tokens": 353,
      "context_length": 16839
    },
    {
      "position": 49,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_Field._check_backend_specific_checks_Field._check_validators.3.1",
      "distance": 1.1316465139389038,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 338,
      "end_line": 365,
      "tokens": 203,
      "context_length": 17042
    },
    {
      "position": 50,
      "id": "/tmp/repos/django/django/db/migrations/operations/fields.py_RenameField.database_forwards_RenameField.references_field.1.1",
      "distance": 1.1330828666687012,
      "file_path": "django/db/migrations/operations/fields.py",
      "start_line": 344,
      "end_line": 371,
      "tokens": 291,
      "context_length": 17333,
      "file_pos": 17
    },
    {
      "position": 51,
      "id": "/tmp/repos/django/django/db/migrations/state.py_ModelState.render_ModelState.render.14.1",
      "distance": 1.1338545083999634,
      "file_path": "django/db/migrations/state.py",
      "start_line": 556,
      "end_line": 577,
      "tokens": 229,
      "context_length": 17562,
      "file_pos": 17
    },
    {
      "position": 52,
      "id": "/tmp/repos/django/django/db/models/options.py_Options.managers_Options.managers_map.1.1",
      "distance": 1.1342240571975708,
      "file_path": "django/db/models/options.py",
      "start_line": 357,
      "end_line": 379,
      "tokens": 164,
      "context_length": 17726
    },
    {
      "position": 53,
      "id": "/tmp/repos/django/django/db/models/options.py_Options.add_manager_Options.add_field.5.12.3.1",
      "distance": 1.1343389749526978,
      "file_path": "django/db/models/options.py",
      "start_line": 256,
      "end_line": 288,
      "tokens": 331,
      "context_length": 18057
    },
    {
      "position": 54,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_DatabaseSchemaEditor._field_should_be_indexed_DatabaseSchemaEditor._field_should_be_indexed.7.1",
      "distance": 1.1357380151748657,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 100,
      "end_line": 113,
      "tokens": 148,
      "context_length": 18205
    },
    {
      "position": 55,
      "id": "/tmp/repos/django/django/db/models/fields/files.py_FileField_FileField.attr_class.formfield.1.1",
      "distance": 1.1361850500106812,
      "file_path": "django/db/models/fields/files.py",
      "start_line": 222,
      "end_line": 341,
      "tokens": 931,
      "context_length": 19136
    },
    {
      "position": 56,
      "id": "/tmp/repos/django/django/db/models/fields/mixins.py_1_FieldCacheMixin.delete_cached_value.1",
      "distance": 1.1382949352264404,
      "file_path": "django/db/models/fields/mixins.py",
      "start_line": 1,
      "end_line": 28,
      "tokens": 168,
      "context_length": 19304
    },
    {
      "position": 57,
      "id": "/tmp/repos/django/django/db/models/options.py_Options._get_fields_Options._get_fields.25.1",
      "distance": 1.138763189315796,
      "file_path": "django/db/models/options.py",
      "start_line": 747,
      "end_line": 829,
      "tokens": 827,
      "context_length": 20131
    },
    {
      "position": 58,
      "id": "/tmp/repos/django/django/forms/models.py_BaseModelForm._post_clean_BaseModelForm._post_clean.14.1",
      "distance": 1.138838768005371,
      "file_path": "django/forms/models.py",
      "start_line": 383,
      "end_line": 411,
      "tokens": 240,
      "context_length": 20371
    },
    {
      "position": 59,
      "id": "/tmp/repos/django/django/forms/forms.py_BaseForm._clean_fields_BaseForm._clean_fields.1.4.3.4.1",
      "distance": 1.1391960382461548,
      "file_path": "django/forms/forms.py",
      "start_line": 378,
      "end_line": 398,
      "tokens": 210,
      "context_length": 20581
    },
    {
      "position": 60,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_field.21_BaseDatabaseSchemaEditor._alter_field.four_way_default_alteration.1",
      "distance": 1.1405225992202759,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 630,
      "end_line": 702,
      "tokens": 796,
      "context_length": 21377
    },
    {
      "position": 61,
      "id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector.generate_altered_order_with_respect_to_MigrationAutodetector.generate_altered_order_with_respect_to.1.4.dependencies.4",
      "distance": 1.1435741186141968,
      "file_path": "django/db/migrations/autodetector.py",
      "start_line": 1185,
      "end_line": 1210,
      "tokens": 245,
      "context_length": 21622,
      "file_pos": 20
    },
    {
      "position": 62,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_CommaSeparatedIntegerField_CommaSeparatedIntegerField.system_check_removed_details.1",
      "distance": 1.1441216468811035,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 1043,
      "end_line": 1056,
      "tokens": 104,
      "context_length": 21726
    },
    {
      "position": 63,
      "id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector._detect_changes_MigrationAutodetector._detect_changes.55.1",
      "distance": 1.1442523002624512,
      "file_path": "django/db/migrations/autodetector.py",
      "start_line": 103,
      "end_line": 198,
      "tokens": 769,
      "context_length": 22495,
      "file_pos": 20
    },
    {
      "position": 64,
      "id": "/tmp/repos/django/django/db/migrations/operations/fields.py_AddField.database_forwards_AddField.describe.1.1",
      "distance": 1.144519567489624,
      "file_path": "django/db/migrations/operations/fields.py",
      "start_line": 97,
      "end_line": 117,
      "tokens": 223,
      "context_length": 22718,
      "file_pos": 20
    },
    {
      "position": 65,
      "id": "/tmp/repos/django/django/forms/models.py_ModelMultipleChoiceField.prepare_value_",
      "distance": 1.14481782913208,
      "file_path": "django/forms/models.py",
      "start_line": 1370,
      "end_line": 1397,
      "tokens": 209,
      "context_length": 22927
    },
    {
      "position": 66,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_Field._check_choices_Field._check_choices.6.1",
      "distance": 1.1456832885742188,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 244,
      "end_line": 306,
      "tokens": 448,
      "context_length": 23375
    },
    {
      "position": 67,
      "id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector.generate_altered_fields_MigrationAutodetector.generate_altered_fields.2.old_model_name.12.3.3.2",
      "distance": 1.1467416286468506,
      "file_path": "django/db/migrations/autodetector.py",
      "start_line": 907,
      "end_line": 988,
      "tokens": 876,
      "context_length": 24251,
      "file_pos": 20
    },
    {
      "position": 68,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_SmallIntegerField_TextField.formfield.4.1",
      "distance": 1.1472644805908203,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 2037,
      "end_line": 2067,
      "tokens": 199,
      "context_length": 24450
    },
    {
      "position": 69,
      "id": "/tmp/repos/django/django/db/models/sql/query.py_Query.add_fields_Query.add_fields.4.5.1.4.2",
      "distance": 1.1480799913406372,
      "file_path": "django/db/models/sql/query.py",
      "start_line": 1847,
      "end_line": 1883,
      "tokens": 318,
      "context_length": 24768
    },
    {
      "position": 70,
      "id": "/tmp/repos/django/django/contrib/admin/checks.py_BaseModelAdminChecks._check_field_spec_BaseModelAdminChecks._check_field_spec.2.2.1.1",
      "distance": 1.148097038269043,
      "file_path": "django/contrib/admin/checks.py",
      "start_line": 313,
      "end_line": 324,
      "tokens": 138,
      "context_length": 24906
    },
    {
      "position": 71,
      "id": "/tmp/repos/django/django/contrib/postgres/fields/hstore.py_10_",
      "distance": 1.1482465267181396,
      "file_path": "django/contrib/postgres/fields/hstore.py",
      "start_line": 72,
      "end_line": 112,
      "tokens": 264,
      "context_length": 25170
    },
    {
      "position": 72,
      "id": "/tmp/repos/django/django/db/models/options.py_bisect_DEFAULT_NAMES.1",
      "distance": 1.1483392715454102,
      "file_path": "django/db/models/options.py",
      "start_line": 1,
      "end_line": 34,
      "tokens": 285,
      "context_length": 25455
    },
    {
      "position": 73,
      "id": "/tmp/repos/django/django/db/models/options.py_Options.get_fields_Options.get_fields.3.1",
      "distance": 1.1483722925186157,
      "file_path": "django/db/models/options.py",
      "start_line": 733,
      "end_line": 745,
      "tokens": 131,
      "context_length": 25586
    },
    {
      "position": 74,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._get_next_or_previous_by_FIELD_Model._get_next_or_previous_by_FIELD.8.2.1",
      "distance": 1.1485300064086914,
      "file_path": "django/db/models/base.py",
      "start_line": 953,
      "end_line": 967,
      "tokens": 212,
      "context_length": 25798
    },
    {
      "position": 75,
      "id": "/tmp/repos/django/django/contrib/admin/views/main.py_ChangeList.get_ordering_field_columns_ChangeList.get_ordering_field_columns.7.1",
      "distance": 1.1503981351852417,
      "file_path": "django/contrib/admin/views/main.py",
      "start_line": 394,
      "end_line": 432,
      "tokens": 334,
      "context_length": 26132
    },
    {
      "position": 76,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_RenameModel.state_forwards_RenameModel.state_forwards.renamed_model.13",
      "distance": 1.1523412466049194,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 304,
      "end_line": 329,
      "tokens": 294,
      "context_length": 26426,
      "file_pos": 24
    },
    {
      "position": 77,
      "id": "/tmp/repos/django/django/forms/fields.py_TypedChoiceField_TypedChoiceField.clean.2.1",
      "distance": 1.1526923179626465,
      "file_path": "django/forms/fields.py",
      "start_line": 832,
      "end_line": 856,
      "tokens": 177,
      "context_length": 26603
    },
    {
      "position": 78,
      "id": "/tmp/repos/django/django/forms/fields.py_Field_Field.validate.1.1",
      "distance": 1.1528784036636353,
      "file_path": "django/forms/fields.py",
      "start_line": 45,
      "end_line": 126,
      "tokens": 773,
      "context_length": 27376
    },
    {
      "position": 79,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._unique_sql_BaseDatabaseSchemaEditor._unique_sql.3.1",
      "distance": 1.1529147624969482,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1068,
      "end_line": 1082,
      "tokens": 126,
      "context_length": 27502
    },
    {
      "position": 80,
      "id": "/tmp/repos/django/django/forms/formsets.py_1_DEFAULT_MAX_NUM.1",
      "distance": 1.153738021850586,
      "file_path": "django/forms/formsets.py",
      "start_line": 1,
      "end_line": 25,
      "tokens": 203,
      "context_length": 27705
    },
    {
      "position": 81,
      "id": "/tmp/repos/django/django/db/models/options.py_Options.fields_Options.fields.12.1",
      "distance": 1.1546275615692139,
      "file_path": "django/db/models/options.py",
      "start_line": 433,
      "end_line": 465,
      "tokens": 328,
      "context_length": 28033
    },
    {
      "position": 82,
      "id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector.generate_deleted_proxies_MigrationAutodetector.generate_renamed_fields.3.6.1.6.1.5",
      "distance": 1.1563290357589722,
      "file_path": "django/db/migrations/autodetector.py",
      "start_line": 799,
      "end_line": 848,
      "tokens": 570,
      "context_length": 28603,
      "file_pos": 24
    },
    {
      "position": 83,
      "id": "/tmp/repos/django/django/forms/forms.py_BaseForm.__str___BaseForm.__iter__.1.1",
      "distance": 1.1569336652755737,
      "file_path": "django/forms/forms.py",
      "start_line": 133,
      "end_line": 150,
      "tokens": 142,
      "context_length": 28745
    },
    {
      "position": 84,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_AlterOrderWithRespectTo.database_forwards_AlterOrderWithRespectTo.database_forwards.2.3.4.3",
      "distance": 1.1571239233016968,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 577,
      "end_line": 593,
      "tokens": 215,
      "context_length": 28960,
      "file_pos": 24
    },
    {
      "position": 85,
      "id": "/tmp/repos/django/django/db/migrations/state.py_copy__get_app_label_and_model_name.1.3.1.1",
      "distance": 1.1578818559646606,
      "file_path": "django/db/migrations/state.py",
      "start_line": 1,
      "end_line": 23,
      "tokens": 180,
      "context_length": 29140,
      "file_pos": 24
    },
    {
      "position": 86,
      "id": "/tmp/repos/django/django/forms/models.py_BaseModelFormSet.get_queryset_BaseModelFormSet.get_queryset.2.1",
      "distance": 1.1585415601730347,
      "file_path": "django/forms/models.py",
      "start_line": 629,
      "end_line": 646,
      "tokens": 167,
      "context_length": 29307
    },
    {
      "position": 87,
      "id": "/tmp/repos/django/django/forms/fields.py_TypedMultipleChoiceField_TypedMultipleChoiceField.validate.1.2.1",
      "distance": 1.1591429710388184,
      "file_path": "django/forms/fields.py",
      "start_line": 901,
      "end_line": 934,
      "tokens": 235,
      "context_length": 29542
    },
    {
      "position": 88,
      "id": "/tmp/repos/django/django/forms/fields.py_1___all__.1",
      "distance": 1.160504937171936,
      "file_path": "django/forms/fields.py",
      "start_line": 1,
      "end_line": 42,
      "tokens": 350,
      "context_length": 29892
    },
    {
      "position": 89,
      "id": "/tmp/repos/django/django/db/models/constraints.py_UniqueConstraint_",
      "distance": 1.160644769668579,
      "file_path": "django/db/models/constraints.py",
      "start_line": 72,
      "end_line": 126,
      "tokens": 496,
      "context_length": 30388
    },
    {
      "position": 90,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py__all_related_fields__related_non_m2m_objects.3.1",
      "distance": 1.161059856414795,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 31,
      "end_line": 41,
      "tokens": 120,
      "context_length": 30508
    },
    {
      "position": 91,
      "id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector.create_altered_constraints_MigrationAutodetector.create_altered_constraints.2.8",
      "distance": 1.1610722541809082,
      "file_path": "django/db/migrations/autodetector.py",
      "start_line": 1030,
      "end_line": 1046,
      "tokens": 188,
      "context_length": 30696,
      "file_pos": 25
    },
    {
      "position": 92,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._delete_composed_index_BaseDatabaseSchemaEditor._delete_composed_index.6",
      "distance": 1.1613107919692993,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 402,
      "end_line": 416,
      "tokens": 174,
      "context_length": 30870
    },
    {
      "position": 93,
      "id": "/tmp/repos/django/django/forms/models.py_ModelChoiceField.choices_ModelChoiceField.has_changed.4.1",
      "distance": 1.1614136695861816,
      "file_path": "django/forms/models.py",
      "start_line": 1257,
      "end_line": 1287,
      "tokens": 242,
      "context_length": 31112
    },
    {
      "position": 94,
      "id": "/tmp/repos/django/django/db/models/fields/related.py_functools_RECURSIVE_RELATIONSHIP_CONSTANT.1",
      "distance": 1.1617733240127563,
      "file_path": "django/db/models/fields/related.py",
      "start_line": 1,
      "end_line": 34,
      "tokens": 246,
      "context_length": 31358
    },
    {
      "position": 95,
      "id": "/tmp/repos/django/django/forms/fields.py_Field.run_validators_Field.widget_attrs.2.1",
      "distance": 1.162854790687561,
      "file_path": "django/forms/fields.py",
      "start_line": 128,
      "end_line": 171,
      "tokens": 290,
      "context_length": 31648
    },
    {
      "position": 96,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_Field.rel_db_type_Field.set_attributes_from_name.4.self.verbose_name.1",
      "distance": 1.1630443334579468,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 694,
      "end_line": 751,
      "tokens": 425,
      "context_length": 32073
    },
    {
      "position": 97,
      "id": "/tmp/repos/django/django/db/migrations/operations/fields.py_RemoveField.database_forwards_RemoveField.reduce.3.1",
      "distance": 1.1647616624832153,
      "file_path": "django/db/migrations/operations/fields.py",
      "start_line": 169,
      "end_line": 187,
      "tokens": 232,
      "context_length": 32305,
      "file_pos": 26
    },
    {
      "position": 98,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_1_ModelOperation.reduce.1.1",
      "distance": 1.1649218797683716,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 1,
      "end_line": 38,
      "tokens": 235,
      "context_length": 32540,
      "file_pos": 26
    },
    {
      "position": 99,
      "id": "/tmp/repos/django/django/forms/models.py_BaseModelFormSet._construct_form_BaseModelFormSet._construct_form.5.1",
      "distance": 1.1651041507720947,
      "file_path": "django/forms/models.py",
      "start_line": 595,
      "end_line": 627,
      "tokens": 270,
      "context_length": 32810
    },
    {
      "position": 100,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_BinaryField_BinaryField.to_python.2.2.1",
      "distance": 1.1661388874053955,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 2225,
      "end_line": 2286,
      "tokens": 425,
      "context_length": 33235
    },
    {
      "position": 101,
      "id": "/tmp/repos/django/django/db/migrations/operations/fields.py_AlterField.database_backwards_AlterField.reduce.2.1",
      "distance": 1.166454792022705,
      "file_path": "django/db/migrations/operations/fields.py",
      "start_line": 249,
      "end_line": 267,
      "tokens": 157,
      "context_length": 33392,
      "file_pos": 26
    },
    {
      "position": 102,
      "id": "/tmp/repos/django/django/forms/models.py_1_ALL_FIELDS.1",
      "distance": 1.1665445566177368,
      "file_path": "django/forms/models.py",
      "start_line": 1,
      "end_line": 29,
      "tokens": 234,
      "context_length": 33626
    },
    {
      "position": 103,
      "id": "/tmp/repos/django/django/db/models/sql/query.py_Query.set_values_Query.set_values.9",
      "distance": 1.1671319007873535,
      "file_path": "django/db/models/sql/query.py",
      "start_line": 2124,
      "end_line": 2160,
      "tokens": 292,
      "context_length": 33918
    },
    {
      "position": 104,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_AddConstraint_AddConstraint.describe.1.1",
      "distance": 1.1684730052947998,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 793,
      "end_line": 822,
      "tokens": 278,
      "context_length": 34196,
      "file_pos": 26
    },
    {
      "position": 105,
      "id": "/tmp/repos/django/django/forms/models.py_modelform_factory_modelform_factory.26.1",
      "distance": 1.16847562789917,
      "file_path": "django/forms/models.py",
      "start_line": 475,
      "end_line": 555,
      "tokens": 718,
      "context_length": 34914
    },
    {
      "position": 106,
      "id": "/tmp/repos/django/django/db/models/sql/query.py_Query.add_immediate_loading_Query.add_immediate_loading.5.4.self.deferred_loading.1",
      "distance": 1.1686334609985352,
      "file_path": "django/db/models/sql/query.py",
      "start_line": 2054,
      "end_line": 2076,
      "tokens": 229,
      "context_length": 35143
    },
    {
      "position": 107,
      "id": "/tmp/repos/django/django/db/models/sql/compiler.py_SQLInsertCompiler.assemble_as_sql_SQLInsertCompiler.assemble_as_sql.14.1",
      "distance": 1.1688446998596191,
      "file_path": "django/db/models/sql/compiler.py",
      "start_line": 1277,
      "end_line": 1310,
      "tokens": 344,
      "context_length": 35487
    },
    {
      "position": 108,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_RemoveConstraint_",
      "distance": 1.1689119338989258,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 825,
      "end_line": 860,
      "tokens": 347,
      "context_length": 35834,
      "file_pos": 27
    },
    {
      "position": 109,
      "id": "/tmp/repos/django/django/contrib/postgres/fields/hstore.py_json_HStoreField.get_prep_value.4.1",
      "distance": 1.1704087257385254,
      "file_path": "django/contrib/postgres/fields/hstore.py",
      "start_line": 1,
      "end_line": 69,
      "tokens": 435,
      "context_length": 36269
    },
    {
      "position": 110,
      "id": "/tmp/repos/django/django/db/models/sql/query.py_Query.clear_deferred_loading_Query.add_deferred_loading.7.3.self.deferred_loading.1",
      "distance": 1.1709259748458862,
      "file_path": "django/db/models/sql/query.py",
      "start_line": 2030,
      "end_line": 2052,
      "tokens": 249,
      "context_length": 36518
    },
    {
      "position": 111,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/introspection.py_10_FlexibleFieldLookupDict.base_data_types_reverse.__getitem__.2.1",
      "distance": 1.173577070236206,
      "file_path": "django/db/backends/sqlite3/introspection.py",
      "start_line": 23,
      "end_line": 54,
      "tokens": 296,
      "context_length": 36814
    },
    {
      "position": 112,
      "id": "/tmp/repos/django/django/forms/fields.py_SlugField_",
      "distance": 1.1735891103744507,
      "file_path": "django/forms/fields.py",
      "start_line": 1184,
      "end_line": 1214,
      "tokens": 182,
      "context_length": 36996
    },
    {
      "position": 113,
      "id": "/tmp/repos/django/django/contrib/gis/db/models/fields.py_1_SRIDCacheEntry.1",
      "distance": 1.173824667930603,
      "file_path": "django/contrib/gis/db/models/fields.py",
      "start_line": 1,
      "end_line": 20,
      "tokens": 193,
      "context_length": 37189
    },
    {
      "position": 114,
      "id": "/tmp/repos/django/django/forms/models.py_BaseModelForm_BaseModelForm.__init__.11.1",
      "distance": 1.1741647720336914,
      "file_path": "django/forms/models.py",
      "start_line": 280,
      "end_line": 308,
      "tokens": 288,
      "context_length": 37477
    },
    {
      "position": 115,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_DatabaseSchemaEditor.add_field_DatabaseSchemaEditor.add_field.4.2",
      "distance": 1.1748692989349365,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 88,
      "end_line": 98,
      "tokens": 138,
      "context_length": 37615
    },
    {
      "position": 116,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_AutoFieldMeta_AutoFieldMeta.__subclasscheck__.1.1",
      "distance": 1.1759871244430542,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 2394,
      "end_line": 2419,
      "tokens": 217,
      "context_length": 37832
    },
    {
      "position": 117,
      "id": "/tmp/repos/django/django/db/models/sql/query.py_Query.deferred_to_data_Query.deferred_to_data.7.10.1",
      "distance": 1.1762778759002686,
      "file_path": "django/db/models/sql/query.py",
      "start_line": 646,
      "end_line": 693,
      "tokens": 511,
      "context_length": 38343
    },
    {
      "position": 118,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.alter_field_BaseDatabaseSchemaEditor.alter_field.8",
      "distance": 1.176626443862915,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 526,
      "end_line": 565,
      "tokens": 470,
      "context_length": 38813
    },
    {
      "position": 119,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_DateTimeCheckMixin_DateTimeCheckMixin._check_fix_default_value.1.1",
      "distance": 1.1768001317977905,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 1059,
      "end_line": 1088,
      "tokens": 218,
      "context_length": 39031
    },
    {
      "position": 120,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_AutoField_",
      "distance": 1.1773536205291748,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 2422,
      "end_line": 2447,
      "tokens": 143,
      "context_length": 39174
    },
    {
      "position": 121,
      "id": "/tmp/repos/django/django/db/migrations/operations/utils.py_get_references_",
      "distance": 1.1785128116607666,
      "file_path": "django/db/migrations/operations/utils.py",
      "start_line": 84,
      "end_line": 102,
      "tokens": 167,
      "context_length": 39341,
      "file_pos": 30
    },
    {
      "position": 122,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_RenameModel.database_forwards_RenameModel.database_forwards.2.8.2.8",
      "distance": 1.1787354946136475,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 331,
      "end_line": 380,
      "tokens": 493,
      "context_length": 39834,
      "file_pos": 30
    },
    {
      "position": 123,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_DatabaseSchemaEditor._remake_table.28_DatabaseSchemaEditor._remake_table.67.restore_pk_field.primary_key.1",
      "distance": 1.1792737245559692,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 223,
      "end_line": 305,
      "tokens": 731,
      "context_length": 40565
    },
    {
      "position": 124,
      "id": "/tmp/repos/django/django/contrib/contenttypes/fields.py_functools_14",
      "distance": 1.1795481443405151,
      "file_path": "django/contrib/contenttypes/fields.py",
      "start_line": 1,
      "end_line": 17,
      "tokens": 134,
      "context_length": 40699
    },
    {
      "position": 125,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_NullBooleanField_NullBooleanField.get_internal_type.1.1",
      "distance": 1.18010675907135,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 1926,
      "end_line": 1945,
      "tokens": 164,
      "context_length": 40863
    },
    {
      "position": 126,
      "id": "/tmp/repos/django/django/forms/models.py_BaseModelForm.clean_BaseModelForm._update_errors.opts.6",
      "distance": 1.1804933547973633,
      "file_path": "django/forms/models.py",
      "start_line": 351,
      "end_line": 381,
      "tokens": 233,
      "context_length": 41096
    },
    {
      "position": 127,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_field_BaseDatabaseSchemaEditor._alter_field.20",
      "distance": 1.1806223392486572,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 567,
      "end_line": 629,
      "tokens": 700,
      "context_length": 41796
    },
    {
      "position": 128,
      "id": "/tmp/repos/django/django/db/models/query.py_QuerySet.defer_QuerySet.defer.6.1",
      "distance": 1.1810312271118164,
      "file_path": "django/db/models/query.py",
      "start_line": 1154,
      "end_line": 1169,
      "tokens": 149,
      "context_length": 41945
    }
  ],
  "files": [
    {
      "file_path": "django/db/models/base.py",
      "position": 1,
      "tokens": 15643,
      "context_length": 15643
    },
    {
      "file_path": "django/db/migrations/state.py",
      "position": 2,
      "tokens": 5208,
      "context_length": 20851
    },
    {
      "file_path": "django/forms/models.py",
      "position": 3,
      "tokens": 11721,
      "context_length": 32572
    },
    {
      "file_path": "django/db/migrations/autodetector.py",
      "position": 4,
      "tokens": 11738,
      "context_length": 44310
    },
    {
      "file_path": "django/forms/forms.py",
      "position": 5,
      "tokens": 4014,
      "context_length": 48324
    },
    {
      "file_path": "django/db/models/fields/files.py",
      "position": 6,
      "tokens": 3811,
      "context_length": 52135
    },
    {
      "file_path": "django/db/models/fields/__init__.py",
      "position": 7,
      "tokens": 17587,
      "context_length": 69722
    },
    {
      "file_path": "django/db/models/options.py",
      "position": 8,
      "tokens": 7106,
      "context_length": 76828
    },
    {
      "file_path": "django/db/migrations/operations/fields.py",
      "position": 9,
      "tokens": 3056,
      "context_length": 79884
    },
    {
      "file_path": "django/db/migrations/operations/__init__.py",
      "position": 10,
      "tokens": 195,
      "context_length": 80079
    },
    {
      "file_path": "django/contrib/postgres/forms/hstore.py",
      "position": 11,
      "tokens": 339,
      "context_length": 80418
    },
    {
      "file_path": "django/db/models/__init__.py",
      "position": 12,
      "tokens": 605,
      "context_length": 81023
    },
    {
      "file_path": "django/forms/fields.py",
      "position": 13,
      "tokens": 9013,
      "context_length": 90036
    },
    {
      "file_path": "django/forms/formsets.py",
      "position": 14,
      "tokens": 3886,
      "context_length": 93922
    },
    {
      "file_path": "django/db/migrations/serializer.py",
      "position": 15,
      "tokens": 2549,
      "context_length": 96471
    },
    {
      "file_path": "django/db/models/fields/proxy.py",
      "position": 16,
      "tokens": 117,
      "context_length": 96588
    },
    {
      "file_path": "django/db/models/sql/query.py",
      "position": 17,
      "tokens": 21934,
      "context_length": 118522
    },
    {
      "file_path": "django/db/backends/mysql/schema.py",
      "position": 18,
      "tokens": 1496,
      "context_length": 120018
    },
    {
      "file_path": "django/db/models/fields/mixins.py",
      "position": 19,
      "tokens": 343,
      "context_length": 120361
    },
    {
      "file_path": "django/db/backends/base/schema.py",
      "position": 20,
      "tokens": 11351,
      "context_length": 131712
    },
    {
      "file_path": "django/contrib/admin/checks.py",
      "position": 21,
      "tokens": 9007,
      "context_length": 140719
    },
    {
      "file_path": "django/contrib/postgres/fields/hstore.py",
      "position": 22,
      "tokens": 700,
      "context_length": 141419
    },
    {
      "file_path": "django/contrib/admin/views/main.py",
      "position": 23,
      "tokens": 4298,
      "context_length": 145717
    },
    {
      "file_path": "django/db/migrations/operations/models.py",
      "position": 24,
      "tokens": 6574,
      "context_length": 152291
    },
    {
      "file_path": "django/db/models/constraints.py",
      "position": 25,
      "tokens": 1049,
      "context_length": 153340
    },
    {
      "file_path": "django/db/models/fields/related.py",
      "position": 26,
      "tokens": 13832,
      "context_length": 167172
    },
    {
      "file_path": "django/db/models/sql/compiler.py",
      "position": 27,
      "tokens": 14070,
      "context_length": 181242
    },
    {
      "file_path": "django/db/backends/sqlite3/introspection.py",
      "position": 28,
      "tokens": 3709,
      "context_length": 184951
    },
    {
      "file_path": "django/contrib/gis/db/models/fields.py",
      "position": 29,
      "tokens": 3051,
      "context_length": 188002
    },
    {
      "file_path": "django/db/migrations/operations/utils.py",
      "position": 30,
      "tokens": 752,
      "context_length": 188754
    },
    {
      "file_path": "django/db/backends/sqlite3/schema.py",
      "position": 31,
      "tokens": 4116,
      "context_length": 192870
    },
    {
      "file_path": "django/contrib/contenttypes/fields.py",
      "position": 32,
      "tokens": 5433,
      "context_length": 198303
    },
    {
      "file_path": "django/db/models/query.py",
      "position": 33,
      "tokens": 17027,
      "context_length": 215330
    }
  ]
}