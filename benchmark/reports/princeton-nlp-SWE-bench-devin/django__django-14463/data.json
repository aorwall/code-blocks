{
  "instance_id": "django__django-14463",
  "model_patch": "diff --git a/django/db/backends/postgresql/psycopg_any.py b/django/db/backends/postgresql/psycopg_any.py\nindex 579104dead..35c0a6916a 100644\n--- a/django/db/backends/postgresql/psycopg_any.py\n+++ b/django/db/backends/postgresql/psycopg_any.py\n@@ -26,7 +26,6 @@ try:\n         Load a PostgreSQL timestamptz using the a specific timezone.\n         The timezone can be None too, in which case it will be chopped.\n         \"\"\"\n-\n         timezone = None\n \n         def load(self, data):\n@@ -70,6 +69,23 @@ try:\n \n     is_psycopg3 = True\n \n+    class CommentOnTable:\n+        def __init__(self, table_name, comment):\n+            self.table_name = table_name\n+            self.comment = comment\n+\n+        def __str__(self):\n+            return \"COMMENT ON TABLE %s IS %s\" % (self.table_name, sql.Literal(self.comment))\n+\n+    class CommentOnColumn:\n+        def __init__(self, table_name, column_name, comment):\n+            self.table_name = table_name\n+            self.column_name = column_name\n+            self.comment = comment\n+\n+        def __str__(self):\n+            return \"COMMENT ON COLUMN %s.%s IS %s\" % (self.table_name, self.column_name, sql.Literal(self.comment))\n+\n except ImportError:\n     from enum import IntEnum\n \ndiff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex 2887071254..e60398bd9b 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -1,19 +1,38 @@\n-from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n-from django.db.backends.ddl_references import IndexColumns\n-from django.db.backends.postgresql.psycopg_any import sql\n from django.db.backends.utils import strip_quotes\n+from django.db.backends.ddl_references import IndexColumns\n \n+def create_model(self, model):\n+    \"\"\"\n+    Take a model and create a table for it in the database.\n+    Will also create any accompanying indexes or unique constraints.\n+    \"\"\"\n+    columns = [\n+        self.column_sql(model, field)\n+        for field in model._meta.local_fields\n+    ]\n+    columns = [col for col in columns if col is not None]\n+    constraints = [\n+        *self._unique_sql(model),\n+        *self._check_sql(model),\n+        *self._fk_sql(model),\n+        *self._index_sql(model),\n+    ]\n+    sql = self.sql_create_table % {\n+        \"table\": self.quote_name(model._meta.db_table),\n+        \"definition\": \", \".join(columns + constraints),\n+    }\n+    self.execute(sql)\n \n-class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n+    # Add any table comments\n+    if hasattr(model._meta, 'db_table_comment'):\n+        comment_sql = self.add_table_comment(model._meta.db_table, model._meta.db_table_comment)\n+        self.execute(comment_sql)\n \n-    # Setting all constraints to IMMEDIATE to allow changing data in the same\n-    # transaction.\n-    sql_update_with_default = (\n-        \"UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL\"\n-        \"; SET CONSTRAINTS ALL IMMEDIATE\"\n-    )\n-    sql_alter_sequence_type = \"ALTER SEQUENCE IF EXISTS %(sequence)s AS %(type)s\"\n-    sql_delete_sequence = \"DROP SEQUENCE IF EXISTS %(sequence)s CASCADE\"\n+    # Add any field-specific column comments\n+    for field in model._meta.local_fields:\n+        if hasattr(field, 'db_column_comment'):\n+            comment_sql = self.add_column_comment(model._meta.db_table, field.column, field.db_column_comment)\n+            self.execute(comment_sql)\n \n     sql_create_index = (\n         \"CREATE INDEX %(name)s ON %(table)s%(using)s \"\n@@ -373,3 +392,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             include=include,\n             expressions=expressions,\n         )\n+\n+    def add_table_comment(self, table_name, comment):\n+        \"\"\"\n+        Generate the SQL to add a comment to the table.\n+        \"\"\"\n+        return sql.CommentOnTable(table_name=table_name, comment=comment)\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex b6b8202802..d48e39381c 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -157,6 +157,11 @@ class Options:\n \n         self.default_related_name = None\n \n+        # New attribute for table comment\n+        self.db_table_comment = ''\n+        # New attribute for column comments\n+        self.db_column_comments = {}\n+\n     @property\n     def label(self):\n         return \"%s.%s\" % (self.app_label, self.object_name)\n@@ -202,6 +207,9 @@ class Options:\n                     setattr(self, attr_name, getattr(self.meta, attr_name))\n                     self.original_attrs[attr_name] = getattr(self, attr_name)\n \n+            if hasattr(self.meta, 'db_table_comment'):\n+                self.db_table_comment = getattr(self.meta, 'db_table_comment')\n+\n             self.unique_together = normalize_together(self.unique_together)\n             self.index_together = normalize_together(self.index_together)\n             if self.index_together:\n@@ -344,6 +352,8 @@ class Options:\n         else:\n             bisect.insort(self.local_fields, field)\n             self.setup_pk(field)\n+        if hasattr(field, 'db_column_comment'):\n+            self.db_column_comments[field.name] = getattr(field, 'db_column_comment')\n \n         # If the field being added is a relation to another known field,\n         # expire the cache on this field and the forward cache on the field\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "django/db/backends/postgresql/psycopg_any.py",
    "django/db/backends/postgresql/schema.py",
    "django/db/models/options.py"
  ],
  "repo": "django/django",
  "base_commit": "68ef274bc505cd44f305c03cbf84cf08826200a8",
  "patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -78,18 +78,16 @@ def table2model(table_name):\n             )\n             yield \"from %s import models\" % self.db_module\n             known_models = []\n-            table_info = connection.introspection.get_table_list(cursor)\n-\n             # Determine types of tables and/or views to be introspected.\n             types = {\"t\"}\n             if options[\"include_partitions\"]:\n                 types.add(\"p\")\n             if options[\"include_views\"]:\n                 types.add(\"v\")\n+            table_info = connection.introspection.get_table_list(cursor)\n+            table_info = {info.name: info for info in table_info if info.type in types}\n \n-            for table_name in options[\"table\"] or sorted(\n-                info.name for info in table_info if info.type in types\n-            ):\n+            for table_name in options[\"table\"] or sorted(name for name in table_info):\n                 if table_name_filter is not None and callable(table_name_filter):\n                     if not table_name_filter(table_name):\n                         continue\n@@ -232,6 +230,10 @@ def table2model(table_name):\n                     if field_type.startswith((\"ForeignKey(\", \"OneToOneField(\")):\n                         field_desc += \", models.DO_NOTHING\"\n \n+                    # Add comment.\n+                    if connection.features.supports_comments and row.comment:\n+                        extra_params[\"db_comment\"] = row.comment\n+\n                     if extra_params:\n                         if not field_desc.endswith(\"(\"):\n                             field_desc += \", \"\n@@ -242,14 +244,22 @@ def table2model(table_name):\n                     if comment_notes:\n                         field_desc += \"  # \" + \" \".join(comment_notes)\n                     yield \"    %s\" % field_desc\n-                is_view = any(\n-                    info.name == table_name and info.type == \"v\" for info in table_info\n-                )\n-                is_partition = any(\n-                    info.name == table_name and info.type == \"p\" for info in table_info\n-                )\n+                comment = None\n+                if info := table_info.get(table_name):\n+                    is_view = info.type == \"v\"\n+                    is_partition = info.type == \"p\"\n+                    if connection.features.supports_comments:\n+                        comment = info.comment\n+                else:\n+                    is_view = False\n+                    is_partition = False\n                 yield from self.get_meta(\n-                    table_name, constraints, column_to_field_name, is_view, is_partition\n+                    table_name,\n+                    constraints,\n+                    column_to_field_name,\n+                    is_view,\n+                    is_partition,\n+                    comment,\n                 )\n \n     def normalize_col_name(self, col_name, used_column_names, is_relation):\n@@ -353,7 +363,13 @@ def get_field_type(self, connection, table_name, row):\n         return field_type, field_params, field_notes\n \n     def get_meta(\n-        self, table_name, constraints, column_to_field_name, is_view, is_partition\n+        self,\n+        table_name,\n+        constraints,\n+        column_to_field_name,\n+        is_view,\n+        is_partition,\n+        comment,\n     ):\n         \"\"\"\n         Return a sequence comprising the lines of code necessary\n@@ -391,4 +407,6 @@ def get_meta(\n         if unique_together:\n             tup = \"(\" + \", \".join(unique_together) + \",)\"\n             meta += [\"        unique_together = %s\" % tup]\n+        if comment:\n+            meta += [f\"        db_table_comment = {comment!r}\"]\n         return meta\ndiff --git a/django/db/backends/base/features.py b/django/db/backends/base/features.py\n--- a/django/db/backends/base/features.py\n+++ b/django/db/backends/base/features.py\n@@ -334,6 +334,11 @@ class BaseDatabaseFeatures:\n     # Does the backend support non-deterministic collations?\n     supports_non_deterministic_collations = True\n \n+    # Does the backend support column and table comments?\n+    supports_comments = False\n+    # Does the backend support column comments in ADD COLUMN statements?\n+    supports_comments_inline = False\n+\n     # Does the backend support the logical XOR operator?\n     supports_logical_xor = False\n \ndiff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -141,6 +141,9 @@ class BaseDatabaseSchemaEditor:\n \n     sql_delete_procedure = \"DROP PROCEDURE %(procedure)s\"\n \n+    sql_alter_table_comment = \"COMMENT ON TABLE %(table)s IS %(comment)s\"\n+    sql_alter_column_comment = \"COMMENT ON COLUMN %(table)s.%(column)s IS %(comment)s\"\n+\n     def __init__(self, connection, collect_sql=False, atomic=True):\n         self.connection = connection\n         self.collect_sql = collect_sql\n@@ -289,6 +292,8 @@ def _iter_column_sql(\n         yield column_db_type\n         if collation := field_db_params.get(\"collation\"):\n             yield self._collate_sql(collation)\n+        if self.connection.features.supports_comments_inline and field.db_comment:\n+            yield self._comment_sql(field.db_comment)\n         # Work out nullability.\n         null = field.null\n         # Include a default value, if requested.\n@@ -445,6 +450,23 @@ def create_model(self, model):\n         # definition.\n         self.execute(sql, params or None)\n \n+        if self.connection.features.supports_comments:\n+            # Add table comment.\n+            if model._meta.db_table_comment:\n+                self.alter_db_table_comment(model, None, model._meta.db_table_comment)\n+            # Add column comments.\n+            if not self.connection.features.supports_comments_inline:\n+                for field in model._meta.local_fields:\n+                    if field.db_comment:\n+                        field_db_params = field.db_parameters(\n+                            connection=self.connection\n+                        )\n+                        field_type = field_db_params[\"type\"]\n+                        self.execute(\n+                            *self._alter_column_comment_sql(\n+                                model, field, field_type, field.db_comment\n+                            )\n+                        )\n         # Add any field index and index_together's (deferred as SQLite\n         # _remake_table needs it).\n         self.deferred_sql.extend(self._model_indexes_sql(model))\n@@ -614,6 +636,15 @@ def alter_db_table(self, model, old_db_table, new_db_table):\n             if isinstance(sql, Statement):\n                 sql.rename_table_references(old_db_table, new_db_table)\n \n+    def alter_db_table_comment(self, model, old_db_table_comment, new_db_table_comment):\n+        self.execute(\n+            self.sql_alter_table_comment\n+            % {\n+                \"table\": self.quote_name(model._meta.db_table),\n+                \"comment\": self.quote_value(new_db_table_comment or \"\"),\n+            }\n+        )\n+\n     def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):\n         \"\"\"Move a model's table between tablespaces.\"\"\"\n         self.execute(\n@@ -693,6 +724,18 @@ def add_field(self, model, field):\n                 \"changes\": changes_sql,\n             }\n             self.execute(sql, params)\n+        # Add field comment, if required.\n+        if (\n+            field.db_comment\n+            and self.connection.features.supports_comments\n+            and not self.connection.features.supports_comments_inline\n+        ):\n+            field_type = db_params[\"type\"]\n+            self.execute(\n+                *self._alter_column_comment_sql(\n+                    model, field, field_type, field.db_comment\n+                )\n+            )\n         # Add an index, if required\n         self.deferred_sql.extend(self._field_indexes_sql(model, field))\n         # Reset connection if required\n@@ -813,6 +856,11 @@ def _alter_field(\n             self.connection.features.supports_foreign_keys\n             and old_field.remote_field\n             and old_field.db_constraint\n+            and self._field_should_be_altered(\n+                old_field,\n+                new_field,\n+                ignore={\"db_comment\"},\n+            )\n         ):\n             fk_names = self._constraint_names(\n                 model, [old_field.column], foreign_key=True\n@@ -949,11 +997,15 @@ def _alter_field(\n         # Type suffix change? (e.g. auto increment).\n         old_type_suffix = old_field.db_type_suffix(connection=self.connection)\n         new_type_suffix = new_field.db_type_suffix(connection=self.connection)\n-        # Type or collation change?\n+        # Type, collation, or comment change?\n         if (\n             old_type != new_type\n             or old_type_suffix != new_type_suffix\n             or old_collation != new_collation\n+            or (\n+                self.connection.features.supports_comments\n+                and old_field.db_comment != new_field.db_comment\n+            )\n         ):\n             fragment, other_actions = self._alter_column_type_sql(\n                 model, old_field, new_field, new_type, old_collation, new_collation\n@@ -1211,12 +1263,26 @@ def _alter_column_type_sql(\n         an ALTER TABLE statement and a list of extra (sql, params) tuples to\n         run once the field is altered.\n         \"\"\"\n+        other_actions = []\n         if collate_sql := self._collate_sql(\n             new_collation, old_collation, model._meta.db_table\n         ):\n             collate_sql = f\" {collate_sql}\"\n         else:\n             collate_sql = \"\"\n+        # Comment change?\n+        comment_sql = \"\"\n+        if self.connection.features.supports_comments and not new_field.many_to_many:\n+            if old_field.db_comment != new_field.db_comment:\n+                # PostgreSQL and Oracle can't execute 'ALTER COLUMN ...' and\n+                # 'COMMENT ON ...' at the same time.\n+                sql, params = self._alter_column_comment_sql(\n+                    model, new_field, new_type, new_field.db_comment\n+                )\n+                if sql:\n+                    other_actions.append((sql, params))\n+            if new_field.db_comment:\n+                comment_sql = self._comment_sql(new_field.db_comment)\n         return (\n             (\n                 self.sql_alter_column_type\n@@ -1224,12 +1290,27 @@ def _alter_column_type_sql(\n                     \"column\": self.quote_name(new_field.column),\n                     \"type\": new_type,\n                     \"collation\": collate_sql,\n+                    \"comment\": comment_sql,\n                 },\n                 [],\n             ),\n+            other_actions,\n+        )\n+\n+    def _alter_column_comment_sql(self, model, new_field, new_type, new_db_comment):\n+        return (\n+            self.sql_alter_column_comment\n+            % {\n+                \"table\": self.quote_name(model._meta.db_table),\n+                \"column\": self.quote_name(new_field.column),\n+                \"comment\": self._comment_sql(new_db_comment),\n+            },\n             [],\n         )\n \n+    def _comment_sql(self, comment):\n+        return self.quote_value(comment or \"\")\n+\n     def _alter_many_to_many(self, model, old_field, new_field, strict):\n         \"\"\"Alter M2Ms to repoint their to= endpoints.\"\"\"\n         # Rename the through table\n@@ -1423,16 +1504,18 @@ def _field_indexes_sql(self, model, field):\n             output.append(self._create_index_sql(model, fields=[field]))\n         return output\n \n-    def _field_should_be_altered(self, old_field, new_field):\n+    def _field_should_be_altered(self, old_field, new_field, ignore=None):\n+        ignore = ignore or set()\n         _, old_path, old_args, old_kwargs = old_field.deconstruct()\n         _, new_path, new_args, new_kwargs = new_field.deconstruct()\n         # Don't alter when:\n         # - changing only a field name\n         # - changing an attribute that doesn't affect the schema\n+        # - changing an attribute in the provided set of ignored attributes\n         # - adding only a db_column and the column name is not changed\n-        for attr in old_field.non_db_attrs:\n+        for attr in ignore.union(old_field.non_db_attrs):\n             old_kwargs.pop(attr, None)\n-        for attr in new_field.non_db_attrs:\n+        for attr in ignore.union(new_field.non_db_attrs):\n             new_kwargs.pop(attr, None)\n         return self.quote_name(old_field.column) != self.quote_name(\n             new_field.column\ndiff --git a/django/db/backends/mysql/features.py b/django/db/backends/mysql/features.py\n--- a/django/db/backends/mysql/features.py\n+++ b/django/db/backends/mysql/features.py\n@@ -18,6 +18,8 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     requires_explicit_null_ordering_when_grouping = True\n     atomic_transactions = False\n     can_clone_databases = True\n+    supports_comments = True\n+    supports_comments_inline = True\n     supports_temporal_subtraction = True\n     supports_slicing_ordering_in_compound = True\n     supports_index_on_text_field = False\ndiff --git a/django/db/backends/mysql/introspection.py b/django/db/backends/mysql/introspection.py\n--- a/django/db/backends/mysql/introspection.py\n+++ b/django/db/backends/mysql/introspection.py\n@@ -5,18 +5,20 @@\n \n from django.db.backends.base.introspection import BaseDatabaseIntrospection\n from django.db.backends.base.introspection import FieldInfo as BaseFieldInfo\n-from django.db.backends.base.introspection import TableInfo\n+from django.db.backends.base.introspection import TableInfo as BaseTableInfo\n from django.db.models import Index\n from django.utils.datastructures import OrderedSet\n \n FieldInfo = namedtuple(\n-    \"FieldInfo\", BaseFieldInfo._fields + (\"extra\", \"is_unsigned\", \"has_json_constraint\")\n+    \"FieldInfo\",\n+    BaseFieldInfo._fields + (\"extra\", \"is_unsigned\", \"has_json_constraint\", \"comment\"),\n )\n InfoLine = namedtuple(\n     \"InfoLine\",\n     \"col_name data_type max_len num_prec num_scale extra column_default \"\n-    \"collation is_unsigned\",\n+    \"collation is_unsigned comment\",\n )\n+TableInfo = namedtuple(\"TableInfo\", BaseTableInfo._fields + (\"comment\",))\n \n \n class DatabaseIntrospection(BaseDatabaseIntrospection):\n@@ -68,9 +70,18 @@ def get_field_type(self, data_type, description):\n \n     def get_table_list(self, cursor):\n         \"\"\"Return a list of table and view names in the current database.\"\"\"\n-        cursor.execute(\"SHOW FULL TABLES\")\n+        cursor.execute(\n+            \"\"\"\n+            SELECT\n+                table_name,\n+                table_type,\n+                table_comment\n+            FROM information_schema.tables\n+            WHERE table_schema = DATABASE()\n+            \"\"\"\n+        )\n         return [\n-            TableInfo(row[0], {\"BASE TABLE\": \"t\", \"VIEW\": \"v\"}.get(row[1]))\n+            TableInfo(row[0], {\"BASE TABLE\": \"t\", \"VIEW\": \"v\"}.get(row[1]), row[2])\n             for row in cursor.fetchall()\n         ]\n \n@@ -128,7 +139,8 @@ def get_table_description(self, cursor, table_name):\n                 CASE\n                     WHEN column_type LIKE '%% unsigned' THEN 1\n                     ELSE 0\n-                END AS is_unsigned\n+                END AS is_unsigned,\n+                column_comment\n             FROM information_schema.columns\n             WHERE table_name = %s AND table_schema = DATABASE()\n             \"\"\",\n@@ -159,6 +171,7 @@ def to_int(i):\n                     info.extra,\n                     info.is_unsigned,\n                     line[0] in json_constraints,\n+                    info.comment,\n                 )\n             )\n         return fields\ndiff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -9,7 +9,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n     sql_alter_column_null = \"MODIFY %(column)s %(type)s NULL\"\n     sql_alter_column_not_null = \"MODIFY %(column)s %(type)s NOT NULL\"\n-    sql_alter_column_type = \"MODIFY %(column)s %(type)s%(collation)s\"\n+    sql_alter_column_type = \"MODIFY %(column)s %(type)s%(collation)s%(comment)s\"\n     sql_alter_column_no_default_null = \"ALTER COLUMN %(column)s SET DEFAULT NULL\"\n \n     # No 'CASCADE' which works as a no-op in MySQL but is undocumented\n@@ -32,6 +32,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n     sql_create_index = \"CREATE INDEX %(name)s ON %(table)s (%(columns)s)%(extra)s\"\n \n+    sql_alter_table_comment = \"ALTER TABLE %(table)s COMMENT = %(comment)s\"\n+    sql_alter_column_comment = None\n+\n     @property\n     def sql_delete_check(self):\n         if self.connection.mysql_is_mariadb:\n@@ -228,3 +231,11 @@ def _alter_column_type_sql(\n     def _rename_field_sql(self, table, old_field, new_field, new_type):\n         new_type = self._set_field_new_type_null_status(old_field, new_type)\n         return super()._rename_field_sql(table, old_field, new_field, new_type)\n+\n+    def _alter_column_comment_sql(self, model, new_field, new_type, new_db_comment):\n+        # Comment is alter when altering the column type.\n+        return \"\", []\n+\n+    def _comment_sql(self, comment):\n+        comment_sql = super()._comment_sql(comment)\n+        return f\" COMMENT {comment_sql}\"\ndiff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py\n--- a/django/db/backends/oracle/features.py\n+++ b/django/db/backends/oracle/features.py\n@@ -25,6 +25,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     supports_partially_nullable_unique_constraints = False\n     supports_deferrable_unique_constraints = True\n     truncates_names = True\n+    supports_comments = True\n     supports_tablespaces = True\n     supports_sequence_reset = False\n     can_introspect_materialized_views = True\ndiff --git a/django/db/backends/oracle/introspection.py b/django/db/backends/oracle/introspection.py\n--- a/django/db/backends/oracle/introspection.py\n+++ b/django/db/backends/oracle/introspection.py\n@@ -5,10 +5,13 @@\n from django.db import models\n from django.db.backends.base.introspection import BaseDatabaseIntrospection\n from django.db.backends.base.introspection import FieldInfo as BaseFieldInfo\n-from django.db.backends.base.introspection import TableInfo\n+from django.db.backends.base.introspection import TableInfo as BaseTableInfo\n from django.utils.functional import cached_property\n \n-FieldInfo = namedtuple(\"FieldInfo\", BaseFieldInfo._fields + (\"is_autofield\", \"is_json\"))\n+FieldInfo = namedtuple(\n+    \"FieldInfo\", BaseFieldInfo._fields + (\"is_autofield\", \"is_json\", \"comment\")\n+)\n+TableInfo = namedtuple(\"TableInfo\", BaseTableInfo._fields + (\"comment\",))\n \n \n class DatabaseIntrospection(BaseDatabaseIntrospection):\n@@ -77,8 +80,14 @@ def get_table_list(self, cursor):\n         \"\"\"Return a list of table and view names in the current database.\"\"\"\n         cursor.execute(\n             \"\"\"\n-            SELECT table_name, 't'\n+            SELECT\n+                user_tables.table_name,\n+                't',\n+                user_tab_comments.comments\n             FROM user_tables\n+            LEFT OUTER JOIN\n+                user_tab_comments\n+                ON user_tab_comments.table_name = user_tables.table_name\n             WHERE\n                 NOT EXISTS (\n                     SELECT 1\n@@ -86,13 +95,13 @@ def get_table_list(self, cursor):\n                     WHERE user_mviews.mview_name = user_tables.table_name\n                 )\n             UNION ALL\n-            SELECT view_name, 'v' FROM user_views\n+            SELECT view_name, 'v', NULL FROM user_views\n             UNION ALL\n-            SELECT mview_name, 'v' FROM user_mviews\n+            SELECT mview_name, 'v', NULL FROM user_mviews\n         \"\"\"\n         )\n         return [\n-            TableInfo(self.identifier_converter(row[0]), row[1])\n+            TableInfo(self.identifier_converter(row[0]), row[1], row[2])\n             for row in cursor.fetchall()\n         ]\n \n@@ -131,10 +140,15 @@ def get_table_description(self, cursor, table_name):\n                     )\n                     THEN 1\n                     ELSE 0\n-                END as is_json\n+                END as is_json,\n+                user_col_comments.comments as col_comment\n             FROM user_tab_cols\n             LEFT OUTER JOIN\n                 user_tables ON user_tables.table_name = user_tab_cols.table_name\n+            LEFT OUTER JOIN\n+                user_col_comments ON\n+                user_col_comments.column_name = user_tab_cols.column_name AND\n+                user_col_comments.table_name = user_tab_cols.table_name\n             WHERE user_tab_cols.table_name = UPPER(%s)\n             \"\"\",\n             [table_name],\n@@ -146,6 +160,7 @@ def get_table_description(self, cursor, table_name):\n                 collation,\n                 is_autofield,\n                 is_json,\n+                comment,\n             )\n             for (\n                 column,\n@@ -154,6 +169,7 @@ def get_table_description(self, cursor, table_name):\n                 display_size,\n                 is_autofield,\n                 is_json,\n+                comment,\n             ) in cursor.fetchall()\n         }\n         self.cache_bust_counter += 1\n@@ -165,7 +181,14 @@ def get_table_description(self, cursor, table_name):\n         description = []\n         for desc in cursor.description:\n             name = desc[0]\n-            display_size, default, collation, is_autofield, is_json = field_map[name]\n+            (\n+                display_size,\n+                default,\n+                collation,\n+                is_autofield,\n+                is_json,\n+                comment,\n+            ) = field_map[name]\n             name %= {}  # cx_Oracle, for some reason, doubles percent signs.\n             description.append(\n                 FieldInfo(\n@@ -180,6 +203,7 @@ def get_table_description(self, cursor, table_name):\n                     collation,\n                     is_autofield,\n                     is_json,\n+                    comment,\n                 )\n             )\n         return description\ndiff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -22,6 +22,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     has_select_for_update_skip_locked = True\n     has_select_for_no_key_update = True\n     can_release_savepoints = True\n+    supports_comments = True\n     supports_tablespaces = True\n     supports_transactions = True\n     can_introspect_materialized_views = True\ndiff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py\n--- a/django/db/backends/postgresql/introspection.py\n+++ b/django/db/backends/postgresql/introspection.py\n@@ -2,10 +2,11 @@\n \n from django.db.backends.base.introspection import BaseDatabaseIntrospection\n from django.db.backends.base.introspection import FieldInfo as BaseFieldInfo\n-from django.db.backends.base.introspection import TableInfo\n+from django.db.backends.base.introspection import TableInfo as BaseTableInfo\n from django.db.models import Index\n \n-FieldInfo = namedtuple(\"FieldInfo\", BaseFieldInfo._fields + (\"is_autofield\",))\n+FieldInfo = namedtuple(\"FieldInfo\", BaseFieldInfo._fields + (\"is_autofield\", \"comment\"))\n+TableInfo = namedtuple(\"TableInfo\", BaseTableInfo._fields + (\"comment\",))\n \n \n class DatabaseIntrospection(BaseDatabaseIntrospection):\n@@ -62,7 +63,8 @@ def get_table_list(self, cursor):\n                     WHEN c.relispartition THEN 'p'\n                     WHEN c.relkind IN ('m', 'v') THEN 'v'\n                     ELSE 't'\n-                END\n+                END,\n+                obj_description(c.oid)\n             FROM pg_catalog.pg_class c\n             LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\n             WHERE c.relkind IN ('f', 'm', 'p', 'r', 'v')\n@@ -91,7 +93,8 @@ def get_table_description(self, cursor, table_name):\n                 NOT (a.attnotnull OR (t.typtype = 'd' AND t.typnotnull)) AS is_nullable,\n                 pg_get_expr(ad.adbin, ad.adrelid) AS column_default,\n                 CASE WHEN collname = 'default' THEN NULL ELSE collname END AS collation,\n-                a.attidentity != '' AS is_autofield\n+                a.attidentity != '' AS is_autofield,\n+                col_description(a.attrelid, a.attnum) AS column_comment\n             FROM pg_attribute a\n             LEFT JOIN pg_attrdef ad ON a.attrelid = ad.adrelid AND a.attnum = ad.adnum\n             LEFT JOIN pg_collation co ON a.attcollation = co.oid\ndiff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -170,6 +170,7 @@ def _detect_changes(self, convert_apps=None, graph=None):\n         self.generate_created_proxies()\n         self.generate_altered_options()\n         self.generate_altered_managers()\n+        self.generate_altered_db_table_comment()\n \n         # Create the renamed fields and store them in self.renamed_fields.\n         # They are used by create_altered_indexes(), generate_altered_fields(),\n@@ -1552,6 +1553,28 @@ def generate_altered_db_table(self):\n                     ),\n                 )\n \n+    def generate_altered_db_table_comment(self):\n+        models_to_check = self.kept_model_keys.union(\n+            self.kept_proxy_keys, self.kept_unmanaged_keys\n+        )\n+        for app_label, model_name in sorted(models_to_check):\n+            old_model_name = self.renamed_models.get(\n+                (app_label, model_name), model_name\n+            )\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n+\n+            old_db_table_comment = old_model_state.options.get(\"db_table_comment\")\n+            new_db_table_comment = new_model_state.options.get(\"db_table_comment\")\n+            if old_db_table_comment != new_db_table_comment:\n+                self.add_operation(\n+                    app_label,\n+                    operations.AlterModelTableComment(\n+                        name=model_name,\n+                        table_comment=new_db_table_comment,\n+                    ),\n+                )\n+\n     def generate_altered_options(self):\n         \"\"\"\n         Work out if any non-schema-affecting options have changed and make an\ndiff --git a/django/db/migrations/operations/__init__.py b/django/db/migrations/operations/__init__.py\n--- a/django/db/migrations/operations/__init__.py\n+++ b/django/db/migrations/operations/__init__.py\n@@ -6,6 +6,7 @@\n     AlterModelManagers,\n     AlterModelOptions,\n     AlterModelTable,\n+    AlterModelTableComment,\n     AlterOrderWithRespectTo,\n     AlterUniqueTogether,\n     CreateModel,\n@@ -21,6 +22,7 @@\n     \"CreateModel\",\n     \"DeleteModel\",\n     \"AlterModelTable\",\n+    \"AlterModelTableComment\",\n     \"AlterUniqueTogether\",\n     \"RenameModel\",\n     \"AlterIndexTogether\",\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -529,6 +529,44 @@ def migration_name_fragment(self):\n         return \"alter_%s_table\" % self.name_lower\n \n \n+class AlterModelTableComment(ModelOptionOperation):\n+    def __init__(self, name, table_comment):\n+        self.table_comment = table_comment\n+        super().__init__(name)\n+\n+    def deconstruct(self):\n+        kwargs = {\n+            \"name\": self.name,\n+            \"table_comment\": self.table_comment,\n+        }\n+        return (self.__class__.__qualname__, [], kwargs)\n+\n+    def state_forwards(self, app_label, state):\n+        state.alter_model_options(\n+            app_label, self.name_lower, {\"db_table_comment\": self.table_comment}\n+        )\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            schema_editor.alter_db_table_comment(\n+                new_model,\n+                old_model._meta.db_table_comment,\n+                new_model._meta.db_table_comment,\n+            )\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        return self.database_forwards(app_label, schema_editor, from_state, to_state)\n+\n+    def describe(self):\n+        return f\"Alter {self.name} table comment\"\n+\n+    @property\n+    def migration_name_fragment(self):\n+        return f\"alter_{self.name_lower}_table_comment\"\n+\n+\n class AlterTogetherOptionOperation(ModelOptionOperation):\n     option_name = None\n \ndiff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1556,6 +1556,7 @@ def check(cls, **kwargs):\n                 *cls._check_ordering(),\n                 *cls._check_constraints(databases),\n                 *cls._check_default_pk(),\n+                *cls._check_db_table_comment(databases),\n             ]\n \n         return errors\n@@ -1592,6 +1593,29 @@ def _check_default_pk(cls):\n             ]\n         return []\n \n+    @classmethod\n+    def _check_db_table_comment(cls, databases):\n+        if not cls._meta.db_table_comment:\n+            return []\n+        errors = []\n+        for db in databases:\n+            if not router.allow_migrate_model(db, cls):\n+                continue\n+            connection = connections[db]\n+            if not (\n+                connection.features.supports_comments\n+                or \"supports_comments\" in cls._meta.required_db_features\n+            ):\n+                errors.append(\n+                    checks.Warning(\n+                        f\"{connection.display_name} does not support comments on \"\n+                        f\"tables (db_table_comment).\",\n+                        obj=cls,\n+                        id=\"models.W046\",\n+                    )\n+                )\n+        return errors\n+\n     @classmethod\n     def _check_swappable(cls):\n         \"\"\"Check if the swapped model exists.\"\"\"\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -200,6 +200,7 @@ def __init__(\n         auto_created=False,\n         validators=(),\n         error_messages=None,\n+        db_comment=None,\n     ):\n         self.name = name\n         self.verbose_name = verbose_name  # May be set by set_attributes_from_name\n@@ -221,6 +222,7 @@ def __init__(\n         self.help_text = help_text\n         self.db_index = db_index\n         self.db_column = db_column\n+        self.db_comment = db_comment\n         self._db_tablespace = db_tablespace\n         self.auto_created = auto_created\n \n@@ -259,6 +261,7 @@ def check(self, **kwargs):\n             *self._check_field_name(),\n             *self._check_choices(),\n             *self._check_db_index(),\n+            *self._check_db_comment(**kwargs),\n             *self._check_null_allowed_for_primary_keys(),\n             *self._check_backend_specific_checks(**kwargs),\n             *self._check_validators(),\n@@ -385,6 +388,28 @@ def _check_db_index(self):\n         else:\n             return []\n \n+    def _check_db_comment(self, databases=None, **kwargs):\n+        if not self.db_comment or not databases:\n+            return []\n+        errors = []\n+        for db in databases:\n+            if not router.allow_migrate_model(db, self.model):\n+                continue\n+            connection = connections[db]\n+            if not (\n+                connection.features.supports_comments\n+                or \"supports_comments\" in self.model._meta.required_db_features\n+            ):\n+                errors.append(\n+                    checks.Warning(\n+                        f\"{connection.display_name} does not support comments on \"\n+                        f\"columns (db_comment).\",\n+                        obj=self,\n+                        id=\"fields.W163\",\n+                    )\n+                )\n+        return errors\n+\n     def _check_null_allowed_for_primary_keys(self):\n         if (\n             self.primary_key\n@@ -538,6 +563,7 @@ def deconstruct(self):\n             \"choices\": None,\n             \"help_text\": \"\",\n             \"db_column\": None,\n+            \"db_comment\": None,\n             \"db_tablespace\": None,\n             \"auto_created\": False,\n             \"validators\": [],\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1428,6 +1428,14 @@ def _check_ignored_options(self, **kwargs):\n                     id=\"fields.W345\",\n                 )\n             )\n+        if self.db_comment:\n+            warnings.append(\n+                checks.Warning(\n+                    \"db_comment has no effect on ManyToManyField.\",\n+                    obj=self,\n+                    id=\"fields.W346\",\n+                )\n+            )\n \n         return warnings\n \ndiff --git a/django/db/models/options.py b/django/db/models/options.py\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -30,6 +30,7 @@\n     \"verbose_name\",\n     \"verbose_name_plural\",\n     \"db_table\",\n+    \"db_table_comment\",\n     \"ordering\",\n     \"unique_together\",\n     \"permissions\",\n@@ -112,6 +113,7 @@ def __init__(self, meta, app_label=None):\n         self.verbose_name = None\n         self.verbose_name_plural = None\n         self.db_table = \"\"\n+        self.db_table_comment = \"\"\n         self.ordering = []\n         self._ordering_clash = False\n         self.indexes = []\n",
  "test_patch": "diff --git a/tests/inspectdb/models.py b/tests/inspectdb/models.py\n--- a/tests/inspectdb/models.py\n+++ b/tests/inspectdb/models.py\n@@ -132,3 +132,11 @@ class Meta:\n             )\n         ]\n         required_db_features = {\"supports_expression_indexes\"}\n+\n+\n+class DbComment(models.Model):\n+    rank = models.IntegerField(db_comment=\"'Rank' column comment\")\n+\n+    class Meta:\n+        db_table_comment = \"Custom table comment\"\n+        required_db_features = {\"supports_comments\"}\ndiff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -129,6 +129,24 @@ def test_json_field(self):\n             \"null_json_field = models.JSONField(blank=True, null=True)\", output\n         )\n \n+    @skipUnlessDBFeature(\"supports_comments\")\n+    def test_db_comments(self):\n+        out = StringIO()\n+        call_command(\"inspectdb\", \"inspectdb_dbcomment\", stdout=out)\n+        output = out.getvalue()\n+        integer_field_type = connection.features.introspected_field_types[\n+            \"IntegerField\"\n+        ]\n+        self.assertIn(\n+            f\"rank = models.{integer_field_type}(\"\n+            f\"db_comment=\\\"'Rank' column comment\\\")\",\n+            output,\n+        )\n+        self.assertIn(\n+            \"        db_table_comment = 'Custom table comment'\",\n+            output,\n+        )\n+\n     @skipUnlessDBFeature(\"supports_collation_on_charfield\")\n     @skipUnless(test_collation, \"Language collations are not supported.\")\n     def test_char_field_db_collation(self):\ndiff --git a/tests/introspection/models.py b/tests/introspection/models.py\n--- a/tests/introspection/models.py\n+++ b/tests/introspection/models.py\n@@ -102,3 +102,11 @@ class Meta:\n                 condition=models.Q(color__isnull=True),\n             ),\n         ]\n+\n+\n+class DbCommentModel(models.Model):\n+    name = models.CharField(max_length=15, db_comment=\"'Name' column comment\")\n+\n+    class Meta:\n+        db_table_comment = \"Custom table comment\"\n+        required_db_features = {\"supports_comments\"}\ndiff --git a/tests/introspection/tests.py b/tests/introspection/tests.py\n--- a/tests/introspection/tests.py\n+++ b/tests/introspection/tests.py\n@@ -9,6 +9,7 @@\n     City,\n     Comment,\n     Country,\n+    DbCommentModel,\n     District,\n     Reporter,\n     UniqueConstraintConditionModel,\n@@ -179,6 +180,26 @@ def test_smallautofield(self):\n             [connection.introspection.get_field_type(r[1], r) for r in desc],\n         )\n \n+    @skipUnlessDBFeature(\"supports_comments\")\n+    def test_db_comments(self):\n+        with connection.cursor() as cursor:\n+            desc = connection.introspection.get_table_description(\n+                cursor, DbCommentModel._meta.db_table\n+            )\n+            table_list = connection.introspection.get_table_list(cursor)\n+        self.assertEqual(\n+            [\"'Name' column comment\"],\n+            [field.comment for field in desc if field.name == \"name\"],\n+        )\n+        self.assertEqual(\n+            [\"Custom table comment\"],\n+            [\n+                table.comment\n+                for table in table_list\n+                if table.name == \"introspection_dbcommentmodel\"\n+            ],\n+        )\n+\n     # Regression test for #9991 - 'real' types in postgres\n     @skipUnlessDBFeature(\"has_real_datatype\")\n     def test_postgresql_real_type(self):\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1872,6 +1872,37 @@ def dummy_function(*args, **kwargs):\n         )\n \n \n+@isolate_apps(\"invalid_models_tests\")\n+class DbTableCommentTests(TestCase):\n+    def test_db_table_comment(self):\n+        class Model(models.Model):\n+            class Meta:\n+                db_table_comment = \"Table comment\"\n+\n+        errors = Model.check(databases=self.databases)\n+        expected = (\n+            []\n+            if connection.features.supports_comments\n+            else [\n+                Warning(\n+                    f\"{connection.display_name} does not support comments on tables \"\n+                    f\"(db_table_comment).\",\n+                    obj=Model,\n+                    id=\"models.W046\",\n+                ),\n+            ]\n+        )\n+        self.assertEqual(errors, expected)\n+\n+    def test_db_table_comment_required_db_features(self):\n+        class Model(models.Model):\n+            class Meta:\n+                db_table_comment = \"Table comment\"\n+                required_db_features = {\"supports_comments\"}\n+\n+        self.assertEqual(Model.check(databases=self.databases), [])\n+\n+\n class MultipleAutoFieldsTests(TestCase):\n     def test_multiple_autofields(self):\n         msg = (\ndiff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -1023,3 +1023,35 @@ class Model(models.Model):\n             field = models.JSONField(default=callable_default)\n \n         self.assertEqual(Model._meta.get_field(\"field\").check(), [])\n+\n+\n+@isolate_apps(\"invalid_models_tests\")\n+class DbCommentTests(TestCase):\n+    def test_db_comment(self):\n+        class Model(models.Model):\n+            field = models.IntegerField(db_comment=\"Column comment\")\n+\n+        errors = Model._meta.get_field(\"field\").check(databases=self.databases)\n+        expected = (\n+            []\n+            if connection.features.supports_comments\n+            else [\n+                DjangoWarning(\n+                    f\"{connection.display_name} does not support comments on columns \"\n+                    f\"(db_comment).\",\n+                    obj=Model._meta.get_field(\"field\"),\n+                    id=\"fields.W163\",\n+                ),\n+            ]\n+        )\n+        self.assertEqual(errors, expected)\n+\n+    def test_db_comment_required_db_features(self):\n+        class Model(models.Model):\n+            field = models.IntegerField(db_comment=\"Column comment\")\n+\n+            class Meta:\n+                required_db_features = {\"supports_comments\"}\n+\n+        errors = Model._meta.get_field(\"field\").check(databases=self.databases)\n+        self.assertEqual(errors, [])\ndiff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -94,7 +94,9 @@ class Model(models.Model):\n             name = models.CharField(max_length=20)\n \n         class ModelM2M(models.Model):\n-            m2m = models.ManyToManyField(Model, null=True, validators=[lambda x: x])\n+            m2m = models.ManyToManyField(\n+                Model, null=True, validators=[lambda x: x], db_comment=\"Column comment\"\n+            )\n \n         field = ModelM2M._meta.get_field(\"m2m\")\n         self.assertEqual(\n@@ -110,6 +112,11 @@ class ModelM2M(models.Model):\n                     obj=field,\n                     id=\"fields.W341\",\n                 ),\n+                DjangoWarning(\n+                    \"db_comment has no effect on ManyToManyField.\",\n+                    obj=field,\n+                    id=\"fields.W346\",\n+                ),\n             ],\n         )\n \ndiff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -773,6 +773,14 @@ class AutodetectorTests(BaseAutodetectorTests):\n             \"verbose_name\": \"Authi\",\n         },\n     )\n+    author_with_db_table_comment = ModelState(\n+        \"testapp\",\n+        \"Author\",\n+        [\n+            (\"id\", models.AutoField(primary_key=True)),\n+        ],\n+        {\"db_table_comment\": \"Table comment\"},\n+    )\n     author_with_db_table_options = ModelState(\n         \"testapp\",\n         \"Author\",\n@@ -2349,6 +2357,58 @@ def test_alter_db_table_with_model_change(self):\n             changes, \"testapp\", 0, 1, name=\"newauthor\", table=\"author_three\"\n         )\n \n+    def test_alter_db_table_comment_add(self):\n+        changes = self.get_changes(\n+            [self.author_empty], [self.author_with_db_table_comment]\n+        )\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(changes, \"testapp\", 0, [\"AlterModelTableComment\"])\n+        self.assertOperationAttributes(\n+            changes, \"testapp\", 0, 0, name=\"author\", table_comment=\"Table comment\"\n+        )\n+\n+    def test_alter_db_table_comment_change(self):\n+        author_with_new_db_table_comment = ModelState(\n+            \"testapp\",\n+            \"Author\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ],\n+            {\"db_table_comment\": \"New table comment\"},\n+        )\n+        changes = self.get_changes(\n+            [self.author_with_db_table_comment],\n+            [author_with_new_db_table_comment],\n+        )\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(changes, \"testapp\", 0, [\"AlterModelTableComment\"])\n+        self.assertOperationAttributes(\n+            changes,\n+            \"testapp\",\n+            0,\n+            0,\n+            name=\"author\",\n+            table_comment=\"New table comment\",\n+        )\n+\n+    def test_alter_db_table_comment_remove(self):\n+        changes = self.get_changes(\n+            [self.author_with_db_table_comment],\n+            [self.author_empty],\n+        )\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(changes, \"testapp\", 0, [\"AlterModelTableComment\"])\n+        self.assertOperationAttributes(\n+            changes, \"testapp\", 0, 0, name=\"author\", db_table_comment=None\n+        )\n+\n+    def test_alter_db_table_comment_no_changes(self):\n+        changes = self.get_changes(\n+            [self.author_with_db_table_comment],\n+            [self.author_with_db_table_comment],\n+        )\n+        self.assertNumberMigrations(changes, \"testapp\", 0)\n+\n     def test_identical_regex_doesnt_alter(self):\n         from_state = ModelState(\n             \"testapp\",\ndiff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -75,6 +75,20 @@ def _get_column_collation(self, table, column, using):\n     def assertColumnCollation(self, table, column, collation, using=\"default\"):\n         self.assertEqual(self._get_column_collation(table, column, using), collation)\n \n+    def _get_table_comment(self, table, using):\n+        with connections[using].cursor() as cursor:\n+            return next(\n+                t.comment\n+                for t in connections[using].introspection.get_table_list(cursor)\n+                if t.name == table\n+            )\n+\n+    def assertTableComment(self, table, comment, using=\"default\"):\n+        self.assertEqual(self._get_table_comment(table, using), comment)\n+\n+    def assertTableCommentNotExists(self, table, using=\"default\"):\n+        self.assertIn(self._get_table_comment(table, using), [None, \"\"])\n+\n     def assertIndexExists(\n         self, table, columns, value=True, using=\"default\", index_type=None\n     ):\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1922,6 +1922,37 @@ def test_alter_field_add_db_column_noop(self):\n                 operation.database_forwards(app_label, editor, new_state, project_state)\n         self.assertColumnExists(rider_table, \"pony_id\")\n \n+    @skipUnlessDBFeature(\"supports_comments\")\n+    def test_alter_model_table_comment(self):\n+        app_label = \"test_almotaco\"\n+        project_state = self.set_up_test_model(app_label)\n+        pony_table = f\"{app_label}_pony\"\n+        # Add table comment.\n+        operation = migrations.AlterModelTableComment(\"Pony\", \"Custom pony comment\")\n+        self.assertEqual(operation.describe(), \"Alter Pony table comment\")\n+        self.assertEqual(operation.migration_name_fragment, \"alter_pony_table_comment\")\n+        new_state = project_state.clone()\n+        operation.state_forwards(app_label, new_state)\n+        self.assertEqual(\n+            new_state.models[app_label, \"pony\"].options[\"db_table_comment\"],\n+            \"Custom pony comment\",\n+        )\n+        self.assertTableCommentNotExists(pony_table)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertTableComment(pony_table, \"Custom pony comment\")\n+        # Reversal.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertTableCommentNotExists(pony_table)\n+        # Deconstruction.\n+        definition = operation.deconstruct()\n+        self.assertEqual(definition[0], \"AlterModelTableComment\")\n+        self.assertEqual(definition[1], [])\n+        self.assertEqual(\n+            definition[2], {\"name\": \"Pony\", \"table_comment\": \"Custom pony comment\"}\n+        )\n+\n     def test_alter_field_pk(self):\n         \"\"\"\n         The AlterField operation on primary keys (things like PostgreSQL's\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -273,6 +273,27 @@ def get_column_collation(self, table, column):\n                 if f.name == column\n             )\n \n+    def get_column_comment(self, table, column):\n+        with connection.cursor() as cursor:\n+            return next(\n+                f.comment\n+                for f in connection.introspection.get_table_description(cursor, table)\n+                if f.name == column\n+            )\n+\n+    def get_table_comment(self, table):\n+        with connection.cursor() as cursor:\n+            return next(\n+                t.comment\n+                for t in connection.introspection.get_table_list(cursor)\n+                if t.name == table\n+            )\n+\n+    def assert_column_comment_not_exists(self, table, column):\n+        with connection.cursor() as cursor:\n+            columns = connection.introspection.get_table_description(cursor, table)\n+        self.assertFalse(any([c.name == column and c.comment for c in columns]))\n+\n     def assertIndexOrder(self, table, index, order):\n         constraints = self.get_constraints(table)\n         self.assertIn(index, constraints)\n@@ -4390,6 +4411,186 @@ def test_add_unique_charfield(self):\n             ],\n         )\n \n+    @skipUnlessDBFeature(\"supports_comments\")\n+    def test_add_db_comment_charfield(self):\n+        comment = \"Custom comment\"\n+        field = CharField(max_length=255, db_comment=comment)\n+        field.set_attributes_from_name(\"name_with_comment\")\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.add_field(Author, field)\n+        self.assertEqual(\n+            self.get_column_comment(Author._meta.db_table, \"name_with_comment\"),\n+            comment,\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_comments\")\n+    def test_add_db_comment_and_default_charfield(self):\n+        comment = \"Custom comment with default\"\n+        field = CharField(max_length=255, default=\"Joe Doe\", db_comment=comment)\n+        field.set_attributes_from_name(\"name_with_comment_default\")\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            Author.objects.create(name=\"Before adding a new field\")\n+            editor.add_field(Author, field)\n+\n+        self.assertEqual(\n+            self.get_column_comment(Author._meta.db_table, \"name_with_comment_default\"),\n+            comment,\n+        )\n+        with connection.cursor() as cursor:\n+            cursor.execute(\n+                f\"SELECT name_with_comment_default FROM {Author._meta.db_table};\"\n+            )\n+            for row in cursor.fetchall():\n+                self.assertEqual(row[0], \"Joe Doe\")\n+\n+    @skipUnlessDBFeature(\"supports_comments\")\n+    def test_alter_db_comment(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Add comment.\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(max_length=255, db_comment=\"Custom comment\")\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        self.assertEqual(\n+            self.get_column_comment(Author._meta.db_table, \"name\"),\n+            \"Custom comment\",\n+        )\n+        # Alter comment.\n+        old_field = new_field\n+        new_field = CharField(max_length=255, db_comment=\"New custom comment\")\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        self.assertEqual(\n+            self.get_column_comment(Author._meta.db_table, \"name\"),\n+            \"New custom comment\",\n+        )\n+        # Remove comment.\n+        old_field = new_field\n+        new_field = CharField(max_length=255)\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        self.assertIn(\n+            self.get_column_comment(Author._meta.db_table, \"name\"),\n+            [None, \"\"],\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_comments\", \"supports_foreign_keys\")\n+    def test_alter_db_comment_foreign_key(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Book)\n+\n+        comment = \"FK custom comment\"\n+        old_field = Book._meta.get_field(\"author\")\n+        new_field = ForeignKey(Author, CASCADE, db_comment=comment)\n+        new_field.set_attributes_from_name(\"author\")\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Book, old_field, new_field, strict=True)\n+        self.assertEqual(\n+            self.get_column_comment(Book._meta.db_table, \"author_id\"),\n+            comment,\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_comments\")\n+    def test_alter_field_type_preserve_comment(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+\n+        comment = \"This is the name.\"\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(max_length=255, db_comment=comment)\n+        new_field.set_attributes_from_name(\"name\")\n+        new_field.model = Author\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        self.assertEqual(\n+            self.get_column_comment(Author._meta.db_table, \"name\"),\n+            comment,\n+        )\n+        # Changing a field type should preserve the comment.\n+        old_field = new_field\n+        new_field = CharField(max_length=511, db_comment=comment)\n+        new_field.set_attributes_from_name(\"name\")\n+        new_field.model = Author\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+        # Comment is preserved.\n+        self.assertEqual(\n+            self.get_column_comment(Author._meta.db_table, \"name\"),\n+            comment,\n+        )\n+\n+    @isolate_apps(\"schema\")\n+    @skipUnlessDBFeature(\"supports_comments\")\n+    def test_db_comment_table(self):\n+        class ModelWithDbTableComment(Model):\n+            class Meta:\n+                app_label = \"schema\"\n+                db_table_comment = \"Custom table comment\"\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(ModelWithDbTableComment)\n+        self.isolated_local_models = [ModelWithDbTableComment]\n+        self.assertEqual(\n+            self.get_table_comment(ModelWithDbTableComment._meta.db_table),\n+            \"Custom table comment\",\n+        )\n+        # Alter table comment.\n+        old_db_table_comment = ModelWithDbTableComment._meta.db_table_comment\n+        with connection.schema_editor() as editor:\n+            editor.alter_db_table_comment(\n+                ModelWithDbTableComment, old_db_table_comment, \"New table comment\"\n+            )\n+        self.assertEqual(\n+            self.get_table_comment(ModelWithDbTableComment._meta.db_table),\n+            \"New table comment\",\n+        )\n+        # Remove table comment.\n+        old_db_table_comment = ModelWithDbTableComment._meta.db_table_comment\n+        with connection.schema_editor() as editor:\n+            editor.alter_db_table_comment(\n+                ModelWithDbTableComment, old_db_table_comment, None\n+            )\n+        self.assertIn(\n+            self.get_table_comment(ModelWithDbTableComment._meta.db_table),\n+            [None, \"\"],\n+        )\n+\n+    @isolate_apps(\"schema\")\n+    @skipUnlessDBFeature(\"supports_comments\", \"supports_foreign_keys\")\n+    def test_db_comments_from_abstract_model(self):\n+        class AbstractModelWithDbComments(Model):\n+            name = CharField(\n+                max_length=255, db_comment=\"Custom comment\", null=True, blank=True\n+            )\n+\n+            class Meta:\n+                app_label = \"schema\"\n+                abstract = True\n+                db_table_comment = \"Custom table comment\"\n+\n+        class ModelWithDbComments(AbstractModelWithDbComments):\n+            pass\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(ModelWithDbComments)\n+        self.isolated_local_models = [ModelWithDbComments]\n+\n+        self.assertEqual(\n+            self.get_column_comment(ModelWithDbComments._meta.db_table, \"name\"),\n+            \"Custom comment\",\n+        )\n+        self.assertEqual(\n+            self.get_table_comment(ModelWithDbComments._meta.db_table),\n+            \"Custom table comment\",\n+        )\n+\n     @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific\")\n     def test_alter_field_add_index_to_charfield(self):\n         # Create the table and verify no initial indexes.\n",
  "problem_statement": "Add the ability to define comments in table / columns\nDescription\n\t \n\t\t(last modified by Jared Chung)\n\t \nDatabase-level comments are valuable for database administrators, data analysts, data scientists, and others who are looking to consume data that is managed by Django. Most Django-supported databases also support table-level and column-level comments. This ticket would add functionality to Django to allow Django users to specify comments for syncdb manage.py to enter into the database.\n....\n....\nnew proposal (kimsoungryoul : 2020.03.23)\nWe will develop the code such as below\nclass AModel(models.Model):\n\t aaa = model.CharField(help_text=\"i am help_text\", db_column_comment=\"i am db_comment\",~~~)\n\t \n\t class Meta:\n\t\t db_table = \"a_model_example_name\"\n\t\t db_table_comment =\"this is a_model comment ~~~~\"\n",
  "hints_text": "Initial implementation for postgresql_psycopg2 backend: \u200bhttps://github.com/niwibe/django/compare/issue_18468 Is only implemented the table comment sql. If accepted as a new feature, would be nice to make design decisions. Today I put the comment for table in class \"Meta\", another option is to use the first line of the model docstrings. For fields, is more simple, just add an optional parameter \"comment\" at the Field.\nThis is a duplicate of #13867, which lingered in DDN for two years until I wontfix'd it. The only argument I've seen is \"it'd be nice if...\". But I'm against adding features to Django just because we can; there must be a use case. Could you start a thread on the mailing-list, as recommended in the \u200bcontributing guide, to see if there is support for this idea? If there's a good explanation of why you need this, I can reconsider my decision.\nI understand your opinion! In any case, I'll write an email to the list which I think is useful. Thanks!\nI assume that most databases have comment on fields / tables feature not just because it is nice. Accessing Django created tables from another tool (for instance pgAdmin) would just make the system more productive. Personally I never create SQL tables without proper comments in the database itself.\nThe reasons given on #13867 still stand \u2014 Django is not aiming to provide a wrapper for every SQL feature. For example, it also doesn't provide an easy way to create stored procedures, functions or views, but you can always execute the SQL manually to add these, or could add some additional Python code that executed the SQL \u2014 for example using a South migration \u2014 if you want to ensure it always happens. In addition, if the audience of these comments is people administering the database without reading the Python source code, it doesn't make sense for these comments to be taking up space in the Python code, which has its own way of adding comments (docstrings and comment lines), which are targeted at programmers not DB admins.\nNow that migration is built in Django, which can be used to create and administer the database, I again request this feature to be added. Thanks.\nThe correct way to reopen a ticket closed as \"wontfix\" is to start a discussion on the DevelopersMailingList. If there is consensus there to add the feature, then we reopen the ticket.\nAfter discussion on mailing list, the feature is good and can be added. (\u200bhttps://groups.google.com/forum/?nomobile=true#!topic/django-developers/guVTzO3RhUs) I'll prepare patch for review.\nI guess the model field option could be called db_column_comment. I closed #28407 (introspecting column comments) as a duplicate since that should be implemented as part of this.\nReplying to Tim Graham: I guess the model field option could be called db_column_comment. I closed #28407 (introspecting column comments) as a duplicate since that should be implemented as part of this. I think that we don't need new param, because comment for django admin may be useful to store in database. But I can't decide on implementation, can you give me an advice? Postgres and oracle have a syntax like comment on {table}.{column} for storing comments, so this needs to be done after table/column creation, so there are two ways: Add it to post migrate signal, as for content types. But I can implement it as a third-party lib Add this SQL after database creation in schema.py Which way is better?\nI'm not sure what you mean by \"comment for django admin\". There isn't an existing option with that name. As for the implementation, the second approach sounds better.\nReplying to Ivan Chernoff: After discussion on mailing list, the feature is good and can be added. (\u200bhttps://groups.google.com/forum/?nomobile=true#!topic/django-developers/guVTzO3RhUs) I'll prepare patch for review. Any news on this patch? It looks like there is a green light for one, and Tim already answered about the preferable approach. Do you need any help on making this hapen? It would be a fantastic feature for Django!\nReplying to Rodrigo Silva: Replying to Ivan Chernoff: After discussion on mailing list, the feature is good and can be added. (\u200bhttps://groups.google.com/forum/?nomobile=true#!topic/django-developers/guVTzO3RhUs) I'll prepare patch for review. Any news on this patch? It looks like there is a green light for one, and Tim already answered about the preferable approach. Do you need any help on making this hapen? It would be a fantastic feature for Django! I've a small library based on contenttype design: on post-migrate it copies all comments to database (PostgreSQL only). \u200bhttps://github.com/vanadium23/django-db-comments\n\u200bPR\ni assign it to me i will close this pullRequest caused by imperfection \u200bhttps://github.com/django/django/pull/12605 I will bring a new PullRequest as soon as possible. in at least a week\nAdding a new setting is always a bit controversial. This should be discussed first on DevelopersMailingList. Personally I don't think that we need it.\ni agree. your opinion. i remove new settings. ENABLE_DB_COMMENT_WITH_HELP_TEXT AND i added few a more commit for support postgresql oracle\nhere is mail list for this feature \u200bhttps://groups.google.com/forum/?nomobile=true#!topic/django-developers/guVTzO3RhUs\nIf you don't mind me asking... could you give me a feedback to this feature?\nHi felixxm I want this feature to be reflected in Django.3.1 I know this feature that many people won't use. but some people who communicate with DBA would be helpful this feature sometimes ORM take control from DBA like these situation... DBAs: we want to know comment(help_text) not to *.py could you use COMMENT SQL in migrationFile? Developers: No, It's Impossible because django ORM does not support COMMENT SQL DBAs: ???? that means .. should we refer *.py file everytimes even though COMMENT SQL exists but can't use? DBAs: it's illogical!!!! Developers: but if we use COMMENT SQL, we customize everytimes to generate migrate files Developers: it's inefficient!!!! That's one of the reasons for avoiding ORM. If you don't mind me asking... could you give me a feedback to this feature?\nThis patch is not ready for a review. Docs and tests are still missing.\nRebased a previous PR to add support to inspectdb here: \u200bhttps://github.com/django/django/pull/13737 Still missing some tests and it looks like we would like it to be a verbose_name field and not a comment\nOwner updated based on suggestion in django-developers group \u200bhttps://groups.google.com/g/django-developers/c/guVTzO3RhUs\nStatus update: KimSoungRyoul has created a new PR (\u200bhere) that addresses some of the suggestions raised by atombrella in May 2020 on the previous PR (\u200bhere). Huge thanks to KimSoungRyoul for resuming work on this feature! The new PR is not complete yet. Still needed: 1) Test coverage. 2) Additional changes to the proposed docs including further explanation, a warning about lack of SQLite support, and a warning about overwriting comments made by DBAs in the db, versionadded annotation, and a couple other things. 3) Release note. 4) General code review, especially related to where sqlite warnings should be triggered in the code to avoid having hard-coded vendor names in django/db/models/base.py. Next steps: I'll add some suggestions directly to the new PR and post updates here as this PR progresses.\nUpdate: This feature is still being actively developed. KimSoungRyoul has been leading the development, and we've received input as well from knyghty on the PR. Docs and unit tests have been written, and right now we are discussing edge cases that need to be properly handled or explicitly \"unsupported\" (such as, for example, Django model classes or fields that Django doesn't actually create in the db such as M2M fields, proxy models, abstract base classes, and more).\nThis patch is ready for review. It meets everything on the checklist. I'm updating the status so it shows up in Patches Needing Review on the Development Dashboard. If you would like additional information about some of the design and implementation decisions behind this patch, please refer to the Github Pull Request conversation at \u200bhttps://github.com/django/django/pull/14463\nUpdate: This patch has been reviewed (refer to \u200bthis comment on the Github PR for the details on the patch review checklist for this patch). I have marked it \"Ready for checkin\" Note: Although I am the owner of this ticket, I am NOT the author of this patch. The author of the patch is KimSoungRyoul. Because I am not the author, I conducted the patch review using \u200bthe patch review checklist.\nMay I change assignee to me? perhaps is there any problem?\nStatus update: KSR has updated the patch on github \u200bhttps://github.com/django/django/pull/14463 and there's continued discussion there, including additional changes proposed by other community members...",
  "created_at": "2021-05-29T04:34:26Z",
  "version": "4.2",
  "FAIL_TO_PASS": "[\"#22030 - Adding a field with a default should work.\", \"#22275 - A migration with circular FK dependency does not try\", \"#22300 - Adding an FK in the same \\\"spot\\\" as a deleted CharField should\", \"#22435 - Adding a ManyToManyField should not prompt for a default.\", \"#22951 -- Uninstantiated classes with deconstruct are correctly returned\", \"#23065 - Constraint names must be quoted if they contain capital letters.\", \"#23100 - ForeignKeys correctly depend on other apps' models.\", \"#23315 - The dependency resolver knows to put all CreateModel\", \"#23322 - The dependency resolver knows to explicitly resolve\", \"#23405 - Adding a NOT NULL and blank `CharField` or `TextField`\", \"#23405 - Adding a NOT NULL and non-blank `CharField` or `TextField`\", \"#23415 - The autodetector must correctly deal with custom FK on\", \"#23415 - The autodetector must correctly deal with custom FK on proxy\", \"#23426 - RunSQL should accept parameters.\", \"#23426 - RunSQL should fail when a list of statements with an incorrect\", \"#23609 - Tests autodetection of nullable to non-nullable alterations.\", \"#23609 - Tests handling of default values when altering from NULL to NOT NULL.\", \"#23738 - Can change a nullable field with default to non-nullable\", \"#23938 - Changing a ManyToManyField into a concrete field\", \"#23938 - Changing a concrete field into a ManyToManyField\", \"#23987 - effective_default() should be used as the field default when\", \"#24098 - Tests no-op RunPython operations.\", \"#24098 - Tests no-op RunSQL operations.\", \"#24163 - Tests altering of ForeignKey to OneToOneField\", \"#24163 - Tests altering of OneToOneField to ForeignKey\", \"#24282 - Model changes to a FK reverse side update the model\", \"#24307 - Should skip an alter statement on databases with\", \"#24447 - Tests adding a FK constraint for an existing column\", \"#24537 - The order of fields in a model does not influence\", \"#25002 - Test conversion of text field to date field.\", \"#25002 - Test conversion of text field to datetime field.\", \"#25002 - Test conversion of text field to time field.\", \"#25492 - Altering a foreign key's structure and data in the same\", \"#25723 - Referenced model registration lookup should be run against the\", \"#25723 - Through model registration lookup should be run against the\", \"A complex SeparateDatabaseAndState operation: Multiple operations both\", \"A dependency to an app with existing migrations uses the\", \"A dependency to an app with no migrations uses __first__.\", \"A field may be migrated from AutoField to BigAutoField.\", \"A field may be migrated from SmallAutoField to AutoField.\", \"A field may be migrated from SmallAutoField to BigAutoField.\", \"A migration with a FK between two models of the same app\", \"A migration with a FK between two models of the same app does\", \"A model with BigAutoField can be created.\", \"A model with a m2m field that specifies a \\\"through\\\" model cannot be\", \"A relation used as the primary key is kept as part of CreateModel.\", \"Add/RemoveIndex operations ignore swapped models.\", \"Added fields will be created before using them in index_together.\", \"Added fields will be created before using them in unique_together.\", \"Adding a field and removing it removes all deferred sql referring to it.\", \"Adding a m2m with a through model and the models that use it should be\", \"AlterField operation is a noop when adding only a db_column and the\", \"AlterField operation of db_collation on primary keys changes any FKs\", \"AlterModelTable should rename auto-generated M2M tables.\", \"Alter_db_table doesn't generate a migration if no changes have been made.\", \"Altering an FK to a non-FK works (#23244)\", \"Bases of other models come first.\", \"Bases of proxies come first.\", \"By default the command generates models with `Meta.managed = False`.\", \"Changing a field type shouldn't affect the not null status.\", \"Changing a model's options should make a change.\", \"Changing a proxy model's options should also make a change.\", \"Changing db_index to False doesn't remove indexes from Meta.indexes.\", \"Changing the model managers adds a new operation.\", \"Changing the primary key field name of a model with a self-referential\", \"Column names that are SQL keywords shouldn't cause problems when used\", \"CreateModel ignores proxy models.\", \"CreateModel ignores unmanaged models.\", \"Creating a FK to a proxy model creates database constraints.\", \"Creating and then altering an FK works correctly\", \"Creating tables out of FK order, then repointing, works\", \"Creation of models with a FK to a PK with db_collation.\", \"Empty index_together shouldn't generate a migration.\", \"Empty unique_together shouldn't generate a migration.\", \"Ensures transaction is correctly closed when an error occurs\", \"FK dependencies still work on proxy models.\", \"Field instances are handled correctly by nested deconstruction.\", \"Fields are altered after deleting some index_together.\", \"Fields are altered after deleting some unique_together.\", \"Fields are renamed before updating index_together.\", \"Fields are renamed before updating unique_together.\", \"Foreign keys without database level constraint don't prevent the field\", \"Foreign keys without database level constraint don't prevent the table\", \"ForeignKeys are altered _before_ the model they used to\", \"Having a ForeignKey automatically adds a dependency.\", \"Having a circular ForeignKey dependency automatically\", \"If AlterField doesn't reload state appropriately, the second AlterField\", \"If RenameField doesn't reload state appropriately, the AlterField\", \"If ``through_fields`` kwarg is given, it must specify both\", \"If two models with a ForeignKey from one to the other are removed at the\", \"Indexes defined with ordering (ASC/DESC) defined on column\", \"Indexes have the 'orders' key with a list of 'ASC'/'DESC' values.\", \"Inheriting models doesn't move *_ptr fields into AddField operations.\", \"Introspection errors should not crash the command, and the error should\", \"Introspection of column names consist/start with digits (#16536/#17676)\", \"Introspection of column names containing special characters,\", \"Introspection of columns with a custom field (#21090)\", \"Introspection of table names containing special characters,\", \"ManyToManyField accepts the ``through_fields`` kwarg\", \"Mixing up the order of link fields to ManyToManyField.through_fields\", \"Model name is case-insensitive. Changing case doesn't lead to any\", \"Nested deconstruction descends into dict values.\", \"Nested deconstruction descends into lists.\", \"Nested deconstruction descends into tuples.\", \"Nested deconstruction is applied recursively to the args/kwargs of\", \"No queries are performed when changing field attributes that don't\", \"Providing invalid field names to ManyToManyField.through_fields\", \"Ref #22047.\", \"Regression test for #21497.\", \"Regression test for #23009.\", \"Removed fields will be removed after updating index_together.\", \"Removed fields will be removed after updating unique_together.\", \"Removing a ManyToManyField and the \\\"through\\\" model in the same change\", \"Removing a base field takes place before adding a new inherited model\", \"Removing a model that contains a ManyToManyField and the \\\"through\\\" model\", \"Removing an FK and the model it targets in the same change must remove\", \"Removing order_with_respect_to when removing the FK too does\", \"RenameField is used if a field is renamed and db_column equal to the\", \"RenameModel operations shouldn't trigger the caching of rendered apps\", \"RenameModel renames a many-to-many column after a RenameField.\", \"Renaming a field shouldn't affect the not null status.\", \"Setting order_with_respect_to adds a field.\", \"Setting order_with_respect_to when adding the FK too does\", \"Setting order_with_respect_to when adding the whole model\", \"Should be able to convert an implicit \\\"id\\\" field to an explicit \\\"id\\\"\", \"Should be able to rename an IntegerField(primary_key=True) to\", \"Should be able to rename an SmallIntegerField(primary_key=True) to\", \"Swappable models get their CreateModel first.\", \"Table names are stripped of their namespace/schema before being used to\", \"Test AlterField operation with an index to ensure indexes created via\", \"Test change detection of new constraints.\", \"Test change detection of new indexes.\", \"Test change detection of removed constraints.\", \"Test change detection of removed indexes.\", \"Test change detection of reordering of fields in indexes.\", \"Test creation of new model with constraints already defined.\", \"Test creation of new model with indexes already defined.\", \"Test introspection of various Django field types\", \"Test the AddIndex operation.\", \"Test the RemoveIndex operation.\", \"Test the creation of a model with a ManyToMany field and the\", \"Tests adding fields to models\", \"Tests adding fields to models with a default that is not directly\", \"Tests adding fields to models with a temporary default\", \"Tests adding fields to models with a temporary default where\", \"Tests altering of FKs\", \"Tests altering of the primary key\", \"Tests auto-naming of migrations for graph matching.\", \"Tests autodetection of new fields.\", \"Tests autodetection of new models.\", \"Tests autodetection of removed fields.\", \"Tests autodetection of renamed fields.\", \"Tests autodetection of renamed models that are used in M2M relations as\", \"Tests autodetection of renamed models while simultaneously renaming one\", \"Tests autodetection of renamed models.\", \"Tests binary fields get a sane default (#22851)\", \"Tests creating models with index_together already defined\", \"Tests creating/deleting CHECK constraints\", \"Tests creation/altering of indexes\", \"Tests custom naming of migrations for graph matching.\", \"Tests deletion of old models.\", \"Tests detection for adding db_table in model's options.\", \"Tests detection for changing db_table in model's options'.\", \"Tests detection for removing db_table in model's options.\", \"Tests index addition and removal\", \"Tests removing and adding index_together constraints on a model.\", \"Tests removing and adding index_together constraints that include\", \"Tests removing and adding unique constraints to a single column.\", \"Tests removing and adding unique_together constraints on a model.\", \"Tests removing and adding unique_together constraints that include\", \"Tests renaming of the table\", \"Tests simple altering of fields\", \"Tests the AddField operation on TextField.\", \"Tests the AddField operation on TextField/BinaryField.\", \"Tests the AddField operation with a ManyToManyField.\", \"Tests the AddField operation's state alteration\", \"Tests the AddField operation.\", \"Tests the AlterField operation on primary keys changes any FKs pointing to it.\", \"Tests the AlterField operation.\", \"Tests the AlterIndexTogether operation.\", \"Tests the AlterModelOptions operation.\", \"Tests the AlterModelTable operation if the table name is not changed.\", \"Tests the AlterModelTable operation if the table name is set to None.\", \"Tests the AlterModelTable operation.\", \"Tests the AlterOrderWithRespectTo operation.\", \"Tests the AlterUniqueTogether operation.\", \"Tests the CreateModel operation directly followed by an\", \"Tests the CreateModel operation on a multi-table inheritance setup.\", \"Tests the CreateModel operation.\", \"Tests the DeleteModel operation ignores proxy models.\", \"Tests the DeleteModel operation ignores swapped models.\", \"Tests the DeleteModel operation.\", \"Tests the RemoveField operation on a foreign key.\", \"Tests the RemoveField operation.\", \"Tests the RenameField operation.\", \"Tests the RenameModel operation on a model which has a superclass that\", \"Tests the RenameModel operation on model with self referential FK.\", \"Tests the RenameModel operation.\", \"Tests the RunPython operation\", \"Tests the RunPython operation correctly handles the \\\"atomic\\\" keyword\", \"Tests the RunSQL operation.\", \"Tests the SeparateDatabaseAndState operation.\", \"Tests unique_together and field removal detection & ordering\", \"Tests unique_together detection.\", \"Tests when model and db_table changes, autodetector must create two\", \"Tests when model changes but db_table stays as-is, autodetector must not\", \"The AlterField operation on primary keys (things like PostgreSQL's\", \"The AlterModelOptions operation removes keys from the dict (#23121)\", \"The CreateTable operation ignores swapped models.\", \"The autodetector correctly deals with managed models.\", \"The autodetector correctly deals with proxy models.\", \"The db_constraint parameter is respected\", \"The managers on a model are set.\", \"The migration to rename a model pointed to by a foreign key in another\", \"Tries creating a model's table, and then deleting it when it has a\", \"Tries creating a model's table, and then deleting it.\", \"Trim does not remove dependencies but does remove unwanted apps.\", \"Two instances which deconstruct to the same value aren't considered a\", \"Two letters isn't a valid choice pair.\", \"When a primary key that's pointed to by a ForeignKey with\", \"effective_default() should be used for DateField, DateTimeField, and\", \"index_together doesn't generate a migration if no changes have been\", \"index_together triggers on ordering changes.\", \"inspectdb --include-views creates models for database views.\", \"inspectdb can inspect a subset of tables by passing the table names as\", \"test_accessor_clash (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_accessor_clash (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_add_auto_field (schema.tests.SchemaTests)\", \"test_add_constraint (migrations.test_operations.OperationTests)\", \"test_add_constraint_combinable (migrations.test_operations.OperationTests)\", \"test_add_constraint_percent_escaping (migrations.test_operations.OperationTests)\", \"test_add_covering_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_custom_fk_with_hardcoded_to (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_add_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_add_not_asking_for_null_addition (migrations.test_autodetector.AutodetectorTests)\", \"test_add_date_fields_with_auto_now_not_asking_for_default (migrations.test_autodetector.AutodetectorTests)\", \"test_add_deferred_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_field_db_collation (schema.tests.SchemaTests)\", \"test_add_field_default_dropped (schema.tests.SchemaTests)\", \"test_add_field_default_nullable (schema.tests.SchemaTests)\", \"test_add_field_durationfield_with_default (schema.tests.SchemaTests)\", \"test_add_field_o2o_nullable (schema.tests.SchemaTests)\", \"test_add_foreign_key_quoted_db_table (schema.tests.SchemaTests)\", \"test_add_foreign_object (schema.tests.SchemaTests)\", \"test_add_func_index (migrations.test_operations.OperationTests)\", \"test_add_func_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_add_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests)\", \"test_add_model_order_with_respect_to_index_constraint (migrations.test_autodetector.AutodetectorTests)\", \"test_add_model_order_with_respect_to_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests)\", \"test_add_model_order_with_respect_to_unique_together (migrations.test_autodetector.AutodetectorTests)\", \"test_add_or_constraint (migrations.test_operations.OperationTests)\", \"test_add_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_add_textfield_default_nullable (schema.tests.SchemaTests)\", \"test_add_textfield_unhashable_default (schema.tests.SchemaTests)\", \"test_alter_auto_field_quoted_db_column (schema.tests.SchemaTests)\", \"test_alter_auto_field_to_char_field (schema.tests.SchemaTests)\", \"test_alter_auto_field_to_integer_field (schema.tests.SchemaTests)\", \"test_alter_autofield_pk_to_bigautofield_pk (schema.tests.SchemaTests)\", \"test_alter_autofield_pk_to_smallautofield_pk (schema.tests.SchemaTests)\", \"test_alter_db_table_case (schema.tests.SchemaTests)\", \"test_alter_db_table_comment_add (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_db_table_comment_change (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_db_table_comment_no_changes (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_db_table_comment_remove (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_add_index_to_integerfield (schema.tests.SchemaTests)\", \"test_alter_field_choices_noop (schema.tests.SchemaTests)\", \"test_alter_field_db_collation (schema.tests.SchemaTests)\", \"test_alter_field_default_dropped (schema.tests.SchemaTests)\", \"test_alter_field_fk_keeps_index (schema.tests.SchemaTests)\", \"test_alter_field_fk_to_o2o (schema.tests.SchemaTests)\", \"test_alter_field_m2m (migrations.test_operations.OperationTests)\", \"test_alter_field_o2o_keeps_unique (schema.tests.SchemaTests)\", \"test_alter_field_o2o_to_fk (schema.tests.SchemaTests)\", \"test_alter_field_pk_fk_char_to_int (migrations.test_operations.OperationTests)\", \"test_alter_field_pk_mti_and_fk_to_base (migrations.test_operations.OperationTests)\", \"test_alter_field_pk_mti_fk (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests)\", \"test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests)\", \"test_alter_field_to_fk_dependency_other_app (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_field_type_and_db_collation (schema.tests.SchemaTests)\", \"test_alter_field_type_preserve_db_collation (schema.tests.SchemaTests)\", \"test_alter_field_with_func_index (migrations.test_operations.OperationTests)\", \"test_alter_field_with_func_unique_constraint (migrations.test_operations.OperationTests)\", \"test_alter_index_together_remove (migrations.test_operations.OperationTests)\", \"test_alter_index_together_remove_with_unique_together (migrations.test_operations.OperationTests)\", \"test_alter_many_to_many (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_model_table_m2m_field (migrations.test_operations.OperationTests)\", \"test_alter_not_unique_field_to_primary_key (schema.tests.SchemaTests)\", \"test_alter_null_with_default_value_deferred_constraints (schema.tests.SchemaTests)\", \"test_alter_primary_key_db_collation (schema.tests.SchemaTests)\", \"test_alter_primary_key_quoted_db_table (schema.tests.SchemaTests)\", \"test_alter_primary_key_the_same_name (schema.tests.SchemaTests)\", \"test_alter_regex_string_to_compiled_regex (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_text_field (schema.tests.SchemaTests)\", \"test_alter_text_field_to_not_null_with_default_value (schema.tests.SchemaTests)\", \"test_alter_unique_together_fk_to_m2m (migrations.test_autodetector.AutodetectorTests)\", \"test_alter_unique_together_remove (migrations.test_operations.OperationTests)\", \"test_ambiguous_relationship_model_from (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_ambiguous_relationship_model_to (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_arrange_for_graph_with_multiple_initial (migrations.test_autodetector.AutodetectorTests)\", \"test_attribute_name_not_python_keyword (inspectdb.tests.InspectDBTestCase)\", \"test_auto (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_auto_now_and_auto_now_add_raise_error (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_autofield_to_o2o (schema.tests.SchemaTests)\", \"test_bad_db_index_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_bad_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_bad_validators (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_bad_values_of_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_bases_first_mixed_case_app_label (migrations.test_autodetector.AutodetectorTests)\", \"test_bigautofield (introspection.tests.IntrospectionTests)\", \"test_char_field_db_collation (inspectdb.tests.InspectDBTestCase)\", \"test_char_field_pk_to_auto_field (schema.tests.SchemaTests)\", \"test_char_field_with_db_index_to_fk (schema.tests.SchemaTests)\", \"test_check_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_joined_fields (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_joined_fields_complex_check (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_pk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_reverse_fk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_pointing_to_reverse_o2o (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_raw_sql_check (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraint_timedelta_param (schema.tests.SchemaTests)\", \"test_check_constraints (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_constraints_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_check_jsonfield (invalid_models_tests.test_models.JSONFieldTests)\", \"test_check_jsonfield_required_db_features (invalid_models_tests.test_models.JSONFieldTests)\", \"test_choices_containing_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_containing_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_in_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group (invalid_models_tests.test_ordinary_fields.UUIDFieldTests)\", \"test_choices_named_group_bad_structure (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_lazy (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_choices_named_group_non_pairs (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_ci_cs_db_collation (schema.tests.SchemaTests)\", \"test_clash_between_accessors (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_clash_between_accessors (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_clash_parent_link (invalid_models_tests.test_relative_fields.ComplexClashTests)\", \"test_clash_under_explicit_related_name (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_clash_under_explicit_related_name (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_complex_clash (invalid_models_tests.test_relative_fields.ComplexClashTests)\", \"test_composed_check_constraint_with_fk (schema.tests.SchemaTests)\", \"test_composed_constraint_with_fk (schema.tests.SchemaTests)\", \"test_composed_desc_func_index_with_fk (schema.tests.SchemaTests)\", \"test_composed_desc_index_with_fk (schema.tests.SchemaTests)\", \"test_composed_func_index_with_fk (schema.tests.SchemaTests)\", \"test_composed_func_transform_index_with_fk (schema.tests.SchemaTests)\", \"test_composed_index_with_fk (schema.tests.SchemaTests)\", \"test_composite_func_index (schema.tests.SchemaTests)\", \"test_composite_func_index_field_and_expression (schema.tests.SchemaTests)\", \"test_composite_func_unique_constraint (schema.tests.SchemaTests)\", \"test_composite_primary_key (inspectdb.tests.InspectDBTransactionalTests)\", \"test_create_model_and_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests)\", \"test_create_model_and_unique_together (migrations.test_autodetector.AutodetectorTests)\", \"test_create_model_with_boolean_expression_in_check_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_deferred_unique_constraint (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_base (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests)\", \"test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_create_with_through_model_separate_apps (migrations.test_autodetector.AutodetectorTests)\", \"test_db_collation (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_db_collation (invalid_models_tests.test_ordinary_fields.TextFieldTests)\", \"test_db_collation_charfield (schema.tests.SchemaTests)\", \"test_db_collation_required_db_features (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_db_collation_required_db_features (invalid_models_tests.test_ordinary_fields.TextFieldTests)\", \"test_db_collation_textfield (schema.tests.SchemaTests)\", \"test_db_column_clash (invalid_models_tests.test_models.FieldNamesTests)\", \"test_db_comment (invalid_models_tests.test_ordinary_fields.DbCommentTests)\", \"test_db_comment_required_db_features (invalid_models_tests.test_ordinary_fields.DbCommentTests)\", \"test_db_table_comment (invalid_models_tests.test_models.DbTableCommentTests)\", \"test_db_table_comment_required_db_features (invalid_models_tests.test_models.DbTableCommentTests)\", \"test_decimal_places_greater_than_max_digits (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_default_related_name_option (migrations.test_autodetector.AutodetectorTests)\", \"test_deferrable_unique_constraint (invalid_models_tests.test_models.ConstraintsTests)\", \"test_deferrable_unique_constraint_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_delete_mti_model (migrations.test_operations.OperationTests)\", \"test_different_regex_does_alter (migrations.test_autodetector.AutodetectorTests)\", \"test_django_table_names (introspection.tests.IntrospectionTests)\", \"test_django_table_names_retval_type (introspection.tests.IntrospectionTests)\", \"test_ending_with_underscore (invalid_models_tests.test_models.FieldNamesTests)\", \"test_field_name_clash_with_child_accessor (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_field_name_clash_with_m2m_through (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests)\", \"test_fix_default_value (invalid_models_tests.test_ordinary_fields.TimeFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.DateTimeFieldTests)\", \"test_fix_default_value_tz (invalid_models_tests.test_ordinary_fields.TimeFieldTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_fk (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_integer (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_fk_to_m2m (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_forbidden_files_and_folders (invalid_models_tests.test_ordinary_fields.FilePathFieldTests)\", \"test_foreign_key_to_abstract_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_field (inspectdb.tests.InspectDBTestCase)\", \"test_foreign_key_to_missing_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_non_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_non_unique_field_under_explicit_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_partially_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_key_to_unique_field_with_meta_constraint (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_non_unique_fields (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_partially_unique_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_foreign_object_to_unique_field_with_meta_constraint (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_func_index (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index (schema.tests.SchemaTests)\", \"test_func_index_calc (schema.tests.SchemaTests)\", \"test_func_index_cast (schema.tests.SchemaTests)\", \"test_func_index_collate (schema.tests.SchemaTests)\", \"test_func_index_collate_f_ordered (schema.tests.SchemaTests)\", \"test_func_index_complex_expression_custom_lookup (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_f (schema.tests.SchemaTests)\", \"test_func_index_f_decimalfield (schema.tests.SchemaTests)\", \"test_func_index_invalid_topmost_expressions (schema.tests.SchemaTests)\", \"test_func_index_json_key_transform (schema.tests.SchemaTests)\", \"test_func_index_json_key_transform_cast (schema.tests.SchemaTests)\", \"test_func_index_lookups (schema.tests.SchemaTests)\", \"test_func_index_multiple_wrapper_references (schema.tests.SchemaTests)\", \"test_func_index_nondeterministic (schema.tests.SchemaTests)\", \"test_func_index_nonexistent_field (schema.tests.SchemaTests)\", \"test_func_index_pointing_to_fk (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_missing_field_nested (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests)\", \"test_func_index_required_db_features (invalid_models_tests.test_models.IndexesTests)\", \"test_func_unique_constraint (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint (schema.tests.SchemaTests)\", \"test_func_unique_constraint_collate (schema.tests.SchemaTests)\", \"test_func_unique_constraint_expression_custom_lookup (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_lookups (schema.tests.SchemaTests)\", \"test_func_unique_constraint_nondeterministic (schema.tests.SchemaTests)\", \"test_func_unique_constraint_nonexistent_field (schema.tests.SchemaTests)\", \"test_func_unique_constraint_partial (schema.tests.SchemaTests)\", \"test_func_unique_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_pointing_to_missing_field_nested (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_func_unique_constraint_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_get_constraints (introspection.tests.IntrospectionTests)\", \"test_get_constraints_index_types (introspection.tests.IntrospectionTests)\", \"test_get_constraints_unique_indexes_orders (introspection.tests.IntrospectionTests)\", \"test_get_primary_key_column (introspection.tests.IntrospectionTests)\", \"test_get_relations (introspection.tests.IntrospectionTests)\", \"test_get_table_description_col_lengths (introspection.tests.IntrospectionTests)\", \"test_get_table_description_names (introspection.tests.IntrospectionTests)\", \"test_get_table_description_nullable (introspection.tests.IntrospectionTests)\", \"test_get_table_description_types (introspection.tests.IntrospectionTests)\", \"test_hidden_fk_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_fk_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_hidden_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_id_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_identical_regex_doesnt_alter (migrations.test_autodetector.AutodetectorTests)\", \"test_including_separator (invalid_models_tests.test_models.FieldNamesTests)\", \"test_index_together_remove_fk (migrations.test_autodetector.AutodetectorIndexTogetherTests)\", \"test_index_with_condition (invalid_models_tests.test_models.IndexesTests)\", \"test_index_with_condition_required_db_features (invalid_models_tests.test_models.IndexesTests)\", \"test_index_with_include (invalid_models_tests.test_models.IndexesTests)\", \"test_index_with_include_required_db_features (invalid_models_tests.test_models.IndexesTests)\", \"test_inheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_installed_models (introspection.tests.IntrospectionTests)\", \"test_intersection_foreign_object (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_invalid_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_invalid_related_query_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_iterable_of_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_json_field (inspectdb.tests.InspectDBTestCase)\", \"test_just_order_with_respect_to_no_errors (invalid_models_tests.test_models.OtherModelTests)\", \"test_just_ordering_no_errors (invalid_models_tests.test_models.OtherModelTests)\", \"test_lazy_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_lazy_reference_checks (invalid_models_tests.test_models.OtherModelTests)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_list_containing_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_m2m (schema.tests.SchemaTests)\", \"test_m2m_autogenerated_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_autogenerated_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_create (schema.tests.SchemaTests)\", \"test_m2m_create_custom (schema.tests.SchemaTests)\", \"test_m2m_create_inherited (schema.tests.SchemaTests)\", \"test_m2m_create_through (schema.tests.SchemaTests)\", \"test_m2m_create_through_custom (schema.tests.SchemaTests)\", \"test_m2m_create_through_inherited (schema.tests.SchemaTests)\", \"test_m2m_custom (schema.tests.SchemaTests)\", \"test_m2m_db_constraint (schema.tests.SchemaTests)\", \"test_m2m_db_constraint_custom (schema.tests.SchemaTests)\", \"test_m2m_db_constraint_inherited (schema.tests.SchemaTests)\", \"test_m2m_field_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_field_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_inherited (schema.tests.SchemaTests)\", \"test_m2m_rename_field_in_target_model (schema.tests.SchemaTests)\", \"test_m2m_repoint (schema.tests.SchemaTests)\", \"test_m2m_repoint_custom (schema.tests.SchemaTests)\", \"test_m2m_repoint_inherited (schema.tests.SchemaTests)\", \"test_m2m_table_name_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_through_alter (schema.tests.SchemaTests)\", \"test_m2m_through_alter_custom (schema.tests.SchemaTests)\", \"test_m2m_through_alter_inherited (schema.tests.SchemaTests)\", \"test_m2m_through_remove (schema.tests.SchemaTests)\", \"test_m2m_to_abstract_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_m2m_to_concrete_and_proxy_allowed (invalid_models_tests.test_models.OtherModelTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_fk (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_integer (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ExplicitRelatedQueryNameClashTests)\", \"test_m2m_to_m2m (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_m2m_unmanaged_shadow_models_not_checked (invalid_models_tests.test_models.OtherModelTests)\", \"test_managed_to_unmanaged (migrations.test_autodetector.AutodetectorTests)\", \"test_many_operations_suffix (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_many_to_many_to_missing_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_with_useless_options (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_many_to_many_with_useless_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_max_length_warning (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_max_length_warning (invalid_models_tests.test_ordinary_fields.IntegerFieldTests)\", \"test_max_name_length (invalid_models_tests.test_models.IndexesTests)\", \"test_missing_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_missing_relationship_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_missing_relationship_model_on_model_check (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_mti_inheritance_model_removal (migrations.test_autodetector.AutodetectorTests)\", \"test_multigeneration_inheritance (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_multiinheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)\", \"test_multiple_autofields (invalid_models_tests.test_models.MultipleAutoFieldsTests)\", \"test_name_beginning_with_underscore (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_constraints (invalid_models_tests.test_models.IndexesTests)\", \"test_name_contains_double_underscores (invalid_models_tests.test_models.OtherModelTests)\", \"test_name_ending_with_underscore (invalid_models_tests.test_models.OtherModelTests)\", \"test_negative_max_digits_and_decimal_places (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_negative_max_length (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_no_clash_across_apps_without_accessor (invalid_models_tests.test_relative_fields.ReverseQueryNameClashTests)\", \"test_no_clash_for_hidden_related_name (invalid_models_tests.test_relative_fields.AccessorClashTests)\", \"test_no_operations (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_no_operations_initial (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_non_iterable_choices (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_non_list (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_non_list (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_non_nullable_blank (invalid_models_tests.test_ordinary_fields.GenericIPAddressFieldTests)\", \"test_non_valid (invalid_models_tests.test_models.OtherModelTests)\", \"test_none_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_none_name_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_not_swapped_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_nullable_primary_key (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_on_delete_set_default_without_default_value (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_on_delete_set_null_on_non_nullable_field (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_onetoone_with_explicit_parent_link_parent_model (invalid_models_tests.test_models.OtherModelTests)\", \"test_onetoone_with_parent_model (invalid_models_tests.test_models.OtherModelTests)\", \"test_operation_with_invalid_chars_in_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_operation_with_no_suggested_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_ordering_allows_registered_lookups (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_non_iterable (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_multiple_times_to_model_fields (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_json_field_value (invalid_models_tests.test_models.JSONFieldTests)\", \"test_ordering_pointing_to_lookup_not_transform (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_related_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_missing_related_model_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_non_related_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_related_model_pk (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_pointing_to_two_related_model_field (invalid_models_tests.test_models.OtherModelTests)\", \"test_ordering_with_order_with_respect_to (invalid_models_tests.test_models.OtherModelTests)\", \"test_parse_number (migrations.test_autodetector.AutodetectorTests)\", \"test_partly_alter_index_together_decrease (migrations.test_autodetector.AutodetectorIndexTogetherTests)\", \"test_partly_alter_index_together_increase (migrations.test_autodetector.AutodetectorIndexTogetherTests)\", \"test_partly_alter_unique_together_decrease (migrations.test_autodetector.AutodetectorTests)\", \"test_partly_alter_unique_together_increase (migrations.test_autodetector.AutodetectorTests)\", \"test_pillow_installed (invalid_models_tests.test_ordinary_fields.ImageFieldTests)\", \"test_pk (invalid_models_tests.test_models.FieldNamesTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_fk (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_m2m (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests)\", \"test_pointing_to_missing_field (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexTogetherTests)\", \"test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_primary_key (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_property_and_related_field_accessor_clash (invalid_models_tests.test_models.OtherModelTests)\", \"test_proxy_non_model_parent (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_proxy_to_mti_with_fk_to_proxy_proxy (migrations.test_autodetector.AutodetectorTests)\", \"test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_name (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_through (migrations.test_operations.FieldOperationTests)\", \"test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests)\", \"test_references_model (migrations.test_operations.FieldOperationTests)\", \"test_references_model_mixin (migrations.test_operations.TestCreateModel)\", \"test_referencing_to_swapped_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_related_field_has_invalid_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_related_field_has_valid_related_name (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_relationship_model_missing_foreign_key (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_relationship_model_with_foreign_key_to_wrong_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_remove_constraint (migrations.test_operations.OperationTests)\", \"test_remove_covering_unique_constraint (migrations.test_operations.OperationTests)\", \"test_remove_deferred_unique_constraint (migrations.test_operations.OperationTests)\", \"test_remove_field (schema.tests.SchemaTests)\", \"test_remove_field_check_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_remove_field_m2m (migrations.test_operations.OperationTests)\", \"test_remove_field_m2m_with_through (migrations.test_operations.OperationTests)\", \"test_remove_field_unique_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_remove_func_index (migrations.test_operations.OperationTests)\", \"test_remove_func_unique_constraint (migrations.test_operations.OperationTests)\", \"test_remove_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_remove_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests)\", \"test_remove_index_together_does_not_remove_meta_indexes (schema.tests.SchemaTests)\", \"test_remove_indexed_field (schema.tests.SchemaTests)\", \"test_remove_partial_unique_constraint (migrations.test_operations.OperationTests)\", \"test_remove_unique_together_does_not_remove_meta_constraints (schema.tests.SchemaTests)\", \"test_remove_unique_together_on_pk_field (migrations.test_operations.OperationTests)\", \"test_remove_unique_together_on_unique_field (migrations.test_operations.OperationTests)\", \"test_rename_field_case (migrations.test_operations.OperationTests)\", \"test_rename_field_foreign_key_to_field (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_field_index_together (migrations.test_operations.OperationTests)\", \"test_rename_field_unique_together (migrations.test_operations.OperationTests)\", \"test_rename_field_with_db_column (migrations.test_operations.OperationTests)\", \"test_rename_field_with_renamed_model (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_foreign_object_fields (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_index (migrations.test_operations.OperationTests)\", \"test_rename_index_arguments (migrations.test_operations.OperationTests)\", \"test_rename_index_state_forwards (migrations.test_operations.OperationTests)\", \"test_rename_index_state_forwards_unnamed_index (migrations.test_operations.OperationTests)\", \"test_rename_index_together_to_index (migrations.test_autodetector.AutodetectorIndexTogetherTests)\", \"test_rename_index_together_to_index_extra_options (migrations.test_autodetector.AutodetectorIndexTogetherTests)\", \"test_rename_index_together_to_index_order_fields (migrations.test_autodetector.AutodetectorIndexTogetherTests)\", \"test_rename_index_unknown_unnamed_index (migrations.test_operations.OperationTests)\", \"test_rename_index_unnamed_index (migrations.test_operations.OperationTests)\", \"test_rename_indexes (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_m2m_target_model (migrations.test_operations.OperationTests)\", \"test_rename_m2m_through_model (migrations.test_operations.OperationTests)\", \"test_rename_missing_field (migrations.test_operations.OperationTests)\", \"test_rename_model_with_db_table_rename_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_m2m (migrations.test_operations.OperationTests)\", \"test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests)\", \"test_rename_referenced_field (schema.tests.SchemaTests)\", \"test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests)\", \"test_rename_referenced_primary_key (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_related_field_preserved_db_column (migrations.test_autodetector.AutodetectorTests)\", \"test_rename_table_renames_deferred_sql_references (schema.tests.SchemaTests)\", \"test_renamed_referenced_m2m_model_case (migrations.test_autodetector.AutodetectorTests)\", \"test_repoint_field_m2m (migrations.test_operations.OperationTests)\", \"test_required_attributes (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_reverse_query_name_clash (invalid_models_tests.test_relative_fields.SelfReferentialFKClashTests)\", \"test_reverse_query_name_clash (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"test_run_sql_add_missing_semicolon_on_collect_sql (migrations.test_operations.OperationTests)\", \"test_same_relations (inspectdb.tests.InspectDBTestCase)\", \"test_sequence_list (introspection.tests.IntrospectionTests)\", \"test_set_alter_order_with_respect_to_index_constraint_unique_together (migrations.test_autodetector.AutodetectorTests)\", \"test_set_alter_order_with_respect_to_index_together (migrations.test_autodetector.AutodetectorIndexTogetherTests)\", \"test_single_operation (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_single_operation_long_name (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_single_primary_key (invalid_models_tests.test_models.OtherModelTests)\", \"test_smallautofield (introspection.tests.IntrospectionTests)\", \"test_stealth_table_name_filter_option (inspectdb.tests.InspectDBTestCase)\", \"test_str_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests)\", \"test_str_max_length_type (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_str_max_length_value (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_superset_foreign_object (invalid_models_tests.test_relative_fields.M2mThroughFieldsTests)\", \"test_supports_functools_partial (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_changed (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_circular_multi_mti (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_lowercase (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_many_to_many_model_case (migrations.test_autodetector.AutodetectorTests)\", \"test_swappable_missing_app (invalid_models_tests.test_models.OtherModelTests)\", \"test_swappable_missing_app_name (invalid_models_tests.test_models.OtherModelTests)\", \"test_table_names (introspection.tests.IntrospectionTests)\", \"test_table_names_with_views (introspection.tests.IntrospectionTests)\", \"test_table_with_func_unique_constraint (inspectdb.tests.InspectDBTestCase)\", \"test_text_field_db_collation (inspectdb.tests.InspectDBTestCase)\", \"test_text_field_with_db_index (schema.tests.SchemaTests)\", \"test_text_field_with_db_index_to_fk (schema.tests.SchemaTests)\", \"test_to_fields_exist (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_to_fields_not_checked_if_related_model_doesnt_exist (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_too_many_foreign_keys_in_self_referential_model (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_two_create_models (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_create_models_with_initial_true (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_two_m2m_through_same_model_with_different_through_fields (invalid_models_tests.test_models.OtherModelTests)\", \"test_two_m2m_through_same_relationship (invalid_models_tests.test_models.OtherModelTests)\", \"test_two_operations (migrations.test_autodetector.MigrationSuggestNameTests)\", \"test_unique_constraint (schema.tests.SchemaTests)\", \"test_unique_constraint_condition_pointing_to_joined_fields (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_condition_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_field_and_expression (schema.tests.SchemaTests)\", \"test_unique_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_pointing_to_reverse_o2o (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_condition (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_condition_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_include (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_constraint_with_include_required_db_features (invalid_models_tests.test_models.ConstraintsTests)\", \"test_unique_m2m (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_unique_name_quoting (schema.tests.SchemaTests)\", \"test_unique_primary_key (invalid_models_tests.test_models.OtherModelTests)\", \"test_unique_together_meta (inspectdb.tests.InspectDBTestCase)\", \"test_unmanaged_delete (migrations.test_autodetector.AutodetectorTests)\", \"test_unmanaged_through_model (introspection.tests.IntrospectionTests)\", \"test_unmanaged_to_managed (migrations.test_autodetector.AutodetectorTests)\", \"test_upload_to_callable_not_checked (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_upload_to_starts_with_slash (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_valid_callable_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.AutoFieldTests)\", \"test_valid_case (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_valid_default (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_default_case (invalid_models_tests.test_ordinary_fields.FileFieldTests)\", \"test_valid_default_none (invalid_models_tests.test_ordinary_fields.JSONFieldTests)\", \"test_valid_default_value (invalid_models_tests.test_ordinary_fields.BinaryFieldTests)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.CharFieldTests)\", \"test_valid_field (invalid_models_tests.test_ordinary_fields.DecimalFieldTests)\", \"test_valid_foreign_key_without_accessor (invalid_models_tests.test_relative_fields.RelativeFieldTests)\", \"test_valid_model (invalid_models_tests.test_models.UniqueTogetherTests)\", \"test_valid_model (invalid_models_tests.test_relative_fields.SelfReferentialM2MClashTests)\", \"unique_together also triggers on ordering changes.\", \"unique_together doesn't generate a migration if no\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5",
  "patch_files": [
    "django/core/management/commands/inspectdb.py",
    "django/db/backends/base/features.py",
    "django/db/backends/base/schema.py",
    "django/db/backends/mysql/features.py",
    "django/db/backends/mysql/introspection.py",
    "django/db/backends/mysql/schema.py",
    "django/db/backends/oracle/features.py",
    "django/db/backends/oracle/introspection.py",
    "django/db/backends/postgresql/features.py",
    "django/db/backends/postgresql/introspection.py",
    "django/db/migrations/autodetector.py",
    "django/db/migrations/operations/__init__.py",
    "django/db/migrations/operations/models.py",
    "django/db/models/base.py",
    "django/db/models/fields/__init__.py",
    "django/db/models/fields/related.py",
    "django/db/models/options.py"
  ],
  "test_patch_files": [
    "tests/inspectdb/models.py",
    "tests/inspectdb/tests.py",
    "tests/introspection/models.py",
    "tests/introspection/tests.py",
    "tests/invalid_models_tests/test_models.py",
    "tests/invalid_models_tests/test_ordinary_fields.py",
    "tests/invalid_models_tests/test_relative_fields.py",
    "tests/migrations/test_autodetector.py",
    "tests/migrations/test_base.py",
    "tests/migrations/test_operations.py",
    "tests/schema/tests.py"
  ],
  "patch_diff_details": {
    "django/core/management/commands/inspectdb.py": {
      "diffs": [
        {
          "start_line_old": 81,
          "end_line_old": 92,
          "file_pos": 12,
          "file_context_length": 59500,
          "pos": 47,
          "context_length": 17772
        },
        {
          "start_line_old": 235,
          "end_line_old": 235,
          "file_pos": 12,
          "file_context_length": 59500,
          "pos": 47,
          "context_length": 17772
        },
        {
          "start_line_old": 245,
          "end_line_old": 252,
          "file_pos": 12,
          "file_context_length": 59500,
          "pos": 47,
          "context_length": 17772
        },
        {
          "start_line_old": 356,
          "end_line_old": 356,
          "file_pos": 12,
          "file_context_length": 59500,
          "closest_snippet_id": "/tmp/repos/django/django/core/management/commands/inspectdb.py_Command.normalize_col_name_Command.normalize_col_name.16.1",
          "closest_snippet_line_distance": 43,
          "pos": 114,
          "context_length": 41310
        },
        {
          "start_line_old": 394,
          "end_line_old": 394,
          "file_pos": 12,
          "file_context_length": 59500,
          "closest_snippet_id": "/tmp/repos/django/django/core/management/commands/inspectdb.py_Command.normalize_col_name_Command.normalize_col_name.16.1",
          "closest_snippet_line_distance": 81,
          "pos": 114,
          "context_length": 41310
        }
      ]
    },
    "django/db/backends/base/features.py": {
      "diffs": [
        {
          "start_line_old": 337,
          "end_line_old": 337,
          "file_pos": 8,
          "file_context_length": 32423,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/base/features.py_BaseDatabaseFeatures.minimum_database_version.supports_transactions_",
          "closest_snippet_line_distance": 31,
          "pos": 144,
          "context_length": 50515
        }
      ]
    },
    "django/db/backends/base/schema.py": {
      "diffs": [
        {
          "start_line_old": 144,
          "end_line_old": 144,
          "file_pos": 5,
          "file_context_length": 25601,
          "pos": 8,
          "context_length": 3748
        },
        {
          "start_line_old": 292,
          "end_line_old": 292,
          "file_pos": 5,
          "file_context_length": 25601,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_field.rels_to_update_BaseDatabaseSchemaEditor._alter_field.84.1",
          "closest_snippet_line_distance": 767,
          "pos": 31,
          "context_length": 12008
        },
        {
          "start_line_old": 448,
          "end_line_old": 448,
          "file_pos": 5,
          "file_context_length": 25601,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.add_field_BaseDatabaseSchemaEditor.add_field.22.1",
          "closest_snippet_line_distance": 180,
          "pos": 44,
          "context_length": 15773
        },
        {
          "start_line_old": 617,
          "end_line_old": 617,
          "file_pos": 5,
          "file_context_length": 25601,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._field_should_be_indexed_BaseDatabaseSchemaEditor._rename_field_sql.1.1",
          "closest_snippet_line_distance": 824,
          "pos": 36,
          "context_length": 13545
        },
        {
          "start_line_old": 696,
          "end_line_old": 696,
          "file_pos": 5,
          "file_context_length": 25601,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._create_fk_sql_BaseDatabaseSchemaEditor._create_fk_sql.7.1",
          "closest_snippet_line_distance": 766,
          "pos": 38,
          "context_length": 14386
        },
        {
          "start_line_old": 816,
          "end_line_old": 816,
          "file_pos": 5,
          "file_context_length": 25601,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_column_null_sql_BaseDatabaseSchemaEditor._alter_column_null_sql.2.3.3.1",
          "closest_snippet_line_distance": 319
        },
        {
          "start_line_old": 952,
          "end_line_old": 952,
          "file_pos": 5,
          "file_context_length": 25601,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._check_sql_BaseDatabaseSchemaEditor._delete_constraint_sql.1.1",
          "closest_snippet_line_distance": 687,
          "pos": 18,
          "context_length": 7106
        },
        {
          "start_line_old": 1214,
          "end_line_old": 1214,
          "file_pos": 5,
          "file_context_length": 25601,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.alter_field_BaseDatabaseSchemaEditor.alter_field.9",
          "closest_snippet_line_distance": 418,
          "pos": 66,
          "context_length": 25511
        },
        {
          "start_line_old": 1227,
          "end_line_old": 1227,
          "file_pos": 5,
          "file_context_length": 25601,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.alter_field_BaseDatabaseSchemaEditor.alter_field.9",
          "closest_snippet_line_distance": 431,
          "pos": 66,
          "context_length": 25511
        },
        {
          "start_line_old": 1426,
          "end_line_old": 1435,
          "file_pos": 5,
          "file_context_length": 25601,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_column_null_sql_BaseDatabaseSchemaEditor._alter_column_null_sql.2.3.3.1",
          "closest_snippet_line_distance": 273
        }
      ]
    },
    "django/db/backends/mysql/features.py": {
      "diffs": [
        {
          "start_line_old": 21,
          "end_line_old": 21,
          "file_pos": 6,
          "file_context_length": 27922,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/mysql/features.py_DatabaseFeatures.supported_explain_formats_",
          "closest_snippet_line_distance": 235,
          "pos": 55,
          "context_length": 20543
        }
      ]
    },
    "django/db/backends/mysql/introspection.py": {
      "diffs": [
        {
          "start_line_old": 8,
          "end_line_old": 18,
          "file_pos": 11,
          "file_context_length": 56528,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/mysql/introspection.py_DatabaseIntrospection.get_table_description_DatabaseIntrospection.get_table_description.19.1",
          "closest_snippet_line_distance": 69,
          "pos": 121,
          "context_length": 42977
        },
        {
          "start_line_old": 71,
          "end_line_old": 73,
          "file_pos": 11,
          "file_context_length": 56528,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/mysql/introspection.py_DatabaseIntrospection.get_constraints.11_",
          "closest_snippet_line_distance": 242
        },
        {
          "start_line_old": 131,
          "end_line_old": 131,
          "file_pos": 11,
          "file_context_length": 56528,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/mysql/introspection.py_DatabaseIntrospection._parse_constraint_columns_DatabaseIntrospection._parse_constraint_columns.5.1",
          "closest_snippet_line_distance": 83,
          "pos": 60,
          "context_length": 23216
        },
        {
          "start_line_old": 162,
          "end_line_old": 162,
          "file_pos": 11,
          "file_context_length": 56528,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/mysql/introspection.py_DatabaseIntrospection._parse_constraint_columns_DatabaseIntrospection._parse_constraint_columns.5.1",
          "closest_snippet_line_distance": 52,
          "pos": 60,
          "context_length": 23216
        }
      ]
    },
    "django/db/backends/mysql/schema.py": {
      "diffs": [
        {
          "start_line_old": 12,
          "end_line_old": 12,
          "file_pos": 1,
          "file_context_length": 1960,
          "pos": 1,
          "context_length": 453
        },
        {
          "start_line_old": 35,
          "end_line_old": 35,
          "file_pos": 1,
          "file_context_length": 1960,
          "pos": 1,
          "context_length": 453
        },
        {
          "start_line_old": 231,
          "end_line_old": 231,
          "file_pos": 1,
          "file_context_length": 1960,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/mysql/schema.py_DatabaseSchemaEditor.quote_value_DatabaseSchemaEditor._column_default_sql.2.1",
          "closest_snippet_line_distance": 129,
          "pos": 74,
          "context_length": 28061
        }
      ]
    },
    "django/db/backends/oracle/features.py": {
      "diffs": [
        {
          "start_line_old": 28,
          "end_line_old": 28,
          "file_pos": 28,
          "file_context_length": 136534,
          "pos": 97,
          "context_length": 35512
        }
      ]
    },
    "django/db/backends/oracle/introspection.py": {
      "diffs": [
        {
          "start_line_old": 8,
          "end_line_old": 11,
          "file_pos": 19,
          "file_context_length": 98099,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/oracle/introspection.py_DatabaseIntrospection.get_table_description_DatabaseIntrospection.get_table_description.9.1",
          "closest_snippet_line_distance": 91,
          "pos": 137,
          "context_length": 49077
        },
        {
          "start_line_old": 80,
          "end_line_old": 80,
          "file_pos": 19,
          "file_context_length": 98099,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/oracle/introspection.py_1_DatabaseIntrospection.data_types_reverse.1.2.1.1",
          "closest_snippet_line_distance": 31
        },
        {
          "start_line_old": 89,
          "end_line_old": 95,
          "file_pos": 19,
          "file_context_length": 98099,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/oracle/introspection.py_1_DatabaseIntrospection.data_types_reverse.1.2.1.1",
          "closest_snippet_line_distance": 46
        },
        {
          "start_line_old": 134,
          "end_line_old": 134,
          "file_pos": 19,
          "file_context_length": 98099,
          "pos": 65,
          "context_length": 25280
        },
        {
          "start_line_old": 149,
          "end_line_old": 149,
          "file_pos": 19,
          "file_context_length": 98099,
          "pos": 65,
          "context_length": 25280
        },
        {
          "start_line_old": 157,
          "end_line_old": 157,
          "file_pos": 19,
          "file_context_length": 98099,
          "pos": 65,
          "context_length": 25280
        },
        {
          "start_line_old": 168,
          "end_line_old": 168,
          "file_pos": 19,
          "file_context_length": 98099,
          "pos": 65,
          "context_length": 25280
        },
        {
          "start_line_old": 183,
          "end_line_old": 183,
          "file_pos": 19,
          "file_context_length": 98099,
          "pos": 65,
          "context_length": 25280
        }
      ]
    },
    "django/db/backends/postgresql/features.py": {
      "diffs": [
        {
          "start_line_old": 25,
          "end_line_old": 25,
          "file_pos": 16,
          "file_context_length": 70162,
          "pos": 56,
          "context_length": 21430
        }
      ]
    },
    "django/db/backends/postgresql/introspection.py": {
      "diffs": [
        {
          "start_line_old": 5,
          "end_line_old": 8,
          "file_pos": 17,
          "file_context_length": 72614,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/postgresql/introspection.py_DatabaseIntrospection.data_types_reverse.get_table_description_DatabaseIntrospection.data_types_reverse.get_table_description.8.1",
          "closest_snippet_line_distance": 74,
          "pos": 94,
          "context_length": 34112
        },
        {
          "start_line_old": 65,
          "end_line_old": 65,
          "file_pos": 17,
          "file_context_length": 72614,
          "closest_snippet_id": "/tmp/repos/django/django/db/backends/postgresql/introspection.py_DatabaseIntrospection.data_types_reverse.get_constraints.10_",
          "closest_snippet_line_distance": 200
        },
        {
          "start_line_old": 94,
          "end_line_old": 94,
          "file_pos": 17,
          "file_context_length": 72614,
          "pos": 59,
          "context_length": 22570
        }
      ]
    },
    "django/db/migrations/autodetector.py": {
      "diffs": [
        {
          "start_line_old": 173,
          "end_line_old": 173,
          "file_pos": 38,
          "file_context_length": 176694,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector.generate_altered_db_table_MigrationAutodetector.generate_altered_db_table.2.6.1",
          "closest_snippet_line_distance": 1361
        },
        {
          "start_line_old": 1555,
          "end_line_old": 1555,
          "file_pos": 38,
          "file_context_length": 176694,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector.generate_altered_db_table_MigrationAutodetector.generate_altered_db_table.2.6.1",
          "closest_snippet_line_distance": 2
        }
      ]
    },
    "django/db/migrations/operations/__init__.py": {
      "diffs": [
        {
          "start_line_old": 9,
          "end_line_old": 9,
          "file_pos": 32,
          "file_context_length": 157277,
          "pos": 108,
          "context_length": 39177
        },
        {
          "start_line_old": 24,
          "end_line_old": 24,
          "file_pos": 32,
          "file_context_length": 157277,
          "pos": 108,
          "context_length": 39177
        }
      ]
    },
    "django/db/migrations/operations/models.py": {
      "diffs": [
        {
          "start_line_old": 532,
          "end_line_old": 532,
          "file_pos": 24,
          "file_context_length": 130226,
          "closest_snippet_id": "/tmp/repos/django/django/db/migrations/operations/models.py_CreateModel_CreateModel.migration_name_fragment.1.1",
          "closest_snippet_line_distance": 421
        }
      ]
    },
    "django/db/models/base.py": {
      "diffs": [
        {
          "start_line_old": 1559,
          "end_line_old": 1559,
          "file_pos": 10,
          "file_context_length": 53938,
          "closest_snippet_id": "/tmp/repos/django/django/db/models/base.py_Model._check_long_column_names_Model._check_long_column_names.11.1",
          "closest_snippet_line_distance": 601,
          "pos": 72,
          "context_length": 27586
        },
        {
          "start_line_old": 1595,
          "end_line_old": 1595,
          "file_pos": 10,
          "file_context_length": 53938,
          "closest_snippet_id": "/tmp/repos/django/django/db/models/base.py_Model._check_default_pk_Model._check_default_pk.2.1",
          "closest_snippet_line_distance": 2
        }
      ]
    },
    "django/db/models/fields/__init__.py": {
      "diffs": [
        {
          "start_line_old": 203,
          "end_line_old": 203,
          "file_pos": 31,
          "file_context_length": 157050,
          "closest_snippet_id": "/tmp/repos/django/django/db/models/fields/__init__.py_TextField_TextField._check_db_collation.3.1",
          "closest_snippet_line_distance": 2129
        },
        {
          "start_line_old": 224,
          "end_line_old": 224,
          "file_pos": 31,
          "file_context_length": 157050,
          "closest_snippet_id": "/tmp/repos/django/django/db/models/fields/__init__.py_TextField_TextField._check_db_collation.3.1",
          "closest_snippet_line_distance": 2108
        },
        {
          "start_line_old": 262,
          "end_line_old": 262,
          "file_pos": 31,
          "file_context_length": 157050,
          "closest_snippet_id": "/tmp/repos/django/django/db/models/fields/__init__.py_TextField_TextField._check_db_collation.3.1",
          "closest_snippet_line_distance": 2070
        },
        {
          "start_line_old": 388,
          "end_line_old": 388,
          "file_pos": 31,
          "file_context_length": 157050,
          "closest_snippet_id": "/tmp/repos/django/django/db/models/fields/__init__.py_TextField_TextField._check_db_collation.3.1",
          "closest_snippet_line_distance": 1944
        },
        {
          "start_line_old": 541,
          "end_line_old": 541,
          "file_pos": 31,
          "file_context_length": 157050,
          "closest_snippet_id": "/tmp/repos/django/django/db/models/fields/__init__.py_TextField_TextField._check_db_collation.3.1",
          "closest_snippet_line_distance": 1791
        }
      ]
    },
    "django/db/models/fields/related.py": {
      "diffs": [
        {
          "start_line_old": 1431,
          "end_line_old": 1431,
          "file_pos": 42,
          "file_context_length": 199170,
          "closest_snippet_id": "/tmp/repos/django/django/db/models/fields/related.py_ForeignKey_ForeignKey.check.1.1",
          "closest_snippet_line_distance": 441
        }
      ]
    },
    "django/db/models/options.py": {
      "diffs": [
        {
          "start_line_old": 33,
          "end_line_old": 33,
          "file_pos": 15,
          "file_context_length": 69275,
          "closest_snippet_id": "/tmp/repos/django/django/db/models/options.py_Options.contribute_to_class_Options.contribute_to_class.16.self.db_table_2.1",
          "closest_snippet_line_distance": 140,
          "pos": 101,
          "context_length": 36834
        },
        {
          "start_line_old": 115,
          "end_line_old": 115,
          "file_pos": 15,
          "file_context_length": 69275,
          "closest_snippet_id": "/tmp/repos/django/django/db/models/options.py_Options.add_manager_Options.add_field.5.12.3.1",
          "closest_snippet_line_distance": 216
        }
      ]
    }
  },
  "vectors": 3751,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_1_DatabaseSchemaEditor.sql_delete_check.2.1",
      "distance": 0.8898305892944336,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 1,
      "end_line": 42,
      "tokens": 453,
      "context_length": 453,
      "file_pos": 1
    },
    {
      "position": 2,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_DatabaseSchemaEditor.alter_db_table_DatabaseSchemaEditor.alter_db_table.1.5.1",
      "distance": 0.9085843563079834,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 100,
      "end_line": 121,
      "tokens": 195,
      "context_length": 648
    },
    {
      "position": 3,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_DatabaseSchemaEditor.add_field_DatabaseSchemaEditor.add_field.4.2",
      "distance": 0.9216651916503906,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 104,
      "end_line": 118,
      "tokens": 144,
      "context_length": 792,
      "file_pos": 2
    },
    {
      "position": 4,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._alter_column_type_sql_DatabaseSchemaEditor.sql_update_with_default._alter_column_type_sql.old_db_params.14.5.1.1",
      "distance": 0.9472523927688599,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 143,
      "end_line": 256,
      "tokens": 920,
      "context_length": 1712
    },
    {
      "position": 5,
      "id": "/tmp/repos/django/django/db/backends/oracle/schema.py_copy_DatabaseSchemaEditor.sql_create_index.1",
      "distance": 0.9514337778091431,
      "file_path": "django/db/backends/oracle/schema.py",
      "start_line": 1,
      "end_line": 28,
      "tokens": 271,
      "context_length": 1983
    },
    {
      "position": 6,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_1_DatabaseSchemaEditor.sql_update_with_default._field_base_data_types.2.2.1",
      "distance": 0.9530025720596313,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 1,
      "end_line": 84,
      "tokens": 751,
      "context_length": 2734
    },
    {
      "position": 7,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._index_columns_DatabaseSchemaEditor.sql_update_with_default._delete_index_sql.2.1",
      "distance": 0.95759516954422,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 313,
      "end_line": 338,
      "tokens": 235,
      "context_length": 2969
    },
    {
      "position": 8,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor_BaseDatabaseSchemaEditor.38",
      "distance": 0.960751473903656,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 75,
      "end_line": 151,
      "tokens": 779,
      "context_length": 3748,
      "file_pos": 5
    },
    {
      "position": 9,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._alter_field_DatabaseSchemaEditor.sql_update_with_default._alter_field.5.2",
      "distance": 0.9767806529998779,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 277,
      "end_line": 311,
      "tokens": 277,
      "context_length": 4025
    },
    {
      "position": 10,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._alter_column_collation_sql_DatabaseSchemaEditor.sql_update_with_default._alter_column_collation_sql.4.1",
      "distance": 0.9792472124099731,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 258,
      "end_line": 275,
      "tokens": 170,
      "context_length": 4195
    },
    {
      "position": 11,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_DatabaseSchemaEditor.sql_rename_column_DatabaseSchemaEditor.sql_rename_column.3.3.1",
      "distance": 0.9808107614517212,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 44,
      "end_line": 53,
      "tokens": 134,
      "context_length": 4329,
      "file_pos": 5
    },
    {
      "position": 12,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_DatabaseSchemaEditor.quote_value_DatabaseSchemaEditor._column_default_sql.2.1",
      "distance": 0.9818702936172485,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 55,
      "end_line": 102,
      "tokens": 398,
      "context_length": 4727,
      "file_pos": 5
    },
    {
      "position": 13,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_DatabaseSchemaEditor.__enter___DatabaseSchemaEditor.__exit__.3",
      "distance": 0.9945361614227295,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 25,
      "end_line": 41,
      "tokens": 168,
      "context_length": 4895
    },
    {
      "position": 14,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._check_sql_BaseDatabaseSchemaEditor._delete_constraint_sql.1.1",
      "distance": 0.9958468079566956,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1639,
      "end_line": 1663,
      "tokens": 189,
      "context_length": 5084,
      "file_pos": 5
    },
    {
      "position": 15,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_DatabaseSchemaEditor.add_constraint_",
      "distance": 0.9988521933555603,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 553,
      "end_line": 577,
      "tokens": 162,
      "context_length": 5246
    },
    {
      "position": 16,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_DatabaseSchemaEditor._remake_table.23_DatabaseSchemaEditor._remake_table.68.restore_pk_field.primary_key.1",
      "distance": 1.000769853591919,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 256,
      "end_line": 361,
      "tokens": 885,
      "context_length": 6131
    },
    {
      "position": 17,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._using_sql_DatabaseSchemaEditor.sql_update_with_default._get_sequence_name.2.1",
      "distance": 1.0020312070846558,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 122,
      "end_line": 141,
      "tokens": 234,
      "context_length": 6365
    },
    {
      "position": 18,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_field.23_BaseDatabaseSchemaEditor._alter_field.needs_database_default.1",
      "distance": 1.0027515888214111,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 889,
      "end_line": 970,
      "tokens": 741,
      "context_length": 7106,
      "file_pos": 5
    },
    {
      "position": 19,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._create_index_sql_",
      "distance": 1.0040898323059082,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 340,
      "end_line": 376,
      "tokens": 210,
      "context_length": 7316
    },
    {
      "position": 20,
      "id": "/tmp/repos/django/django/db/backends/oracle/schema.py_DatabaseSchemaEditor._alter_column_type_sql_DatabaseSchemaEditor._alter_column_type_sql.4.1",
      "distance": 1.0072451829910278,
      "file_path": "django/db/backends/oracle/schema.py",
      "start_line": 171,
      "end_line": 184,
      "tokens": 166,
      "context_length": 7482
    },
    {
      "position": 21,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_field.45_BaseDatabaseSchemaEditor._alter_field.67",
      "distance": 1.0093357563018799,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 971,
      "end_line": 1058,
      "tokens": 822,
      "context_length": 8304,
      "file_pos": 5
    },
    {
      "position": 22,
      "id": "/tmp/repos/django/django/db/backends/mysql/features.py_DatabaseFeatures._mysql_storage_engine_DatabaseFeatures.supports_explain_analyze.1.1",
      "distance": 1.0098111629486084,
      "file_path": "django/db/backends/mysql/features.py",
      "start_line": 147,
      "end_line": 254,
      "tokens": 728,
      "context_length": 9032,
      "file_pos": 6
    },
    {
      "position": 23,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._create_unique_sql_BaseDatabaseSchemaEditor._create_unique_sql.8.1",
      "distance": 1.0098286867141724,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1547,
      "end_line": 1598,
      "tokens": 343,
      "context_length": 9375,
      "file_pos": 6
    },
    {
      "position": 24,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_field.rels_to_update_BaseDatabaseSchemaEditor._alter_field.84.1",
      "distance": 1.0126184225082397,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1059,
      "end_line": 1133,
      "tokens": 725,
      "context_length": 10100,
      "file_pos": 6
    },
    {
      "position": 25,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_DatabaseSchemaEditor.delete_model_DatabaseSchemaEditor.delete_model.1.2.2",
      "distance": 1.0150730609893799,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 363,
      "end_line": 379,
      "tokens": 132,
      "context_length": 10232
    },
    {
      "position": 26,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_DatabaseSchemaEditor.alter_field_DatabaseSchemaEditor.alter_field.5.6.1",
      "distance": 1.0161974430084229,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 123,
      "end_line": 174,
      "tokens": 527,
      "context_length": 10759
    },
    {
      "position": 27,
      "id": "/tmp/repos/django/django/db/backends/oracle/schema.py_DatabaseSchemaEditor._drop_identity_",
      "distance": 1.0178115367889404,
      "file_path": "django/db/backends/oracle/schema.py",
      "start_line": 229,
      "end_line": 252,
      "tokens": 194,
      "context_length": 10953
    },
    {
      "position": 28,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/features.py_DatabaseFeatures.supports_atomic_references_rename_",
      "distance": 1.0190083980560303,
      "file_path": "django/db/backends/sqlite3/features.py",
      "start_line": 132,
      "end_line": 166,
      "tokens": 245,
      "context_length": 11198
    },
    {
      "position": 29,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_DatabaseSchemaEditor.add_field_DatabaseSchemaEditor.add_field.3.3.1",
      "distance": 1.0199098587036133,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 381,
      "end_line": 400,
      "tokens": 176,
      "context_length": 11374
    },
    {
      "position": 30,
      "id": "/tmp/repos/django/django/db/backends/base/features.py_BaseDatabaseFeatures.minimum_database_version.supports_transactions_",
      "distance": 1.0217375755310059,
      "file_path": "django/db/backends/base/features.py",
      "start_line": 368,
      "end_line": 386,
      "tokens": 173,
      "context_length": 11547,
      "file_pos": 8
    },
    {
      "position": 31,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.45_BaseDatabaseSchemaEditor._iter_column_sql.15.1",
      "distance": 1.027604341506958,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 284,
      "end_line": 339,
      "tokens": 461,
      "context_length": 12008,
      "file_pos": 8
    },
    {
      "position": 32,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/features.py_operator_DatabaseFeatures.create_test_table_with_composite_primary_key.1",
      "distance": 1.0277466773986816,
      "file_path": "django/db/backends/sqlite3/features.py",
      "start_line": 1,
      "end_line": 61,
      "tokens": 584,
      "context_length": 12592
    },
    {
      "position": 33,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._delete_index_sql_BaseDatabaseSchemaEditor._index_columns.1.1",
      "distance": 1.0309369564056396,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1376,
      "end_line": 1392,
      "tokens": 153,
      "context_length": 12745,
      "file_pos": 8
    },
    {
      "position": 34,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.__enter___BaseDatabaseSchemaEditor.quote_name.1.1",
      "distance": 1.0315003395080566,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 153,
      "end_line": 201,
      "tokens": 380,
      "context_length": 13125,
      "file_pos": 8
    },
    {
      "position": 35,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._field_should_be_indexed_BaseDatabaseSchemaEditor._rename_field_sql.1.1",
      "distance": 1.0386909246444702,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1441,
      "end_line": 1460,
      "tokens": 175,
      "context_length": 13300,
      "file_pos": 8
    },
    {
      "position": 36,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.alter_db_table_BaseDatabaseSchemaEditor.alter_db_tablespace.2",
      "distance": 1.039585828781128,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 598,
      "end_line": 626,
      "tokens": 245,
      "context_length": 13545,
      "file_pos": 8
    },
    {
      "position": 37,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._create_fk_sql_BaseDatabaseSchemaEditor._create_fk_sql.7.1",
      "distance": 1.0408008098602295,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1462,
      "end_line": 1481,
      "tokens": 176,
      "context_length": 13721,
      "file_pos": 8
    },
    {
      "position": 38,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.add_field_BaseDatabaseSchemaEditor.add_field.22.1",
      "distance": 1.0417704582214355,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 628,
      "end_line": 700,
      "tokens": 665,
      "context_length": 14386,
      "file_pos": 8
    },
    {
      "position": 39,
      "id": "/tmp/repos/django/django/db/backends/oracle/schema.py_DatabaseSchemaEditor._is_identity_column_DatabaseSchemaEditor._is_identity_column.1.3.1",
      "distance": 1.0421072244644165,
      "file_path": "django/db/backends/oracle/schema.py",
      "start_line": 214,
      "end_line": 227,
      "tokens": 115,
      "context_length": 14501
    },
    {
      "position": 40,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_copy_DatabaseSchemaEditor.sql_delete_unique.1",
      "distance": 1.0421137809753418,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 1,
      "end_line": 23,
      "tokens": 191,
      "context_length": 14692
    },
    {
      "position": 41,
      "id": "/tmp/repos/django/django/db/backends/base/creation.py_BaseDatabaseCreation.sql_table_creation_suffix_",
      "distance": 1.0425835847854614,
      "file_path": "django/db/backends/base/creation.py",
      "start_line": 353,
      "end_line": 381,
      "tokens": 216,
      "context_length": 14908
    },
    {
      "position": 42,
      "id": "/tmp/repos/django/django/db/backends/oracle/schema.py_DatabaseSchemaEditor.alter_field_DatabaseSchemaEditor.alter_field.1.2.4.11.1",
      "distance": 1.0432274341583252,
      "file_path": "django/db/backends/oracle/schema.py",
      "start_line": 74,
      "end_line": 102,
      "tokens": 344,
      "context_length": 15252
    },
    {
      "position": 43,
      "id": "/tmp/repos/django/django/db/models/base.py_copy_DEFERRED.1",
      "distance": 1.0461206436157227,
      "file_path": "django/db/models/base.py",
      "start_line": 1,
      "end_line": 66,
      "tokens": 361,
      "context_length": 15613,
      "file_pos": 10
    },
    {
      "position": 44,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.create_model_BaseDatabaseSchemaEditor.create_model.10.1.1",
      "distance": 1.0476083755493164,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 438,
      "end_line": 455,
      "tokens": 160,
      "context_length": 15773,
      "file_pos": 10
    },
    {
      "position": 45,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.add_index_BaseDatabaseSchemaEditor.remove_constraint.3.1",
      "distance": 1.0485191345214844,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 478,
      "end_line": 520,
      "tokens": 316,
      "context_length": 16089,
      "file_pos": 10
    },
    {
      "position": 46,
      "id": "/tmp/repos/django/django/db/backends/mysql/introspection.py_DatabaseIntrospection._parse_constraint_columns_DatabaseIntrospection._parse_constraint_columns.5.1",
      "distance": 1.0505012273788452,
      "file_path": "django/db/backends/mysql/introspection.py",
      "start_line": 214,
      "end_line": 225,
      "tokens": 121,
      "context_length": 16210,
      "file_pos": 11
    },
    {
      "position": 47,
      "id": "/tmp/repos/django/django/core/management/commands/inspectdb.py_Command.handle_inspection_Command.handle_inspection.5.15.17",
      "distance": 1.051088571548462,
      "file_path": "django/core/management/commands/inspectdb.py",
      "start_line": 54,
      "end_line": 253,
      "tokens": 1562,
      "context_length": 17772,
      "file_pos": 12
    },
    {
      "position": 48,
      "id": "/tmp/repos/django/django/contrib/gis/db/backends/postgis/schema.py_1_PostGISSchemaEditor._field_should_be_indexed.2.1",
      "distance": 1.0532772541046143,
      "file_path": "django/contrib/gis/db/backends/postgis/schema.py",
      "start_line": 1,
      "end_line": 23,
      "tokens": 217,
      "context_length": 17989
    },
    {
      "position": 49,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._unique_constraint_name_BaseDatabaseSchemaEditor._delete_unique_sql.3.1",
      "distance": 1.0536413192749023,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1600,
      "end_line": 1637,
      "tokens": 243,
      "context_length": 18232,
      "file_pos": 13
    },
    {
      "position": 50,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._fk_constraint_name_BaseDatabaseSchemaEditor._deferrable_constraint_sql.3.1.1",
      "distance": 1.0540001392364502,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1483,
      "end_line": 1505,
      "tokens": 199,
      "context_length": 18431,
      "file_pos": 13
    },
    {
      "position": 51,
      "id": "/tmp/repos/django/django/db/backends/mysql/features.py_DatabaseFeatures.supported_explain_formats_",
      "distance": 1.0569534301757812,
      "file_path": "django/db/backends/mysql/features.py",
      "start_line": 256,
      "end_line": 324,
      "tokens": 504,
      "context_length": 18935,
      "file_pos": 13
    },
    {
      "position": 52,
      "id": "/tmp/repos/django/django/db/backends/oracle/schema.py_DatabaseSchemaEditor.quote_value_DatabaseSchemaEditor.remove_field.3.2",
      "distance": 1.0597596168518066,
      "file_path": "django/db/backends/oracle/schema.py",
      "start_line": 30,
      "end_line": 49,
      "tokens": 206,
      "context_length": 19141
    },
    {
      "position": 53,
      "id": "/tmp/repos/django/django/contrib/gis/db/backends/spatialite/schema.py_1_SpatialiteSchemaEditor.geo_quote_name.1.1",
      "distance": 1.0611684322357178,
      "file_path": "django/contrib/gis/db/backends/spatialite/schema.py",
      "start_line": 1,
      "end_line": 37,
      "tokens": 320,
      "context_length": 19461
    },
    {
      "position": 54,
      "id": "/tmp/repos/django/django/db/models/options.py_Options.contribute_to_class_Options.contribute_to_class.16.self.db_table_2.1",
      "distance": 1.0615625381469727,
      "file_path": "django/db/models/options.py",
      "start_line": 173,
      "end_line": 242,
      "tokens": 645,
      "context_length": 20106,
      "file_pos": 15
    },
    {
      "position": 55,
      "id": "/tmp/repos/django/django/db/backends/mysql/features.py_operator_DatabaseFeatures.minimum_database_version.1.2.1.1",
      "distance": 1.0636917352676392,
      "file_path": "django/db/backends/mysql/features.py",
      "start_line": 1,
      "end_line": 61,
      "tokens": 437,
      "context_length": 20543,
      "file_pos": 15
    },
    {
      "position": 56,
      "id": "/tmp/repos/django/django/db/backends/postgresql/features.py_operator_",
      "distance": 1.0654085874557495,
      "file_path": "django/db/backends/postgresql/features.py",
      "start_line": 1,
      "end_line": 112,
      "tokens": 887,
      "context_length": 21430,
      "file_pos": 16
    },
    {
      "position": 57,
      "id": "/tmp/repos/django/django/db/backends/oracle/schema.py_DatabaseSchemaEditor.delete_model_DatabaseSchemaEditor.delete_model.2",
      "distance": 1.0660781860351562,
      "file_path": "django/db/backends/oracle/schema.py",
      "start_line": 51,
      "end_line": 72,
      "tokens": 146,
      "context_length": 21576
    },
    {
      "position": 58,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.alter_field_BaseDatabaseSchemaEditor.alter_field.9",
      "distance": 1.0666334629058838,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 734,
      "end_line": 796,
      "tokens": 524,
      "context_length": 22100,
      "file_pos": 16
    },
    {
      "position": 59,
      "id": "/tmp/repos/django/django/db/backends/postgresql/introspection.py_DatabaseIntrospection.data_types_reverse.get_table_description_DatabaseIntrospection.data_types_reverse.get_table_description.8.1",
      "distance": 1.0680789947509766,
      "file_path": "django/db/backends/postgresql/introspection.py",
      "start_line": 79,
      "end_line": 124,
      "tokens": 470,
      "context_length": 22570,
      "file_pos": 17
    },
    {
      "position": 60,
      "id": "/tmp/repos/django/django/db/backends/mysql/introspection.py_DatabaseIntrospection.get_table_description_DatabaseIntrospection.get_table_description.19.1",
      "distance": 1.0681648254394531,
      "file_path": "django/db/backends/mysql/introspection.py",
      "start_line": 77,
      "end_line": 164,
      "tokens": 646,
      "context_length": 23216,
      "file_pos": 17
    },
    {
      "position": 61,
      "id": "/tmp/repos/django/django/db/backends/mysql/features.py_DatabaseFeatures.django_test_skips_DatabaseFeatures.django_test_skips.5.1",
      "distance": 1.0701707601547241,
      "file_path": "django/db/backends/mysql/features.py",
      "start_line": 83,
      "end_line": 145,
      "tokens": 500,
      "context_length": 23716,
      "file_pos": 17
    },
    {
      "position": 62,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._create_like_index_sql_DatabaseSchemaEditor.sql_update_with_default._create_like_index_sql.4.1",
      "distance": 1.0709668397903442,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 86,
      "end_line": 120,
      "tokens": 332,
      "context_length": 24048
    },
    {
      "position": 63,
      "id": "/tmp/repos/django/django/db/models/base.py_ModelBase.add_to_class_ModelBase._default_manager.1.1",
      "distance": 1.0719834566116333,
      "file_path": "django/db/models/base.py",
      "start_line": 369,
      "end_line": 436,
      "tokens": 541,
      "context_length": 24589,
      "file_pos": 17
    },
    {
      "position": 64,
      "id": "/tmp/repos/django/django/db/models/sql/query.py_Query.check_alias_Query.add_annotation.5",
      "distance": 1.0741695165634155,
      "file_path": "django/db/models/sql/query.py",
      "start_line": 1076,
      "end_line": 1091,
      "tokens": 135,
      "context_length": 24724
    },
    {
      "position": 65,
      "id": "/tmp/repos/django/django/db/backends/oracle/introspection.py_DatabaseIntrospection.get_table_description_DatabaseIntrospection.get_table_description.9.1",
      "distance": 1.0746004581451416,
      "file_path": "django/db/backends/oracle/introspection.py",
      "start_line": 99,
      "end_line": 185,
      "tokens": 556,
      "context_length": 25280,
      "file_pos": 19
    },
    {
      "position": 66,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_column_type_sql_BaseDatabaseSchemaEditor._alter_column_type_sql.3.1",
      "distance": 1.0757954120635986,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1202,
      "end_line": 1231,
      "tokens": 231,
      "context_length": 25511,
      "file_pos": 19
    },
    {
      "position": 67,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._delete_primary_key_",
      "distance": 1.0802074670791626,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1706,
      "end_line": 1743,
      "tokens": 317,
      "context_length": 25828,
      "file_pos": 19
    },
    {
      "position": 68,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._unique_sql_BaseDatabaseSchemaEditor._unique_sql.4.1",
      "distance": 1.0815662145614624,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1507,
      "end_line": 1545,
      "tokens": 240,
      "context_length": 26068,
      "file_pos": 19
    },
    {
      "position": 69,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_DatabaseSchemaEditor.quote_value_DatabaseSchemaEditor.quote_value.4.6.6.1",
      "distance": 1.0867767333984375,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 43,
      "end_line": 72,
      "tokens": 245,
      "context_length": 26313
    },
    {
      "position": 70,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._check_long_column_names_Model._check_long_column_names.11.1",
      "distance": 1.0873191356658936,
      "file_path": "django/db/models/base.py",
      "start_line": 2160,
      "end_line": 2241,
      "tokens": 592,
      "context_length": 26905,
      "file_pos": 19
    },
    {
      "position": 71,
      "id": "/tmp/repos/django/django/contrib/gis/db/backends/spatialite/schema.py_SpatialiteSchemaEditor.alter_db_table_",
      "distance": 1.088821291923523,
      "file_path": "django/contrib/gis/db/backends/spatialite/schema.py",
      "start_line": 137,
      "end_line": 192,
      "tokens": 404,
      "context_length": 27309
    },
    {
      "position": 72,
      "id": "/tmp/repos/django/django/db/models/base.py_Model.check_Model.check.3.1",
      "distance": 1.0916647911071777,
      "file_path": "django/db/models/base.py",
      "start_line": 1526,
      "end_line": 1561,
      "tokens": 277,
      "context_length": 27586,
      "file_pos": 19
    },
    {
      "position": 73,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._get_index_tablespace_sql_BaseDatabaseSchemaEditor._index_include_sql.2.1",
      "distance": 1.0920839309692383,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1297,
      "end_line": 1320,
      "tokens": 215,
      "context_length": 27801,
      "file_pos": 19
    },
    {
      "position": 74,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_DatabaseSchemaEditor._delete_composed_index_",
      "distance": 1.092381477355957,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 205,
      "end_line": 231,
      "tokens": 260,
      "context_length": 28061,
      "file_pos": 19
    },
    {
      "position": 75,
      "id": "/tmp/repos/django/django/contrib/gis/db/backends/mysql/schema.py_MySQLGISSchemaEditor.column_sql_MySQLGISSchemaEditor.add_field.2",
      "distance": 1.0923871994018555,
      "file_path": "django/contrib/gis/db/backends/mysql/schema.py",
      "start_line": 33,
      "end_line": 55,
      "tokens": 197,
      "context_length": 28258
    },
    {
      "position": 76,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/introspection.py_DatabaseIntrospection._parse_table_constraints_DatabaseIntrospection._parse_table_constraints.statement.9.1",
      "distance": 1.0936837196350098,
      "file_path": "django/db/backends/sqlite3/introspection.py",
      "start_line": 265,
      "end_line": 302,
      "tokens": 294,
      "context_length": 28552
    },
    {
      "position": 77,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_DatabaseSchemaEditor._field_should_be_indexed_DatabaseSchemaEditor._field_should_be_indexed.7.1",
      "distance": 1.0947827100753784,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 137,
      "end_line": 153,
      "tokens": 144,
      "context_length": 28696,
      "file_pos": 21
    },
    {
      "position": 78,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_column_default_sql_BaseDatabaseSchemaEditor._alter_column_default_sql.8.1",
      "distance": 1.095900297164917,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1164,
      "end_line": 1200,
      "tokens": 269,
      "context_length": 28965,
      "file_pos": 21
    },
    {
      "position": 79,
      "id": "/tmp/repos/django/django/contrib/gis/db/backends/mysql/schema.py_logging_MySQLGISSchemaEditor.quote_value.2.1",
      "distance": 1.096265435218811,
      "file_path": "django/contrib/gis/db/backends/mysql/schema.py",
      "start_line": 1,
      "end_line": 31,
      "tokens": 233,
      "context_length": 29198
    },
    {
      "position": 80,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.table_sql_BaseDatabaseSchemaEditor.table_sql.12.1",
      "distance": 1.0970523357391357,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 203,
      "end_line": 282,
      "tokens": 651,
      "context_length": 29849,
      "file_pos": 21
    },
    {
      "position": 81,
      "id": "/tmp/repos/django/django/contrib/admin/models.py_LogEntryManager_LogEntryManager.log_action.2.1",
      "distance": 1.0974080562591553,
      "file_path": "django/contrib/admin/models.py",
      "start_line": 24,
      "end_line": 45,
      "tokens": 122,
      "context_length": 29971
    },
    {
      "position": 82,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._save_table_Model._save_table.15.1",
      "distance": 1.1050443649291992,
      "file_path": "django/db/models/base.py",
      "start_line": 938,
      "end_line": 1026,
      "tokens": 690,
      "context_length": 30661,
      "file_pos": 22
    },
    {
      "position": 83,
      "id": "/tmp/repos/django/django/contrib/admin/options.py_InlineModelAdmin.has_add_permission_",
      "distance": 1.107316493988037,
      "file_path": "django/contrib/admin/options.py",
      "start_line": 2466,
      "end_line": 2501,
      "tokens": 315,
      "context_length": 30976
    },
    {
      "position": 84,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_AlterModelOptions_AlterModelOptions.migration_name_fragment.1.1",
      "distance": 1.1073342561721802,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 689,
      "end_line": 741,
      "tokens": 320,
      "context_length": 31296,
      "file_pos": 24
    },
    {
      "position": 85,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/introspection.py_DatabaseIntrospection.get_table_description_DatabaseIntrospection.get_table_description.8.1",
      "distance": 1.1096034049987793,
      "file_path": "django/db/backends/sqlite3/introspection.py",
      "start_line": 88,
      "end_line": 133,
      "tokens": 315,
      "context_length": 31611
    },
    {
      "position": 86,
      "id": "/tmp/repos/django/django/db/backends/ddl_references.py_Table_TableColumns.rename_column_references.1.1.1.1",
      "distance": 1.111194372177124,
      "file_path": "django/db/backends/ddl_references.py",
      "start_line": 44,
      "end_line": 76,
      "tokens": 208,
      "context_length": 31819
    },
    {
      "position": 87,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_DatabaseSchemaEditor.remove_constraint_DatabaseSchemaEditor.remove_index.2",
      "distance": 1.1130014657974243,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 120,
      "end_line": 135,
      "tokens": 116,
      "context_length": 31935,
      "file_pos": 25
    },
    {
      "position": 88,
      "id": "/tmp/repos/django/django/db/migrations/questioner.py_InteractiveMigrationQuestioner.ask_auto_now_add_addition_InteractiveMigrationQuestioner.ask_auto_now_add_addition.3.1",
      "distance": 1.1140975952148438,
      "file_path": "django/db/migrations/questioner.py",
      "start_line": 249,
      "end_line": 267,
      "tokens": 177,
      "context_length": 32112
    },
    {
      "position": 89,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._delete_composed_index_BaseDatabaseSchemaEditor._delete_composed_index.7",
      "distance": 1.1163800954818726,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 564,
      "end_line": 596,
      "tokens": 268,
      "context_length": 32380,
      "file_pos": 26
    },
    {
      "position": 90,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/introspection.py_DatabaseIntrospection._parse_column_or_constraint_definition_DatabaseIntrospection._parse_column_or_constraint_definition.13.1",
      "distance": 1.1169006824493408,
      "file_path": "django/db/backends/sqlite3/introspection.py",
      "start_line": 165,
      "end_line": 263,
      "tokens": 767,
      "context_length": 33147
    },
    {
      "position": 91,
      "id": "/tmp/repos/django/django/contrib/admin/models.py_LogEntry_LogEntry.__repr__.1.1",
      "distance": 1.1173841953277588,
      "file_path": "django/contrib/admin/models.py",
      "start_line": 48,
      "end_line": 85,
      "tokens": 250,
      "context_length": 33397
    },
    {
      "position": 92,
      "id": "/tmp/repos/django/django/db/backends/ddl_references.py_IndexColumns_IndexColumns.__str__",
      "distance": 1.1178981065750122,
      "file_path": "django/db/backends/ddl_references.py",
      "start_line": 115,
      "end_line": 135,
      "tokens": 167,
      "context_length": 33564
    },
    {
      "position": 93,
      "id": "/tmp/repos/django/django/db/backends/mysql/compiler.py_SQLUpdateCompiler_",
      "distance": 1.1183454990386963,
      "file_path": "django/db/backends/mysql/compiler.py",
      "start_line": 55,
      "end_line": 85,
      "tokens": 240,
      "context_length": 33804
    },
    {
      "position": 94,
      "id": "/tmp/repos/django/django/db/backends/postgresql/introspection.py_1_DatabaseIntrospection.data_types_reverse.ignored_tables.1",
      "distance": 1.1185914278030396,
      "file_path": "django/db/backends/postgresql/introspection.py",
      "start_line": 1,
      "end_line": 38,
      "tokens": 308,
      "context_length": 34112,
      "file_pos": 27
    },
    {
      "position": 95,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._effective_default_BaseDatabaseSchemaEditor._effective_default.2.5.1",
      "distance": 1.1187312602996826,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 398,
      "end_line": 420,
      "tokens": 176,
      "context_length": 34288,
      "file_pos": 27
    },
    {
      "position": 96,
      "id": "/tmp/repos/django/django/core/management/commands/inspectdb.py_Command.normalize_col_name_Command.normalize_col_name.16.1",
      "distance": 1.1192877292633057,
      "file_path": "django/core/management/commands/inspectdb.py",
      "start_line": 255,
      "end_line": 313,
      "tokens": 487,
      "context_length": 34775,
      "file_pos": 27
    },
    {
      "position": 97,
      "id": "/tmp/repos/django/django/db/backends/oracle/features.py_1_DatabaseFeatures.test_now_utc_template.1",
      "distance": 1.119559407234192,
      "file_path": "django/db/backends/oracle/features.py",
      "start_line": 1,
      "end_line": 86,
      "tokens": 737,
      "context_length": 35512,
      "file_pos": 28
    },
    {
      "position": 98,
      "id": "/tmp/repos/django/django/core/management/commands/createcachetable.py_Command.handle_Command.handle.4.3.1.2.1",
      "distance": 1.1200206279754639,
      "file_path": "django/core/management/commands/createcachetable.py",
      "start_line": 42,
      "end_line": 54,
      "tokens": 121,
      "context_length": 35633
    },
    {
      "position": 99,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/features.py_DatabaseFeatures.django_test_skips_DatabaseFeatures.django_test_skips.4.1",
      "distance": 1.1208062171936035,
      "file_path": "django/db/backends/sqlite3/features.py",
      "start_line": 63,
      "end_line": 130,
      "tokens": 528,
      "context_length": 36161
    },
    {
      "position": 100,
      "id": "/tmp/repos/django/django/db/models/base.py_Model.from_db_Model.__reduce__.4.1",
      "distance": 1.121377944946289,
      "file_path": "django/db/models/base.py",
      "start_line": 574,
      "end_line": 612,
      "tokens": 326,
      "context_length": 36487,
      "file_pos": 29
    },
    {
      "position": 101,
      "id": "/tmp/repos/django/django/db/models/options.py_bisect_DEFAULT_NAMES.1",
      "distance": 1.122213363647461,
      "file_path": "django/db/models/options.py",
      "start_line": 1,
      "end_line": 57,
      "tokens": 347,
      "context_length": 36834,
      "file_pos": 29
    },
    {
      "position": 102,
      "id": "/tmp/repos/django/django/db/backends/ddl_references.py_Expressions_",
      "distance": 1.1225796937942505,
      "file_path": "django/db/backends/ddl_references.py",
      "start_line": 223,
      "end_line": 255,
      "tokens": 252,
      "context_length": 37086
    },
    {
      "position": 103,
      "id": "/tmp/repos/django/django/contrib/gis/db/backends/oracle/schema.py_OracleGISSchemaEditor.create_model_",
      "distance": 1.1230499744415283,
      "file_path": "django/contrib/gis/db/backends/oracle/schema.py",
      "start_line": 74,
      "end_line": 122,
      "tokens": 323,
      "context_length": 37409
    },
    {
      "position": 104,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_TextField_TextField._check_db_collation.3.1",
      "distance": 1.1244878768920898,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 2332,
      "end_line": 2366,
      "tokens": 229,
      "context_length": 37638,
      "file_pos": 31
    },
    {
      "position": 105,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._perform_date_checks_Model._perform_date_checks.3.1",
      "distance": 1.1247111558914185,
      "file_path": "django/db/models/base.py",
      "start_line": 1350,
      "end_line": 1379,
      "tokens": 294,
      "context_length": 37932,
      "file_pos": 31
    },
    {
      "position": 106,
      "id": "/tmp/repos/django/django/contrib/admin/options.py_ModelAdmin._changeform_view_ModelAdmin._changeform_view.14.3.title.1",
      "distance": 1.1258974075317383,
      "file_path": "django/contrib/admin/options.py",
      "start_line": 1748,
      "end_line": 1850,
      "tokens": 780,
      "context_length": 38712
    },
    {
      "position": 107,
      "id": "/tmp/repos/django/django/db/models/base.py_Model.delete_Model._get_FIELD_display.4.1",
      "distance": 1.125963568687439,
      "file_path": "django/db/models/base.py",
      "start_line": 1123,
      "end_line": 1150,
      "tokens": 238,
      "context_length": 38950,
      "file_pos": 31
    },
    {
      "position": 108,
      "id": "/tmp/repos/django/django/db/migrations/operations/__init__.py_RenameField_",
      "distance": 1.1261951923370361,
      "file_path": "django/db/migrations/operations/__init__.py",
      "start_line": 1,
      "end_line": 43,
      "tokens": 227,
      "context_length": 39177,
      "file_pos": 32
    },
    {
      "position": 109,
      "id": "/tmp/repos/django/django/db/models/base.py_Model_Model.__init__.cls.20",
      "distance": 1.1263408660888672,
      "file_path": "django/db/models/base.py",
      "start_line": 459,
      "end_line": 572,
      "tokens": 957,
      "context_length": 40134,
      "file_pos": 32
    },
    {
      "position": 110,
      "id": "/tmp/repos/django/django/db/backends/postgresql/creation.py_sys_DatabaseCreation._database_exists.2.1",
      "distance": 1.1263697147369385,
      "file_path": "django/db/backends/postgresql/creation.py",
      "start_line": 1,
      "end_line": 38,
      "tokens": 271,
      "context_length": 40405
    },
    {
      "position": 111,
      "id": "/tmp/repos/django/django/db/backends/mysql/creation.py_os_DatabaseCreation._execute_create_test_db.1.2.1.3.1",
      "distance": 1.1263744831085205,
      "file_path": "django/db/backends/mysql/creation.py",
      "start_line": 1,
      "end_line": 29,
      "tokens": 221,
      "context_length": 40626
    },
    {
      "position": 112,
      "id": "/tmp/repos/django/django/contrib/admin/models.py_json_ACTION_FLAG_CHOICES.1",
      "distance": 1.1288375854492188,
      "file_path": "django/contrib/admin/models.py",
      "start_line": 1,
      "end_line": 21,
      "tokens": 123,
      "context_length": 40749
    },
    {
      "position": 113,
      "id": "/tmp/repos/django/django/contrib/gis/db/backends/oracle/schema.py_OracleGISSchemaEditor.column_sql_OracleGISSchemaEditor.column_sql.3.1",
      "distance": 1.1308993101119995,
      "file_path": "django/contrib/gis/db/backends/oracle/schema.py",
      "start_line": 44,
      "end_line": 72,
      "tokens": 237,
      "context_length": 40986
    },
    {
      "position": 114,
      "id": "/tmp/repos/django/django/core/management/commands/inspectdb.py_Command.get_meta_",
      "distance": 1.132150650024414,
      "file_path": "django/core/management/commands/inspectdb.py",
      "start_line": 355,
      "end_line": 395,
      "tokens": 324,
      "context_length": 41310,
      "file_pos": 34
    },
    {
      "position": 115,
      "id": "/tmp/repos/django/django/core/management/commands/createcachetable.py_Command.create_table_",
      "distance": 1.1322925090789795,
      "file_path": "django/core/management/commands/createcachetable.py",
      "start_line": 56,
      "end_line": 131,
      "tokens": 552,
      "context_length": 41862
    },
    {
      "position": 116,
      "id": "/tmp/repos/django/django/contrib/admin/options.py_ModelAdmin.log_deletion_ModelAdmin._get_action_description.1.1",
      "distance": 1.1354964971542358,
      "file_path": "django/contrib/admin/options.py",
      "start_line": 948,
      "end_line": 974,
      "tokens": 212,
      "context_length": 42074
    },
    {
      "position": 117,
      "id": "/tmp/repos/django/django/db/migrations/questioner.py_InteractiveMigrationQuestioner.ask_not_null_addition_InteractiveMigrationQuestioner.ask_not_null_addition.3.1",
      "distance": 1.1361844539642334,
      "file_path": "django/db/migrations/questioner.py",
      "start_line": 166,
      "end_line": 187,
      "tokens": 188,
      "context_length": 42262
    },
    {
      "position": 118,
      "id": "/tmp/repos/django/django/db/backends/postgresql/operations.py_DatabaseOperations_DatabaseOperations.5.integerfield_type_map.1",
      "distance": 1.1362425088882446,
      "file_path": "django/db/backends/postgresql/operations.py",
      "start_line": 25,
      "end_line": 56,
      "tokens": 194,
      "context_length": 42456
    },
    {
      "position": 119,
      "id": "/tmp/repos/django/django/db/backends/mysql/features.py_DatabaseFeatures.test_collations_DatabaseFeatures.test_now_utc_template.1",
      "distance": 1.1362539529800415,
      "file_path": "django/db/backends/mysql/features.py",
      "start_line": 63,
      "end_line": 81,
      "tokens": 177,
      "context_length": 42633,
      "file_pos": 35
    },
    {
      "position": 120,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.skip_default_BaseDatabaseSchemaEditor._column_default_sql.2.1",
      "distance": 1.1364548206329346,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 368,
      "end_line": 396,
      "tokens": 205,
      "context_length": 42838,
      "file_pos": 35
    },
    {
      "position": 121,
      "id": "/tmp/repos/django/django/db/backends/mysql/introspection.py_1_InfoLine.1",
      "distance": 1.1366444826126099,
      "file_path": "django/db/backends/mysql/introspection.py",
      "start_line": 1,
      "end_line": 19,
      "tokens": 139,
      "context_length": 42977,
      "file_pos": 35
    },
    {
      "position": 122,
      "id": "/tmp/repos/django/django/db/backends/mysql/validation.py_1_DatabaseValidation._check_sql_mode.2.1",
      "distance": 1.1380168199539185,
      "file_path": "django/db/backends/mysql/validation.py",
      "start_line": 1,
      "end_line": 36,
      "tokens": 246,
      "context_length": 43223
    },
    {
      "position": 123,
      "id": "/tmp/repos/django/django/db/backends/base/features.py_BaseDatabaseFeatures.minimum_database_version.148_BaseDatabaseFeatures.minimum_database_version.supports_explaining_query_execution.2.1",
      "distance": 1.1383808851242065,
      "file_path": "django/db/backends/base/features.py",
      "start_line": 223,
      "end_line": 366,
      "tokens": 1259,
      "context_length": 44482,
      "file_pos": 36
    },
    {
      "position": 124,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_DatabaseSchemaEditor._remake_table_DatabaseSchemaEditor._remake_table.22",
      "distance": 1.1395034790039062,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 176,
      "end_line": 255,
      "tokens": 760,
      "context_length": 45242
    },
    {
      "position": 125,
      "id": "/tmp/repos/django/django/db/backends/mysql/introspection.py_DatabaseIntrospection_DatabaseIntrospection.data_types_reverse.1",
      "distance": 1.1406131982803345,
      "file_path": "django/db/backends/mysql/introspection.py",
      "start_line": 22,
      "end_line": 45,
      "tokens": 227,
      "context_length": 45469,
      "file_pos": 36
    },
    {
      "position": 126,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_CreateModel_CreateModel.migration_name_fragment.1.1",
      "distance": 1.140779733657837,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 41,
      "end_line": 111,
      "tokens": 524,
      "context_length": 45993,
      "file_pos": 36
    },
    {
      "position": 127,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_column_null_sql_BaseDatabaseSchemaEditor._alter_column_null_sql.2.3.3.1",
      "distance": 1.1410118341445923,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1135,
      "end_line": 1162,
      "tokens": 195,
      "context_length": 46188,
      "file_pos": 36
    },
    {
      "position": 128,
      "id": "/tmp/repos/django/django/db/models/__init__.py_1_",
      "distance": 1.1420087814331055,
      "file_path": "django/db/models/__init__.py",
      "start_line": 1,
      "end_line": 116,
      "tokens": 682,
      "context_length": 46870
    },
    {
      "position": 129,
      "id": "/tmp/repos/django/django/db/backends/postgresql/introspection.py_DatabaseIntrospection.data_types_reverse.get_constraints.10_",
      "distance": 1.1429975032806396,
      "file_path": "django/db/backends/postgresql/introspection.py",
      "start_line": 265,
      "end_line": 297,
      "tokens": 223,
      "context_length": 47093,
      "file_pos": 37
    },
    {
      "position": 130,
      "id": "/tmp/repos/django/django/contrib/gis/db/backends/spatialite/schema.py_SpatialiteSchemaEditor.column_sql_SpatialiteSchemaEditor.column_sql.6.1",
      "distance": 1.1434577703475952,
      "file_path": "django/contrib/gis/db/backends/spatialite/schema.py",
      "start_line": 39,
      "end_line": 66,
      "tokens": 210,
      "context_length": 47303
    },
    {
      "position": 131,
      "id": "/tmp/repos/django/django/db/models/options.py_Options.managers_Options.managers_map.1.1",
      "distance": 1.143730878829956,
      "file_path": "django/db/models/options.py",
      "start_line": 441,
      "end_line": 463,
      "tokens": 164,
      "context_length": 47467,
      "file_pos": 37
    },
    {
      "position": 132,
      "id": "/tmp/repos/django/django/db/migrations/autodetector.py_MigrationAutodetector.generate_altered_db_table_MigrationAutodetector.generate_altered_db_table.2.6.1",
      "distance": 1.1437795162200928,
      "file_path": "django/db/migrations/autodetector.py",
      "start_line": 1534,
      "end_line": 1553,
      "tokens": 187,
      "context_length": 47654,
      "file_pos": 38
    },
    {
      "position": 133,
      "id": "/tmp/repos/django/django/contrib/admin/options.py_BaseModelAdmin_BaseModelAdmin.__init__.overrides.self.formfield_overrides.1",
      "distance": 1.1451866626739502,
      "file_path": "django/contrib/admin/options.py",
      "start_line": 117,
      "end_line": 147,
      "tokens": 223,
      "context_length": 47877
    },
    {
      "position": 134,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._get_pk_val_Model.get_deferred_fields.2.1",
      "distance": 1.145888090133667,
      "file_path": "django/db/models/base.py",
      "start_line": 653,
      "end_line": 673,
      "tokens": 176,
      "context_length": 48053,
      "file_pos": 38
    },
    {
      "position": 135,
      "id": "/tmp/repos/django/django/db/backends/base/operations.py_BaseDatabaseOperations.explain_query_prefix_",
      "distance": 1.146500825881958,
      "file_path": "django/db/backends/base/operations.py",
      "start_line": 752,
      "end_line": 778,
      "tokens": 222,
      "context_length": 48275
    },
    {
      "position": 136,
      "id": "/tmp/repos/django/django/db/models/options.py_Options._prepare_Options._prepare.2.1.4.3",
      "distance": 1.1480224132537842,
      "file_path": "django/db/models/options.py",
      "start_line": 287,
      "end_line": 329,
      "tokens": 355,
      "context_length": 48630,
      "file_pos": 39
    },
    {
      "position": 137,
      "id": "/tmp/repos/django/django/db/backends/oracle/introspection.py_1_DatabaseIntrospection.data_types_reverse.1.2.1.1",
      "distance": 1.1482996940612793,
      "file_path": "django/db/backends/oracle/introspection.py",
      "start_line": 1,
      "end_line": 49,
      "tokens": 447,
      "context_length": 49077,
      "file_pos": 39
    },
    {
      "position": 138,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._check_local_fields_Model._check_local_fields.8.1",
      "distance": 1.1489611864089966,
      "file_path": "django/db/models/base.py",
      "start_line": 1998,
      "end_line": 2051,
      "tokens": 359,
      "context_length": 49436,
      "file_pos": 39
    },
    {
      "position": 139,
      "id": "/tmp/repos/django/django/utils/translation/__init__.py_1_12",
      "distance": 1.149061918258667,
      "file_path": "django/utils/translation/__init__.py",
      "start_line": 1,
      "end_line": 43,
      "tokens": 255,
      "context_length": 49691
    },
    {
      "position": 140,
      "id": "/tmp/repos/django/django/db/backends/mysql/introspection.py_DatabaseIntrospection.get_constraints.11_",
      "distance": 1.1492640972137451,
      "file_path": "django/db/backends/mysql/introspection.py",
      "start_line": 313,
      "end_line": 337,
      "tokens": 247,
      "context_length": 49938,
      "file_pos": 40
    },
    {
      "position": 141,
      "id": "/tmp/repos/django/django/db/models/sql/__init__.py__",
      "distance": 1.1516250371932983,
      "file_path": "django/db/models/sql/__init__.py",
      "start_line": 1,
      "end_line": 7,
      "tokens": 0,
      "context_length": 49938
    },
    {
      "position": 142,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._get_field_value_map_Model.validate_unique.6.1",
      "distance": 1.1517492532730103,
      "file_path": "django/db/models/base.py",
      "start_line": 1196,
      "end_line": 1236,
      "tokens": 310,
      "context_length": 50248,
      "file_pos": 41
    },
    {
      "position": 143,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._check_default_pk_Model._check_default_pk.2.1",
      "distance": 1.15182363986969,
      "file_path": "django/db/models/base.py",
      "start_line": 1563,
      "end_line": 1593,
      "tokens": 247,
      "context_length": 50495,
      "file_pos": 41
    },
    {
      "position": 144,
      "id": "/tmp/repos/django/django/db/backends/base/features.py_1_BaseDatabaseFeatures",
      "distance": 1.152158498764038,
      "file_path": "django/db/backends/base/features.py",
      "start_line": 1,
      "end_line": 385,
      "tokens": 20,
      "context_length": 50515,
      "file_pos": 41
    },
    {
      "position": 145,
      "id": "/tmp/repos/django/django/db/models/fields/related.py_ForeignKey_ForeignKey.check.1.1",
      "distance": 1.1521586179733276,
      "file_path": "django/db/models/fields/related.py",
      "start_line": 901,
      "end_line": 990,
      "tokens": 583,
      "context_length": 51098,
      "file_pos": 42
    },
    {
      "position": 146,
      "id": "/tmp/repos/django/django/db/models/options.py_Options.add_manager_Options.add_field.5.12.3.1",
      "distance": 1.1527225971221924,
      "file_path": "django/db/models/options.py",
      "start_line": 331,
      "end_line": 367,
      "tokens": 338,
      "context_length": 51436,
      "file_pos": 42
    },
    {
      "position": 147,
      "id": "/tmp/repos/django/django/db/backends/mysql/base.py_DatabaseWrapper.create_cursor_DatabaseWrapper.enable_constraint_checking.5.2.self.needs_rollback.1",
      "distance": 1.1528875827789307,
      "file_path": "django/db/backends/mysql/base.py",
      "start_line": 276,
      "end_line": 312,
      "tokens": 259,
      "context_length": 51695
    }
  ],
  "files": [
    {
      "file_path": "django/db/backends/mysql/schema.py",
      "position": 1,
      "tokens": 1960,
      "context_length": 1960
    },
    {
      "file_path": "django/db/backends/sqlite3/schema.py",
      "position": 2,
      "tokens": 4715,
      "context_length": 6675
    },
    {
      "file_path": "django/db/backends/postgresql/schema.py",
      "position": 3,
      "tokens": 2835,
      "context_length": 9510
    },
    {
      "file_path": "django/db/backends/oracle/schema.py",
      "position": 4,
      "tokens": 2330,
      "context_length": 11840
    },
    {
      "file_path": "django/db/backends/base/schema.py",
      "position": 5,
      "tokens": 13761,
      "context_length": 25601
    },
    {
      "file_path": "django/db/backends/mysql/features.py",
      "position": 6,
      "tokens": 2321,
      "context_length": 27922
    },
    {
      "file_path": "django/db/backends/sqlite3/features.py",
      "position": 7,
      "tokens": 1344,
      "context_length": 29266
    },
    {
      "file_path": "django/db/backends/base/features.py",
      "position": 8,
      "tokens": 3157,
      "context_length": 32423
    },
    {
      "file_path": "django/db/backends/base/creation.py",
      "position": 9,
      "tokens": 2941,
      "context_length": 35364
    },
    {
      "file_path": "django/db/models/base.py",
      "position": 10,
      "tokens": 18574,
      "context_length": 53938
    },
    {
      "file_path": "django/db/backends/mysql/introspection.py",
      "position": 11,
      "tokens": 2590,
      "context_length": 56528
    },
    {
      "file_path": "django/core/management/commands/inspectdb.py",
      "position": 12,
      "tokens": 2972,
      "context_length": 59500
    },
    {
      "file_path": "django/contrib/gis/db/backends/postgis/schema.py",
      "position": 13,
      "tokens": 698,
      "context_length": 60198
    },
    {
      "file_path": "django/contrib/gis/db/backends/spatialite/schema.py",
      "position": 14,
      "tokens": 1394,
      "context_length": 61592
    },
    {
      "file_path": "django/db/models/options.py",
      "position": 15,
      "tokens": 7683,
      "context_length": 69275
    },
    {
      "file_path": "django/db/backends/postgresql/features.py",
      "position": 16,
      "tokens": 887,
      "context_length": 70162
    },
    {
      "file_path": "django/db/backends/postgresql/introspection.py",
      "position": 17,
      "tokens": 2452,
      "context_length": 72614
    },
    {
      "file_path": "django/db/models/sql/query.py",
      "position": 18,
      "tokens": 22749,
      "context_length": 95363
    },
    {
      "file_path": "django/db/backends/oracle/introspection.py",
      "position": 19,
      "tokens": 2736,
      "context_length": 98099
    },
    {
      "file_path": "django/contrib/gis/db/backends/mysql/schema.py",
      "position": 20,
      "tokens": 657,
      "context_length": 98756
    },
    {
      "file_path": "django/db/backends/sqlite3/introspection.py",
      "position": 21,
      "tokens": 3325,
      "context_length": 102081
    },
    {
      "file_path": "django/contrib/admin/models.py",
      "position": 22,
      "tokens": 1193,
      "context_length": 103274
    },
    {
      "file_path": "django/contrib/admin/options.py",
      "position": 23,
      "tokens": 19239,
      "context_length": 122513
    },
    {
      "file_path": "django/db/migrations/operations/models.py",
      "position": 24,
      "tokens": 7713,
      "context_length": 130226
    },
    {
      "file_path": "django/db/backends/ddl_references.py",
      "position": 25,
      "tokens": 1629,
      "context_length": 131855
    },
    {
      "file_path": "django/db/migrations/questioner.py",
      "position": 26,
      "tokens": 2696,
      "context_length": 134551
    },
    {
      "file_path": "django/db/backends/mysql/compiler.py",
      "position": 27,
      "tokens": 647,
      "context_length": 135198
    },
    {
      "file_path": "django/db/backends/oracle/features.py",
      "position": 28,
      "tokens": 1336,
      "context_length": 136534
    },
    {
      "file_path": "django/core/management/commands/createcachetable.py",
      "position": 29,
      "tokens": 891,
      "context_length": 137425
    },
    {
      "file_path": "django/contrib/gis/db/backends/oracle/schema.py",
      "position": 30,
      "tokens": 911,
      "context_length": 138336
    },
    {
      "file_path": "django/db/models/fields/__init__.py",
      "position": 31,
      "tokens": 18714,
      "context_length": 157050
    },
    {
      "file_path": "django/db/migrations/operations/__init__.py",
      "position": 32,
      "tokens": 227,
      "context_length": 157277
    },
    {
      "file_path": "django/db/backends/postgresql/creation.py",
      "position": 33,
      "tokens": 689,
      "context_length": 157966
    },
    {
      "file_path": "django/db/backends/mysql/creation.py",
      "position": 34,
      "tokens": 669,
      "context_length": 158635
    },
    {
      "file_path": "django/db/backends/postgresql/operations.py",
      "position": 35,
      "tokens": 3385,
      "context_length": 162020
    },
    {
      "file_path": "django/db/backends/mysql/validation.py",
      "position": 36,
      "tokens": 531,
      "context_length": 162551
    },
    {
      "file_path": "django/db/models/__init__.py",
      "position": 37,
      "tokens": 682,
      "context_length": 163233
    },
    {
      "file_path": "django/db/migrations/autodetector.py",
      "position": 38,
      "tokens": 13461,
      "context_length": 176694
    },
    {
      "file_path": "django/db/backends/base/operations.py",
      "position": 39,
      "tokens": 6030,
      "context_length": 182724
    },
    {
      "file_path": "django/utils/translation/__init__.py",
      "position": 40,
      "tokens": 1876,
      "context_length": 184600
    },
    {
      "file_path": "django/db/models/sql/__init__.py",
      "position": 41,
      "tokens": 66,
      "context_length": 184666
    },
    {
      "file_path": "django/db/models/fields/related.py",
      "position": 42,
      "tokens": 14504,
      "context_length": 199170
    },
    {
      "file_path": "django/db/backends/mysql/base.py",
      "position": 43,
      "tokens": 3512,
      "context_length": 202682
    }
  ]
}