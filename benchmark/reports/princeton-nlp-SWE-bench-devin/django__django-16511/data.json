{
  "instance_id": "django__django-16511",
  "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 9d621c4f69..12dcfc1c8a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -926,20 +926,24 @@ class QuerySet(AltersData):\n             **kwargs,\n         )\n \n-    def update_or_create(self, defaults=None, **kwargs):\n+    def update_or_create(self, defaults=None, create_defaults=None, **kwargs):\n         \"\"\"\n         Look up an object with the given kwargs, updating one with defaults\n-        if it exists, otherwise create a new one.\n+        if it exists, otherwise create a new one with create_defaults.\n         Return a tuple (object, created), where created is a boolean\n         specifying whether an object was created.\n         \"\"\"\n         defaults = defaults or {}\n+        create_defaults = create_defaults or {}\n         self._for_write = True\n         with transaction.atomic(using=self.db):\n             # Lock the row so that a concurrent update is blocked until\n             # update_or_create() has performed its save.\n             obj, created = self.select_for_update().get_or_create(defaults, **kwargs)\n             if created:\n+                for k, v in resolve_callables(create_defaults):\n+                    setattr(obj, k, v)\n+                obj.save(using=self.db)\n                 return obj, created\n             for k, v in resolve_callables(defaults):\n                 setattr(obj, k, v)\n@@ -964,9 +968,10 @@ class QuerySet(AltersData):\n                 obj.save(using=self.db)\n         return obj, False\n \n-    async def aupdate_or_create(self, defaults=None, **kwargs):\n+    async def aupdate_or_create(self, defaults=None, create_defaults=None, **kwargs):\n         return await sync_to_async(self.update_or_create)(\n             defaults=defaults,\n+            create_defaults=create_defaults,\n             **kwargs,\n         )\n \n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "django/db/models/query.py"
  ],
  "repo": "django/django",
  "base_commit": "ecafcaf634fcef93f9da8cb12795273dd1c3a576",
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -926,25 +926,32 @@ async def aget_or_create(self, defaults=None, **kwargs):\n             **kwargs,\n         )\n \n-    def update_or_create(self, defaults=None, **kwargs):\n+    def update_or_create(self, defaults=None, create_defaults=None, **kwargs):\n         \"\"\"\n         Look up an object with the given kwargs, updating one with defaults\n-        if it exists, otherwise create a new one.\n+        if it exists, otherwise create a new one. Optionally, an object can\n+        be created with different values than defaults by using\n+        create_defaults.\n         Return a tuple (object, created), where created is a boolean\n         specifying whether an object was created.\n         \"\"\"\n-        defaults = defaults or {}\n+        if create_defaults is None:\n+            update_defaults = create_defaults = defaults or {}\n+        else:\n+            update_defaults = defaults or {}\n         self._for_write = True\n         with transaction.atomic(using=self.db):\n             # Lock the row so that a concurrent update is blocked until\n             # update_or_create() has performed its save.\n-            obj, created = self.select_for_update().get_or_create(defaults, **kwargs)\n+            obj, created = self.select_for_update().get_or_create(\n+                create_defaults, **kwargs\n+            )\n             if created:\n                 return obj, created\n-            for k, v in resolve_callables(defaults):\n+            for k, v in resolve_callables(update_defaults):\n                 setattr(obj, k, v)\n \n-            update_fields = set(defaults)\n+            update_fields = set(update_defaults)\n             concrete_field_names = self.model._meta._non_pk_concrete_field_names\n             # update_fields does not support non-concrete fields.\n             if concrete_field_names.issuperset(update_fields):\n@@ -964,9 +971,10 @@ def update_or_create(self, defaults=None, **kwargs):\n                 obj.save(using=self.db)\n         return obj, False\n \n-    async def aupdate_or_create(self, defaults=None, **kwargs):\n+    async def aupdate_or_create(self, defaults=None, create_defaults=None, **kwargs):\n         return await sync_to_async(self.update_or_create)(\n             defaults=defaults,\n+            create_defaults=create_defaults,\n             **kwargs,\n         )\n \n",
  "test_patch": "diff --git a/tests/async/test_async_queryset.py b/tests/async/test_async_queryset.py\n--- a/tests/async/test_async_queryset.py\n+++ b/tests/async/test_async_queryset.py\n@@ -99,10 +99,17 @@ async def test_aupdate_or_create(self):\n             id=self.s1.id, defaults={\"field\": 2}\n         )\n         self.assertEqual(instance, self.s1)\n+        self.assertEqual(instance.field, 2)\n         self.assertIs(created, False)\n         instance, created = await SimpleModel.objects.aupdate_or_create(field=4)\n         self.assertEqual(await SimpleModel.objects.acount(), 4)\n         self.assertIs(created, True)\n+        instance, created = await SimpleModel.objects.aupdate_or_create(\n+            field=5, defaults={\"field\": 7}, create_defaults={\"field\": 6}\n+        )\n+        self.assertEqual(await SimpleModel.objects.acount(), 5)\n+        self.assertIs(created, True)\n+        self.assertEqual(instance.field, 6)\n \n     @skipUnlessDBFeature(\"has_bulk_insert\")\n     @async_to_sync\ndiff --git a/tests/async/test_async_related_managers.py b/tests/async/test_async_related_managers.py\n--- a/tests/async/test_async_related_managers.py\n+++ b/tests/async/test_async_related_managers.py\n@@ -44,12 +44,18 @@ async def test_aupdate_or_create(self):\n         self.assertIs(created, True)\n         self.assertEqual(await self.mtm1.simples.acount(), 1)\n         self.assertEqual(new_simple.field, 2)\n-        new_simple, created = await self.mtm1.simples.aupdate_or_create(\n+        new_simple1, created = await self.mtm1.simples.aupdate_or_create(\n             id=new_simple.id, defaults={\"field\": 3}\n         )\n         self.assertIs(created, False)\n-        self.assertEqual(await self.mtm1.simples.acount(), 1)\n-        self.assertEqual(new_simple.field, 3)\n+        self.assertEqual(new_simple1.field, 3)\n+\n+        new_simple2, created = await self.mtm1.simples.aupdate_or_create(\n+            field=4, defaults={\"field\": 6}, create_defaults={\"field\": 5}\n+        )\n+        self.assertIs(created, True)\n+        self.assertEqual(new_simple2.field, 5)\n+        self.assertEqual(await self.mtm1.simples.acount(), 2)\n \n     async def test_aupdate_or_create_reverse(self):\n         new_relatedmodel, created = await self.s1.relatedmodel_set.aupdate_or_create()\ndiff --git a/tests/generic_relations/tests.py b/tests/generic_relations/tests.py\n--- a/tests/generic_relations/tests.py\n+++ b/tests/generic_relations/tests.py\n@@ -59,6 +59,19 @@ def test_generic_update_or_create_when_created(self):\n         self.assertTrue(created)\n         self.assertEqual(count + 1, self.bacon.tags.count())\n \n+    def test_generic_update_or_create_when_created_with_create_defaults(self):\n+        count = self.bacon.tags.count()\n+        tag, created = self.bacon.tags.update_or_create(\n+            # Since, the \"stinky\" tag doesn't exist create\n+            # a \"juicy\" tag.\n+            create_defaults={\"tag\": \"juicy\"},\n+            defaults={\"tag\": \"uncured\"},\n+            tag=\"stinky\",\n+        )\n+        self.assertEqual(tag.tag, \"juicy\")\n+        self.assertIs(created, True)\n+        self.assertEqual(count + 1, self.bacon.tags.count())\n+\n     def test_generic_update_or_create_when_updated(self):\n         \"\"\"\n         Should be able to use update_or_create from the generic related manager\n@@ -74,6 +87,17 @@ def test_generic_update_or_create_when_updated(self):\n         self.assertEqual(count + 1, self.bacon.tags.count())\n         self.assertEqual(tag.tag, \"juicy\")\n \n+    def test_generic_update_or_create_when_updated_with_defaults(self):\n+        count = self.bacon.tags.count()\n+        tag = self.bacon.tags.create(tag=\"stinky\")\n+        self.assertEqual(count + 1, self.bacon.tags.count())\n+        tag, created = self.bacon.tags.update_or_create(\n+            create_defaults={\"tag\": \"uncured\"}, defaults={\"tag\": \"juicy\"}, id=tag.id\n+        )\n+        self.assertIs(created, False)\n+        self.assertEqual(count + 1, self.bacon.tags.count())\n+        self.assertEqual(tag.tag, \"juicy\")\n+\n     async def test_generic_async_aupdate_or_create(self):\n         tag, created = await self.bacon.tags.aupdate_or_create(\n             id=self.fatty.id, defaults={\"tag\": \"orange\"}\n@@ -86,6 +110,22 @@ async def test_generic_async_aupdate_or_create(self):\n         self.assertEqual(await self.bacon.tags.acount(), 3)\n         self.assertEqual(tag.tag, \"pink\")\n \n+    async def test_generic_async_aupdate_or_create_with_create_defaults(self):\n+        tag, created = await self.bacon.tags.aupdate_or_create(\n+            id=self.fatty.id,\n+            create_defaults={\"tag\": \"pink\"},\n+            defaults={\"tag\": \"orange\"},\n+        )\n+        self.assertIs(created, False)\n+        self.assertEqual(tag.tag, \"orange\")\n+        self.assertEqual(await self.bacon.tags.acount(), 2)\n+        tag, created = await self.bacon.tags.aupdate_or_create(\n+            tag=\"pink\", create_defaults={\"tag\": \"brown\"}\n+        )\n+        self.assertIs(created, True)\n+        self.assertEqual(await self.bacon.tags.acount(), 3)\n+        self.assertEqual(tag.tag, \"brown\")\n+\n     def test_generic_get_or_create_when_created(self):\n         \"\"\"\n         Should be able to use get_or_create from the generic related manager\n@@ -550,6 +590,26 @@ def test_update_or_create_defaults(self):\n         self.assertFalse(created)\n         self.assertEqual(tag.content_object.id, diamond.id)\n \n+    def test_update_or_create_defaults_with_create_defaults(self):\n+        # update_or_create() should work with virtual fields (content_object).\n+        quartz = Mineral.objects.create(name=\"Quartz\", hardness=7)\n+        diamond = Mineral.objects.create(name=\"Diamond\", hardness=7)\n+        tag, created = TaggedItem.objects.update_or_create(\n+            tag=\"shiny\",\n+            create_defaults={\"content_object\": quartz},\n+            defaults={\"content_object\": diamond},\n+        )\n+        self.assertIs(created, True)\n+        self.assertEqual(tag.content_object.id, quartz.id)\n+\n+        tag, created = TaggedItem.objects.update_or_create(\n+            tag=\"shiny\",\n+            create_defaults={\"content_object\": quartz},\n+            defaults={\"content_object\": diamond},\n+        )\n+        self.assertIs(created, False)\n+        self.assertEqual(tag.content_object.id, diamond.id)\n+\n     def test_query_content_type(self):\n         msg = \"Field 'content_object' does not generate an automatic reverse relation\"\n         with self.assertRaisesMessage(FieldError, msg):\ndiff --git a/tests/get_or_create/models.py b/tests/get_or_create/models.py\n--- a/tests/get_or_create/models.py\n+++ b/tests/get_or_create/models.py\n@@ -6,6 +6,7 @@ class Person(models.Model):\n     last_name = models.CharField(max_length=100)\n     birthday = models.DateField()\n     defaults = models.TextField()\n+    create_defaults = models.TextField()\n \n \n class DefaultPerson(models.Model):\ndiff --git a/tests/get_or_create/tests.py b/tests/get_or_create/tests.py\n--- a/tests/get_or_create/tests.py\n+++ b/tests/get_or_create/tests.py\n@@ -330,15 +330,24 @@ def test_create(self):\n         self.assertEqual(p.birthday, date(1940, 10, 10))\n \n     def test_create_twice(self):\n-        params = {\n-            \"first_name\": \"John\",\n-            \"last_name\": \"Lennon\",\n-            \"birthday\": date(1940, 10, 10),\n-        }\n-        Person.objects.update_or_create(**params)\n-        # If we execute the exact same statement, it won't create a Person.\n-        p, created = Person.objects.update_or_create(**params)\n-        self.assertFalse(created)\n+        p, created = Person.objects.update_or_create(\n+            first_name=\"John\",\n+            last_name=\"Lennon\",\n+            create_defaults={\"birthday\": date(1940, 10, 10)},\n+            defaults={\"birthday\": date(1950, 2, 2)},\n+        )\n+        self.assertIs(created, True)\n+        self.assertEqual(p.birthday, date(1940, 10, 10))\n+        # If we execute the exact same statement, it won't create a Person, but\n+        # will update the birthday.\n+        p, created = Person.objects.update_or_create(\n+            first_name=\"John\",\n+            last_name=\"Lennon\",\n+            create_defaults={\"birthday\": date(1940, 10, 10)},\n+            defaults={\"birthday\": date(1950, 2, 2)},\n+        )\n+        self.assertIs(created, False)\n+        self.assertEqual(p.birthday, date(1950, 2, 2))\n \n     def test_integrity(self):\n         \"\"\"\n@@ -391,8 +400,14 @@ def test_create_with_related_manager(self):\n         \"\"\"\n         p = Publisher.objects.create(name=\"Acme Publishing\")\n         book, created = p.books.update_or_create(name=\"The Book of Ed & Fred\")\n-        self.assertTrue(created)\n+        self.assertIs(created, True)\n         self.assertEqual(p.books.count(), 1)\n+        book, created = p.books.update_or_create(\n+            name=\"Basics of Django\", create_defaults={\"name\": \"Advanced Django\"}\n+        )\n+        self.assertIs(created, True)\n+        self.assertEqual(book.name, \"Advanced Django\")\n+        self.assertEqual(p.books.count(), 2)\n \n     def test_update_with_related_manager(self):\n         \"\"\"\n@@ -406,6 +421,14 @@ def test_update_with_related_manager(self):\n         book, created = p.books.update_or_create(defaults={\"name\": name}, id=book.id)\n         self.assertFalse(created)\n         self.assertEqual(book.name, name)\n+        # create_defaults should be ignored.\n+        book, created = p.books.update_or_create(\n+            create_defaults={\"name\": \"Basics of Django\"},\n+            defaults={\"name\": name},\n+            id=book.id,\n+        )\n+        self.assertIs(created, False)\n+        self.assertEqual(book.name, name)\n         self.assertEqual(p.books.count(), 1)\n \n     def test_create_with_many(self):\n@@ -418,8 +441,16 @@ def test_create_with_many(self):\n         book, created = author.books.update_or_create(\n             name=\"The Book of Ed & Fred\", publisher=p\n         )\n-        self.assertTrue(created)\n+        self.assertIs(created, True)\n         self.assertEqual(author.books.count(), 1)\n+        book, created = author.books.update_or_create(\n+            name=\"Basics of Django\",\n+            publisher=p,\n+            create_defaults={\"name\": \"Advanced Django\"},\n+        )\n+        self.assertIs(created, True)\n+        self.assertEqual(book.name, \"Advanced Django\")\n+        self.assertEqual(author.books.count(), 2)\n \n     def test_update_with_many(self):\n         \"\"\"\n@@ -437,6 +468,14 @@ def test_update_with_many(self):\n         )\n         self.assertFalse(created)\n         self.assertEqual(book.name, name)\n+        # create_defaults should be ignored.\n+        book, created = author.books.update_or_create(\n+            create_defaults={\"name\": \"Basics of Django\"},\n+            defaults={\"name\": name},\n+            id=book.id,\n+        )\n+        self.assertIs(created, False)\n+        self.assertEqual(book.name, name)\n         self.assertEqual(author.books.count(), 1)\n \n     def test_defaults_exact(self):\n@@ -467,6 +506,34 @@ def test_defaults_exact(self):\n         self.assertFalse(created)\n         self.assertEqual(obj.defaults, \"another testing\")\n \n+    def test_create_defaults_exact(self):\n+        \"\"\"\n+        If you have a field named create_defaults and want to use it as an\n+        exact lookup, you need to use 'create_defaults__exact'.\n+        \"\"\"\n+        obj, created = Person.objects.update_or_create(\n+            first_name=\"George\",\n+            last_name=\"Harrison\",\n+            create_defaults__exact=\"testing\",\n+            create_defaults={\n+                \"birthday\": date(1943, 2, 25),\n+                \"create_defaults\": \"testing\",\n+            },\n+        )\n+        self.assertIs(created, True)\n+        self.assertEqual(obj.create_defaults, \"testing\")\n+        obj, created = Person.objects.update_or_create(\n+            first_name=\"George\",\n+            last_name=\"Harrison\",\n+            create_defaults__exact=\"testing\",\n+            create_defaults={\n+                \"birthday\": date(1943, 2, 25),\n+                \"create_defaults\": \"another testing\",\n+            },\n+        )\n+        self.assertIs(created, False)\n+        self.assertEqual(obj.create_defaults, \"testing\")\n+\n     def test_create_callable_default(self):\n         obj, created = Person.objects.update_or_create(\n             first_name=\"George\",\n@@ -476,6 +543,16 @@ def test_create_callable_default(self):\n         self.assertIs(created, True)\n         self.assertEqual(obj.birthday, date(1943, 2, 25))\n \n+    def test_create_callable_create_defaults(self):\n+        obj, created = Person.objects.update_or_create(\n+            first_name=\"George\",\n+            last_name=\"Harrison\",\n+            defaults={},\n+            create_defaults={\"birthday\": lambda: date(1943, 2, 25)},\n+        )\n+        self.assertIs(created, True)\n+        self.assertEqual(obj.birthday, date(1943, 2, 25))\n+\n     def test_update_callable_default(self):\n         Person.objects.update_or_create(\n             first_name=\"George\",\n@@ -694,6 +771,12 @@ def test_update_or_create_with_invalid_defaults(self):\n         with self.assertRaisesMessage(FieldError, self.msg):\n             Thing.objects.update_or_create(name=\"a\", defaults={\"nonexistent\": \"b\"})\n \n+    def test_update_or_create_with_invalid_create_defaults(self):\n+        with self.assertRaisesMessage(FieldError, self.msg):\n+            Thing.objects.update_or_create(\n+                name=\"a\", create_defaults={\"nonexistent\": \"b\"}\n+            )\n+\n     def test_update_or_create_with_invalid_kwargs(self):\n         with self.assertRaisesMessage(FieldError, self.bad_field_msg):\n             Thing.objects.update_or_create(name=\"a\", nonexistent=\"b\")\n",
  "problem_statement": "Support create defaults for update_or_create\nDescription\n\t\nI proposed the idea of extending update_or_create to support specifying a different set of defaults for the create operation on the [forum](\u200bhttps://forum.djangoproject.com/t/feature-idea-update-or-create-to-allow-different-defaults-for-create-and-update-operations/18300/15). There seems to be consensus it's a positive add to Django.\nAdam raised concerns with my proposed approach of adding a create_defaults parameter to the function since this would conflict with any fields on a model named, create_defaults. Jeff did a code search on github for that term and didn't find any matches. I suspect if someone where using a field named create_defaults, it would be a JSON or object type field. Those don't seem like reasonable candidates to be part of a UniqueConstraint, which should be underlying the look-up arguments to update_or_create.\nI do like the idea of having a separate parameter for create_defaults, but if we must preserve 100% backwards compatibility, Adam's suggestion of having defaults be set to another object makes the most sense.\nMy blocking question is, which approach should I take?\nFrom the forum post:\nI\u2019ve run into a use-case in which it\u2019d be helpful to have the ability to specify a different set of defaults for the update operation compared to the create operation. While I don\u2019t expect my particular use case to translate, here\u2019s a more generic one.\nGiven the following Record model:\nclass Record(models.Model):\n\tsome_id = models.CharField(unique=True)\n\tcreated_by = models.ForeignKey(User, ...)\n\tmodified_by = models.ForeignKey(User, null=True, blank=True, ...)\nWhen a record is created, we would want to set created_by, but if it\u2019s being updated, we\u2019d want to set modified_by. This use case can\u2019t be solved by using update_or_create, unless it allows for us to specify a different set of default values.\nRecord.objects.update_or_create(\n\tsome_id=some_value,\n\tdefaults={\"modified_by\": user},\n\tcreate_defaults={\"created_by\": user},\n)\n",
  "hints_text": "",
  "created_at": "2023-01-31T02:40:31Z",
  "version": "5.0",
  "FAIL_TO_PASS": "[\"If you have a field named create_defaults and want to use it as an\", \"Should be able to use update_or_create from the m2m related manager to\", \"Should be able to use update_or_create from the related manager to\", \"test_aupdate_or_create (async.test_async_queryset.AsyncQuerySetTest.test_aupdate_or_create)\", \"test_aupdate_or_create (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aupdate_or_create)\", \"test_create_callable_create_defaults (get_or_create.tests.UpdateOrCreateTests.test_create_callable_create_defaults)\", \"test_create_twice (get_or_create.tests.UpdateOrCreateTests.test_create_twice)\", \"test_generic_async_aupdate_or_create_with_create_defaults (generic_relations.tests.GenericRelationsTests.test_generic_async_aupdate_or_create_with_create_defaults)\", \"test_generic_update_or_create_when_created_with_create_defaults (generic_relations.tests.GenericRelationsTests.test_generic_update_or_create_when_created_with_create_defaults)\", \"test_generic_update_or_create_when_updated_with_defaults (generic_relations.tests.GenericRelationsTests.test_generic_update_or_create_when_updated_with_defaults)\", \"test_update_or_create_defaults_with_create_defaults (generic_relations.tests.GenericRelationsTests.test_update_or_create_defaults_with_create_defaults)\", \"test_update_or_create_with_invalid_create_defaults (get_or_create.tests.InvalidCreateArgumentsTests.test_update_or_create_with_invalid_create_defaults)\"]",
  "PASS_TO_PASS": "[\"Callables in `defaults` are evaluated if the instance is created.\", \"Concrete model subclasses with generic relations work\", \"Create another fatty tagged instance with different PK to ensure there\", \"Generic relations on a base class (Vegetable) work correctly in\", \"If Generic Relation is not explicitly defined, any related objects\", \"If all the attributes on a model have defaults, get_or_create() doesn't\", \"If an existing primary key is specified with different values for other\", \"If we execute the exact same statement twice, the second time,\", \"If you delete a tag, the objects using the tag are unaffected (other\", \"If you delete an object with an explicit Generic relation, the related\", \"If you don't specify a value or default value for all required\", \"If you have a field named defaults and want to use it as an exact\", \"If you specify an existing primary key, but different other fields,\", \"Instances of the proxy should be returned when\", \"Objects with declared GenericRelations can be tagged directly -- the\", \"Queries across generic relations respect the content types. Even though\", \"Regression test for #15117. Requires a TransactionTestCase on\", \"Should be able to use get_or_create from the generic related manager\", \"Should be able to use update_or_create from the generic related manager\", \"Test accessing the content object like a foreign key.\", \"Test lookups over an object without GenericRelations.\", \"Test lookups through content type.\", \"The database connection is still usable after a DatabaseError in\", \"The default for for_concrete_model should be True\", \"Using a property with a setter implemented is allowed.\", \"Using the pk property of a model is allowed.\", \"When for_concrete_model is False, we should still be able to get\", \"You can set a generic foreign key in the way you'd expect.\", \"`defaults` aren't evaluated if the instance isn't created.\", \"get_or_create should raise IntegrityErrors with the full traceback.\", \"test_aadd (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aadd)\", \"test_aadd (generic_relations.tests.GenericRelationsTests.test_aadd)\", \"test_aadd_reverse (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aadd_reverse)\", \"test_aaggregate (async.test_async_queryset.AsyncQuerySetTest.test_aaggregate)\", \"test_abulk_update (async.test_async_queryset.AsyncQuerySetTest.test_abulk_update)\", \"test_aclear (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aclear)\", \"test_aclear (generic_relations.tests.GenericRelationsTests.test_aclear)\", \"test_aclear_reverse (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aclear_reverse)\", \"test_acontains (async.test_async_queryset.AsyncQuerySetTest.test_acontains)\", \"test_acount (async.test_async_queryset.AsyncQuerySetTest.test_acount)\", \"test_acount_cached_result (async.test_async_queryset.AsyncQuerySetTest.test_acount_cached_result)\", \"test_acreate (async.test_async_queryset.AsyncQuerySetTest.test_acreate)\", \"test_acreate (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_acreate)\", \"test_acreate_reverse (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_acreate_reverse)\", \"test_add_after_prefetch (generic_relations.tests.GenericRelationsTests.test_add_after_prefetch)\", \"test_add_bulk (generic_relations.tests.GenericRelationsTests.test_add_bulk)\", \"test_add_bulk_false (generic_relations.tests.GenericRelationsTests.test_add_bulk_false)\", \"test_add_rejects_unsaved_objects (generic_relations.tests.GenericRelationsTests.test_add_rejects_unsaved_objects)\", \"test_add_rejects_wrong_instances (generic_relations.tests.GenericRelationsTests.test_add_rejects_wrong_instances)\", \"test_add_then_remove_after_prefetch (generic_relations.tests.GenericRelationsTests.test_add_then_remove_after_prefetch)\", \"test_adelete (async.test_async_queryset.AsyncQuerySetTest.test_adelete)\", \"test_aearliest (async.test_async_queryset.AsyncQuerySetTest.test_aearliest)\", \"test_aexists (async.test_async_queryset.AsyncQuerySetTest.test_aexists)\", \"test_afirst (async.test_async_queryset.AsyncQuerySetTest.test_afirst)\", \"test_aget (async.test_async_queryset.AsyncQuerySetTest.test_aget)\", \"test_aget_or_create (async.test_async_queryset.AsyncQuerySetTest.test_aget_or_create)\", \"test_aget_or_create (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aget_or_create)\", \"test_aget_or_create_reverse (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aget_or_create_reverse)\", \"test_ain_bulk (async.test_async_queryset.AsyncQuerySetTest.test_ain_bulk)\", \"test_aiterator (async.test_async_queryset.AsyncQuerySetTest.test_aiterator)\", \"test_aiterator_invalid_chunk_size (async.test_async_queryset.AsyncQuerySetTest.test_aiterator_invalid_chunk_size)\", \"test_aiterator_prefetch_related (async.test_async_queryset.AsyncQuerySetTest.test_aiterator_prefetch_related)\", \"test_alast (async.test_async_queryset.AsyncQuerySetTest.test_alast)\", \"test_alatest (async.test_async_queryset.AsyncQuerySetTest.test_alatest)\", \"test_aremove (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aremove)\", \"test_aremove (generic_relations.tests.GenericRelationsTests.test_aremove)\", \"test_aremove_reverse (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aremove_reverse)\", \"test_aset (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aset)\", \"test_aset (generic_relations.tests.GenericRelationsTests.test_aset)\", \"test_aset_reverse (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aset_reverse)\", \"test_assign (generic_relations.tests.GenericRelationsTests.test_assign)\", \"test_assign_content_object_in_init (generic_relations.tests.GenericRelationsTests.test_assign_content_object_in_init)\", \"test_assign_with_queryset (generic_relations.tests.GenericRelationsTests.test_assign_with_queryset)\", \"test_async_iteration (async.test_async_queryset.AsyncQuerySetTest.test_async_iteration)\", \"test_aupdate (async.test_async_queryset.AsyncQuerySetTest.test_aupdate)\", \"test_aupdate_or_create_reverse (async.test_async_related_managers.AsyncRelatedManagersOperationTest.test_aupdate_or_create_reverse)\", \"test_cache_invalidation_for_content_type_id (generic_relations.tests.GenericRelationsTests.test_cache_invalidation_for_content_type_id)\", \"test_cache_invalidation_for_object_id (generic_relations.tests.GenericRelationsTests.test_cache_invalidation_for_object_id)\", \"test_callable_defaults_not_called (get_or_create.tests.GetOrCreateTests.test_callable_defaults_not_called)\", \"test_clear (generic_relations.tests.GenericRelationsTests.test_clear)\", \"test_clear_after_prefetch (generic_relations.tests.GenericRelationsTests.test_clear_after_prefetch)\", \"test_create (get_or_create.tests.UpdateOrCreateTests.test_create)\", \"test_create_after_prefetch (generic_relations.tests.GenericRelationsTests.test_create_after_prefetch)\", \"test_create_callable_default (get_or_create.tests.UpdateOrCreateTests.test_create_callable_default)\", \"test_create_get_or_create (get_or_create.tests.GetOrCreateThroughManyToMany.test_create_get_or_create)\", \"test_generic_async_acreate (generic_relations.tests.GenericRelationsTests.test_generic_async_acreate)\", \"test_generic_async_aget_or_create (generic_relations.tests.GenericRelationsTests.test_generic_async_aget_or_create)\", \"test_generic_async_aupdate_or_create (generic_relations.tests.GenericRelationsTests.test_generic_async_aupdate_or_create)\", \"test_generic_relation (generic_relations.tests.ProxyRelatedModelTest.test_generic_relation)\", \"test_generic_relation_related_name_default (generic_relations.tests.GenericRelationsTests.test_generic_relation_related_name_default)\", \"test_generic_relation_set (generic_relations.tests.ProxyRelatedModelTest.test_generic_relation_set)\", \"test_generic_relation_to_inherited_child (generic_relations.tests.GenericRelationsTests.test_generic_relation_to_inherited_child)\", \"test_get_get_or_create (get_or_create.tests.GetOrCreateThroughManyToMany.test_get_get_or_create)\", \"test_get_or_create (generic_relations.tests.GenericRelationsTests.test_get_or_create)\", \"test_get_or_create_method_with_create (get_or_create.tests.GetOrCreateTests.test_get_or_create_method_with_create)\", \"test_get_or_create_method_with_get (get_or_create.tests.GetOrCreateTests.test_get_or_create_method_with_get)\", \"test_get_or_create_on_related_manager (get_or_create.tests.GetOrCreateTests.test_get_or_create_on_related_manager)\", \"test_get_or_create_with_invalid_defaults (get_or_create.tests.InvalidCreateArgumentsTests.test_get_or_create_with_invalid_defaults)\", \"test_get_or_create_with_invalid_kwargs (get_or_create.tests.InvalidCreateArgumentsTests.test_get_or_create_with_invalid_kwargs)\", \"test_gfk_manager (generic_relations.tests.GenericRelationsTests.test_gfk_manager)\", \"test_gfk_subclasses (generic_relations.tests.GenericRelationsTests.test_gfk_subclasses)\", \"test_mti_update_non_local_concrete_fields (get_or_create.tests.UpdateOrCreateTests.test_mti_update_non_local_concrete_fields)\", \"test_multiple_gfk (generic_relations.tests.GenericRelationsTests.test_multiple_gfk)\", \"test_multiple_invalid_fields (get_or_create.tests.InvalidCreateArgumentsTests.test_multiple_invalid_fields)\", \"test_none_allowed (generic_relations.tests.TestInitWithNoneArgument.test_none_allowed)\", \"test_prefetch_related_custom_object_id (generic_relations.tests.GenericRelationsTests.test_prefetch_related_custom_object_id)\", \"test_prefetch_related_different_content_types (generic_relations.tests.GenericRelationsTests.test_prefetch_related_different_content_types)\", \"test_property_attribute_without_setter_defaults (get_or_create.tests.InvalidCreateArgumentsTests.test_property_attribute_without_setter_defaults)\", \"test_property_attribute_without_setter_kwargs (get_or_create.tests.InvalidCreateArgumentsTests.test_property_attribute_without_setter_kwargs)\", \"test_query (generic_relations.tests.ProxyRelatedModelTest.test_query)\", \"test_query_content_object (generic_relations.tests.GenericRelationsTests.test_query_content_object)\", \"test_query_content_type (generic_relations.tests.GenericRelationsTests.test_query_content_type)\", \"test_query_proxy (generic_relations.tests.ProxyRelatedModelTest.test_query_proxy)\", \"test_raw (async.test_async_queryset.AsyncQuerySetTest.test_raw)\", \"test_remove (generic_relations.tests.GenericRelationsTests.test_remove)\", \"test_remove_after_prefetch (generic_relations.tests.GenericRelationsTests.test_remove_after_prefetch)\", \"test_set (generic_relations.tests.GenericRelationsTests.test_set)\", \"test_set_after_prefetch (generic_relations.tests.GenericRelationsTests.test_set_after_prefetch)\", \"test_something (get_or_create.tests.GetOrCreateThroughManyToMany.test_something)\", \"test_unsaved_generic_foreign_key_parent_bulk_create (generic_relations.tests.GenericRelationsTests.test_unsaved_generic_foreign_key_parent_bulk_create)\", \"test_unsaved_generic_foreign_key_parent_save (generic_relations.tests.GenericRelationsTests.test_unsaved_generic_foreign_key_parent_save)\", \"test_update (get_or_create.tests.UpdateOrCreateTests.test_update)\", \"test_update_callable_default (get_or_create.tests.UpdateOrCreateTests.test_update_callable_default)\", \"test_update_only_defaults_and_pre_save_fields_when_local_fields (get_or_create.tests.UpdateOrCreateTests.test_update_only_defaults_and_pre_save_fields_when_local_fields)\", \"test_update_or_create_defaults (generic_relations.tests.GenericRelationsTests.test_update_or_create_defaults)\", \"test_update_or_create_with_invalid_defaults (get_or_create.tests.InvalidCreateArgumentsTests.test_update_or_create_with_invalid_defaults)\", \"test_update_or_create_with_invalid_kwargs (get_or_create.tests.InvalidCreateArgumentsTests.test_update_or_create_with_invalid_kwargs)\", \"update_or_create should raise IntegrityErrors with the full traceback.\"]",
  "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7",
  "patch_files": [
    "django/db/models/query.py"
  ],
  "test_patch_files": [
    "tests/async/test_async_queryset.py",
    "tests/async/test_async_related_managers.py",
    "tests/generic_relations/tests.py",
    "tests/get_or_create/models.py",
    "tests/get_or_create/tests.py"
  ],
  "patch_diff_details": {
    "django/db/models/query.py": {
      "diffs": [
        {
          "start_line_old": 929,
          "end_line_old": 947,
          "file_pos": 1,
          "file_context_length": 20391,
          "pos": 1,
          "context_length": 353
        },
        {
          "start_line_old": 967,
          "end_line_old": 967,
          "file_pos": 1,
          "file_context_length": 20391,
          "closest_snippet_id": "/tmp/repos/django/django/db/models/query.py_QuerySet.update_or_create_QuerySet.update_or_create.5.1",
          "closest_snippet_line_distance": 2,
          "pos": 2,
          "context_length": 612
        }
      ]
    }
  },
  "vectors": 3740,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/django/django/db/models/query.py_QuerySet.update_or_create_QuerySet.update_or_create.5.1",
      "distance": 0.9334689974784851,
      "file_path": "django/db/models/query.py",
      "start_line": 929,
      "end_line": 965,
      "tokens": 353,
      "context_length": 353,
      "file_pos": 1
    },
    {
      "position": 2,
      "id": "/tmp/repos/django/django/db/models/query.py_QuerySet.aupdate_or_create_QuerySet._extract_model_params.9.1",
      "distance": 1.0045509338378906,
      "file_path": "django/db/models/query.py",
      "start_line": 967,
      "end_line": 998,
      "tokens": 259,
      "context_length": 612,
      "file_pos": 1
    },
    {
      "position": 3,
      "id": "/tmp/repos/django/django/db/models/query.py_QuerySet.bulk_update.alters_data_QuerySet.aget_or_create.1.1",
      "distance": 1.0675042867660522,
      "file_path": "django/db/models/query.py",
      "start_line": 887,
      "end_line": 927,
      "tokens": 298,
      "context_length": 910,
      "file_pos": 1
    },
    {
      "position": 4,
      "id": "/tmp/repos/django/django/db/models/options.py_Options.contribute_to_class_Options.contribute_to_class.16.self.db_table_2.1",
      "distance": 1.0938314199447632,
      "file_path": "django/db/models/options.py",
      "start_line": 175,
      "end_line": 244,
      "tokens": 645,
      "context_length": 1555
    },
    {
      "position": 5,
      "id": "/tmp/repos/django/django/contrib/auth/management/commands/createsuperuser.py_Command.get_input_data_Command._get_input_message.1.1",
      "distance": 1.0973854064941406,
      "file_path": "django/contrib/auth/management/commands/createsuperuser.py",
      "start_line": 250,
      "end_line": 279,
      "tokens": 211,
      "context_length": 1766
    },
    {
      "position": 6,
      "id": "/tmp/repos/django/django/db/models/base.py_Model_Model.__init__.cls.20",
      "distance": 1.0976886749267578,
      "file_path": "django/db/models/base.py",
      "start_line": 459,
      "end_line": 572,
      "tokens": 957,
      "context_length": 2723
    },
    {
      "position": 7,
      "id": "/tmp/repos/django/django/db/migrations/questioner.py_InteractiveMigrationQuestioner.ask_unique_callable_default_addition_InteractiveMigrationQuestioner.ask_unique_callable_default_addition.3.1",
      "distance": 1.101373553276062,
      "file_path": "django/db/migrations/questioner.py",
      "start_line": 269,
      "end_line": 288,
      "tokens": 195,
      "context_length": 2918
    },
    {
      "position": 8,
      "id": "/tmp/repos/django/django/db/models/query.py_QuerySet._check_bulk_create_options_QuerySet._check_bulk_create_options.4.1",
      "distance": 1.1032116413116455,
      "file_path": "django/db/models/query.py",
      "start_line": 663,
      "end_line": 715,
      "tokens": 424,
      "context_length": 3342,
      "file_pos": 5
    },
    {
      "position": 9,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_field.23_BaseDatabaseSchemaEditor._alter_field.needs_database_default.1",
      "distance": 1.106440782546997,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 937,
      "end_line": 1022,
      "tokens": 769,
      "context_length": 4111
    },
    {
      "position": 10,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_DatabaseSchemaEditor.add_field_DatabaseSchemaEditor.add_field.4.2",
      "distance": 1.1120116710662842,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 106,
      "end_line": 120,
      "tokens": 144,
      "context_length": 4255
    },
    {
      "position": 11,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._alter_column_type_sql_DatabaseSchemaEditor.sql_update_with_default._alter_column_type_sql.old_db_params.14.5.1.1",
      "distance": 1.117047905921936,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 142,
      "end_line": 255,
      "tokens": 920,
      "context_length": 5175
    },
    {
      "position": 12,
      "id": "/tmp/repos/django/django/db/models/constraints.py_UniqueConstraint.create_sql_UniqueConstraint.create_sql.5.1",
      "distance": 1.1210696697235107,
      "file_path": "django/db/models/constraints.py",
      "start_line": 234,
      "end_line": 250,
      "tokens": 139,
      "context_length": 5314
    },
    {
      "position": 13,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_AddConstraint_AddConstraint.migration_name_fragment.1.1",
      "distance": 1.124992847442627,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 1065,
      "end_line": 1103,
      "tokens": 283,
      "context_length": 5597
    },
    {
      "position": 14,
      "id": "/tmp/repos/django/django/contrib/contenttypes/fields.py_create_generic_related_manager.GenericRelatedObjectManager.set.alters_data_",
      "distance": 1.1266330480575562,
      "file_path": "django/contrib/contenttypes/fields.py",
      "start_line": 756,
      "end_line": 804,
      "tokens": 407,
      "context_length": 6004
    },
    {
      "position": 15,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_Field.get_choices_Field.get_choices.8.1",
      "distance": 1.130738615989685,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 979,
      "end_line": 1011,
      "tokens": 256,
      "context_length": 6260
    },
    {
      "position": 16,
      "id": "/tmp/repos/django/django/db/migrations/questioner.py_InteractiveMigrationQuestioner.ask_not_null_addition_InteractiveMigrationQuestioner.ask_not_null_addition.3.1",
      "distance": 1.1356909275054932,
      "file_path": "django/db/migrations/questioner.py",
      "start_line": 166,
      "end_line": 187,
      "tokens": 188,
      "context_length": 6448
    },
    {
      "position": 17,
      "id": "/tmp/repos/django/django/db/models/fields/related_descriptors.py_create_reverse_many_to_one_manager.RelatedManager.add.alters_data_create_reverse_many_to_one_manager.RelatedManager.27._clear.alters_data.1",
      "distance": 1.137465000152588,
      "file_path": "django/db/models/fields/related_descriptors.py",
      "start_line": 788,
      "end_line": 893,
      "tokens": 808,
      "context_length": 7256
    },
    {
      "position": 18,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_field.45_BaseDatabaseSchemaEditor._alter_field.67",
      "distance": 1.1393293142318726,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1023,
      "end_line": 1110,
      "tokens": 822,
      "context_length": 8078
    },
    {
      "position": 19,
      "id": "/tmp/repos/django/django/db/models/options.py_Options._prepare_Options._prepare.2.1.4.3",
      "distance": 1.140236735343933,
      "file_path": "django/db/models/options.py",
      "start_line": 289,
      "end_line": 331,
      "tokens": 355,
      "context_length": 8433
    },
    {
      "position": 20,
      "id": "/tmp/repos/django/django/db/models/fields/related_descriptors.py_create_forward_many_to_many_manager.ManyRelatedManager.set.alters_data_create_forward_many_to_many_manager.ManyRelatedManager.aupdate_or_create.alters_data.1",
      "distance": 1.1415456533432007,
      "file_path": "django/db/models/fields/related_descriptors.py",
      "start_line": 1238,
      "end_line": 1300,
      "tokens": 544,
      "context_length": 8977
    },
    {
      "position": 21,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_CreateModel.reduce_CreateModel.reduce.2.1",
      "distance": 1.1425940990447998,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 136,
      "end_line": 306,
      "tokens": 968,
      "context_length": 9945
    },
    {
      "position": 22,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._alter_field_DatabaseSchemaEditor.sql_update_with_default._alter_field.5.2",
      "distance": 1.1448571681976318,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 276,
      "end_line": 310,
      "tokens": 277,
      "context_length": 10222
    },
    {
      "position": 23,
      "id": "/tmp/repos/django/django/contrib/auth/forms.py_UserCreationForm_UserChangeForm.__init__.5.user_permissions.queryset.1",
      "distance": 1.1463623046875,
      "file_path": "django/contrib/auth/forms.py",
      "start_line": 149,
      "end_line": 190,
      "tokens": 294,
      "context_length": 10516
    },
    {
      "position": 24,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._alter_field.rels_to_update_BaseDatabaseSchemaEditor._alter_field.84.1",
      "distance": 1.146388292312622,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1111,
      "end_line": 1185,
      "tokens": 725,
      "context_length": 11241
    },
    {
      "position": 25,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_AlterOrderWithRespectTo.database_forwards_AlterOrderWithRespectTo.database_forwards.2.3.4.3",
      "distance": 1.1472692489624023,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 682,
      "end_line": 706,
      "tokens": 231,
      "context_length": 11472
    },
    {
      "position": 26,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._create_index_sql_",
      "distance": 1.1487231254577637,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 339,
      "end_line": 375,
      "tokens": 212,
      "context_length": 11684
    },
    {
      "position": 27,
      "id": "/tmp/repos/django/django/contrib/postgres/constraints.py_ExclusionConstraint.validate_",
      "distance": 1.1546766757965088,
      "file_path": "django/contrib/postgres/constraints.py",
      "start_line": 167,
      "end_line": 207,
      "tokens": 367,
      "context_length": 12051
    },
    {
      "position": 28,
      "id": "/tmp/repos/django/django/contrib/admin/options.py_ModelAdmin._changeform_view_ModelAdmin._changeform_view.14.3.title.1",
      "distance": 1.1567597389221191,
      "file_path": "django/contrib/admin/options.py",
      "start_line": 1749,
      "end_line": 1851,
      "tokens": 780,
      "context_length": 12831
    },
    {
      "position": 29,
      "id": "/tmp/repos/django/django/forms/models.py_BaseModelForm._get_validation_exclusions_BaseModelForm._get_validation_exclusions.6.1",
      "distance": 1.1577532291412354,
      "file_path": "django/forms/models.py",
      "start_line": 380,
      "end_line": 423,
      "tokens": 400,
      "context_length": 13231
    },
    {
      "position": 30,
      "id": "/tmp/repos/django/django/db/models/fields/mixins.py_CheckFieldDefaultMixin_",
      "distance": 1.1580970287322998,
      "file_path": "django/db/models/fields/mixins.py",
      "start_line": 31,
      "end_line": 60,
      "tokens": 178,
      "context_length": 13409
    },
    {
      "position": 31,
      "id": "/tmp/repos/django/django/db/models/constraints.py_UniqueConstraint.validate_",
      "distance": 1.1582413911819458,
      "file_path": "django/db/models/constraints.py",
      "start_line": 308,
      "end_line": 373,
      "tokens": 517,
      "context_length": 13926
    },
    {
      "position": 32,
      "id": "/tmp/repos/django/django/db/models/base.py_Model.save.alters_data_Model.save_base.18.1",
      "distance": 1.1591265201568604,
      "file_path": "django/db/models/base.py",
      "start_line": 821,
      "end_line": 899,
      "tokens": 551,
      "context_length": 14477
    },
    {
      "position": 33,
      "id": "/tmp/repos/django/django/db/models/fields/reverse_related.py_ForeignObjectRel.get_choices_ForeignObjectRel.get_choices.5.1",
      "distance": 1.1597681045532227,
      "file_path": "django/db/models/fields/reverse_related.py",
      "start_line": 165,
      "end_line": 183,
      "tokens": 160,
      "context_length": 14637
    },
    {
      "position": 34,
      "id": "/tmp/repos/django/django/db/models/options.py_Options_Options.app_config.2.1",
      "distance": 1.1639163494110107,
      "file_path": "django/db/models/options.py",
      "start_line": 87,
      "end_line": 173,
      "tokens": 682,
      "context_length": 15319
    },
    {
      "position": 35,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.skip_default_BaseDatabaseSchemaEditor._column_default_sql.2.1",
      "distance": 1.164930820465088,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 373,
      "end_line": 401,
      "tokens": 205,
      "context_length": 15524
    },
    {
      "position": 36,
      "id": "/tmp/repos/django/django/db/migrations/questioner.py_NonInteractiveMigrationQuestioner_",
      "distance": 1.1674139499664307,
      "file_path": "django/db/migrations/questioner.py",
      "start_line": 291,
      "end_line": 342,
      "tokens": 367,
      "context_length": 15891
    },
    {
      "position": 37,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._check_default_pk_Model._check_default_pk.2.1",
      "distance": 1.167515754699707,
      "file_path": "django/db/models/base.py",
      "start_line": 1567,
      "end_line": 1597,
      "tokens": 247,
      "context_length": 16138
    },
    {
      "position": 38,
      "id": "/tmp/repos/django/django/db/models/constraints.py_UniqueConstraint.__eq___UniqueConstraint.deconstruct.7.1",
      "distance": 1.1682329177856445,
      "file_path": "django/db/models/constraints.py",
      "start_line": 280,
      "end_line": 306,
      "tokens": 221,
      "context_length": 16359
    },
    {
      "position": 39,
      "id": "/tmp/repos/django/django/contrib/postgres/constraints.py_ExclusionConstraint.create_sql_ExclusionConstraint.__eq__.2.1",
      "distance": 1.1689893007278442,
      "file_path": "django/contrib/postgres/constraints.py",
      "start_line": 104,
      "end_line": 154,
      "tokens": 397,
      "context_length": 16756
    },
    {
      "position": 40,
      "id": "/tmp/repos/django/django/db/migrations/questioner.py_InteractiveMigrationQuestioner.ask_not_null_alteration_InteractiveMigrationQuestioner.ask_not_null_alteration.3.1",
      "distance": 1.1691728830337524,
      "file_path": "django/db/migrations/questioner.py",
      "start_line": 189,
      "end_line": 215,
      "tokens": 238,
      "context_length": 16994
    },
    {
      "position": 41,
      "id": "/tmp/repos/django/django/db/models/options.py_Options.add_manager_Options.add_field.5.12.3.1",
      "distance": 1.1702240705490112,
      "file_path": "django/db/models/options.py",
      "start_line": 333,
      "end_line": 369,
      "tokens": 338,
      "context_length": 17332
    },
    {
      "position": 42,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._alter_column_collation_sql_DatabaseSchemaEditor.sql_update_with_default._alter_column_collation_sql.4.1",
      "distance": 1.171356201171875,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 257,
      "end_line": 274,
      "tokens": 170,
      "context_length": 17502
    },
    {
      "position": 43,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._effective_default_BaseDatabaseSchemaEditor._effective_default.2.5.1",
      "distance": 1.1718194484710693,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 403,
      "end_line": 425,
      "tokens": 176,
      "context_length": 17678
    },
    {
      "position": 44,
      "id": "/tmp/repos/django/django/db/backends/mysql/features.py_DatabaseFeatures._mysql_storage_engine_DatabaseFeatures.supports_explain_analyze.1.1",
      "distance": 1.1732304096221924,
      "file_path": "django/db/backends/mysql/features.py",
      "start_line": 159,
      "end_line": 266,
      "tokens": 728,
      "context_length": 18406
    },
    {
      "position": 45,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._create_unique_sql_BaseDatabaseSchemaEditor._create_unique_sql.8.1",
      "distance": 1.1734309196472168,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1630,
      "end_line": 1681,
      "tokens": 343,
      "context_length": 18749
    },
    {
      "position": 46,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.alter_field_BaseDatabaseSchemaEditor.alter_field.9",
      "distance": 1.1754848957061768,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 777,
      "end_line": 839,
      "tokens": 524,
      "context_length": 19273
    },
    {
      "position": 47,
      "id": "/tmp/repos/django/django/db/models/options.py_bisect_DEFAULT_NAMES.1",
      "distance": 1.1754921674728394,
      "file_path": "django/db/models/options.py",
      "start_line": 1,
      "end_line": 58,
      "tokens": 353,
      "context_length": 19626
    },
    {
      "position": 48,
      "id": "/tmp/repos/django/django/db/migrations/questioner.py_MigrationQuestioner.ask_not_null_addition_MigrationQuestioner.ask_unique_callable_default_addition.3.1",
      "distance": 1.1765847206115723,
      "file_path": "django/db/migrations/questioner.py",
      "start_line": 57,
      "end_line": 87,
      "tokens": 255,
      "context_length": 19881
    },
    {
      "position": 49,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_AlterModelOptions_AlterModelOptions.migration_name_fragment.1.1",
      "distance": 1.1776413917541504,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 727,
      "end_line": 779,
      "tokens": 320,
      "context_length": 20201
    },
    {
      "position": 50,
      "id": "/tmp/repos/django/django/db/models/base.py_Model.get_constraints_Model.validate_constraints.5.1",
      "distance": 1.1783816814422607,
      "file_path": "django/db/models/base.py",
      "start_line": 1430,
      "end_line": 1455,
      "tokens": 208,
      "context_length": 20409
    },
    {
      "position": 51,
      "id": "/tmp/repos/django/django/db/migrations/questioner.py_InteractiveMigrationQuestioner._ask_default_InteractiveMigrationQuestioner._ask_default.6.5.3.1.2.1",
      "distance": 1.1788007020950317,
      "file_path": "django/db/migrations/questioner.py",
      "start_line": 126,
      "end_line": 164,
      "tokens": 327,
      "context_length": 20736
    },
    {
      "position": 52,
      "id": "/tmp/repos/django/django/db/backends/base/features.py_BaseDatabaseFeatures.1_BaseDatabaseFeatures.minimum_database_version.greatest_least_ignores_nulls.1",
      "distance": 1.1807022094726562,
      "file_path": "django/db/backends/base/features.py",
      "start_line": 6,
      "end_line": 221,
      "tokens": 1746,
      "context_length": 22482
    },
    {
      "position": 53,
      "id": "/tmp/repos/django/django/db/backends/oracle/creation.py_DatabaseCreation._handle_objects_preventing_db_destruction_DatabaseCreation._handle_objects_preventing_db_destruction.3",
      "distance": 1.1810235977172852,
      "file_path": "django/db/backends/oracle/creation.py",
      "start_line": 159,
      "end_line": 201,
      "tokens": 411,
      "context_length": 22893
    },
    {
      "position": 54,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._index_columns_DatabaseSchemaEditor.sql_update_with_default._delete_index_sql.2.1",
      "distance": 1.1813669204711914,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 312,
      "end_line": 337,
      "tokens": 235,
      "context_length": 23128
    },
    {
      "position": 55,
      "id": "/tmp/repos/django/django/db/models/__init__.py_1_",
      "distance": 1.18509042263031,
      "file_path": "django/db/models/__init__.py",
      "start_line": 1,
      "end_line": 116,
      "tokens": 682,
      "context_length": 23810
    },
    {
      "position": 56,
      "id": "/tmp/repos/django/django/contrib/auth/admin.py_UserAdmin_UserAdmin.add_view.1.1.1",
      "distance": 1.1858441829681396,
      "file_path": "django/contrib/auth/admin.py",
      "start_line": 43,
      "end_line": 119,
      "tokens": 528,
      "context_length": 24338
    },
    {
      "position": 57,
      "id": "/tmp/repos/django/django/db/models/options.py_Options.default_manager_Options.default_manager.4.1.1",
      "distance": 1.1871390342712402,
      "file_path": "django/db/models/options.py",
      "start_line": 496,
      "end_line": 519,
      "tokens": 155,
      "context_length": 24493
    },
    {
      "position": 58,
      "id": "/tmp/repos/django/django/db/models/constraints.py_CheckConstraint_Deferrable.__repr__.1.1",
      "distance": 1.1884689331054688,
      "file_path": "django/db/models/constraints.py",
      "start_line": 63,
      "end_line": 126,
      "tokens": 522,
      "context_length": 25015
    },
    {
      "position": 59,
      "id": "/tmp/repos/django/django/db/models/constraints.py_BaseConstraint_BaseConstraint.get_violation_error_message.1.1",
      "distance": 1.1910289525985718,
      "file_path": "django/db/models/constraints.py",
      "start_line": 17,
      "end_line": 45,
      "tokens": 232,
      "context_length": 25247
    },
    {
      "position": 60,
      "id": "/tmp/repos/django/django/db/backends/postgresql/features.py_operator_DatabaseFeatures.prohibits_null_characters_in_text_exception.1.2.1.1",
      "distance": 1.1922601461410522,
      "file_path": "django/db/backends/postgresql/features.py",
      "start_line": 1,
      "end_line": 112,
      "tokens": 895,
      "context_length": 26142
    },
    {
      "position": 61,
      "id": "/tmp/repos/django/django/db/models/constraints.py_UniqueConstraint.constraint_sql_UniqueConstraint.constraint_sql.5.1",
      "distance": 1.1928480863571167,
      "file_path": "django/db/models/constraints.py",
      "start_line": 216,
      "end_line": 232,
      "tokens": 138,
      "context_length": 26280
    },
    {
      "position": 62,
      "id": "/tmp/repos/django/django/db/backends/postgresql/schema.py_DatabaseSchemaEditor.sql_update_with_default._using_sql_DatabaseSchemaEditor.sql_update_with_default._get_sequence_name.2.1",
      "distance": 1.1929421424865723,
      "file_path": "django/db/backends/postgresql/schema.py",
      "start_line": 121,
      "end_line": 140,
      "tokens": 234,
      "context_length": 26514
    },
    {
      "position": 63,
      "id": "/tmp/repos/django/django/db/backends/postgresql/operations.py_DatabaseOperations.on_conflict_suffix_sql_",
      "distance": 1.1934632062911987,
      "file_path": "django/db/backends/postgresql/operations.py",
      "start_line": 397,
      "end_line": 416,
      "tokens": 150,
      "context_length": 26664
    },
    {
      "position": 64,
      "id": "/tmp/repos/django/django/db/models/constraints.py_UniqueConstraint_UniqueConstraint._get_index_expressions.4.1",
      "distance": 1.1937369108200073,
      "file_path": "django/db/models/constraints.py",
      "start_line": 129,
      "end_line": 214,
      "tokens": 684,
      "context_length": 27348
    },
    {
      "position": 65,
      "id": "/tmp/repos/django/django/db/backends/oracle/creation.py_DatabaseCreation._create_test_user_DatabaseCreation._create_test_user.10.4.1",
      "distance": 1.1955633163452148,
      "file_path": "django/db/backends/oracle/creation.py",
      "start_line": 262,
      "end_line": 300,
      "tokens": 403,
      "context_length": 27751
    },
    {
      "position": 66,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._check_constraints_Model._check_constraints.3.1",
      "distance": 1.196815848350525,
      "file_path": "django/db/models/base.py",
      "start_line": 2286,
      "end_line": 2477,
      "tokens": 1306,
      "context_length": 29057
    },
    {
      "position": 67,
      "id": "/tmp/repos/django/django/db/models/fields/related_descriptors.py_create_forward_many_to_many_manager.ManyRelatedManager._get_add_plan_create_forward_many_to_many_manager.ManyRelatedManager._get_add_plan.15.1",
      "distance": 1.1980795860290527,
      "file_path": "django/db/models/fields/related_descriptors.py",
      "start_line": 1353,
      "end_line": 1384,
      "tokens": 348,
      "context_length": 29405
    },
    {
      "position": 68,
      "id": "/tmp/repos/django/django/db/models/query.py_QuerySet.update.alters_data_QuerySet._update.8.1",
      "distance": 1.1982802152633667,
      "file_path": "django/db/models/query.py",
      "start_line": 1202,
      "end_line": 1223,
      "tokens": 192,
      "context_length": 29597,
      "file_pos": 26
    },
    {
      "position": 69,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_DateTimeCheckMixin_DateTimeCheckMixin.5",
      "distance": 1.1987879276275635,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 1277,
      "end_line": 1314,
      "tokens": 245,
      "context_length": 29842
    },
    {
      "position": 70,
      "id": "/tmp/repos/django/django/db/backends/mysql/operations.py_DatabaseOperations.on_conflict_suffix_sql_",
      "distance": 1.198868989944458,
      "file_path": "django/db/backends/mysql/operations.py",
      "start_line": 436,
      "end_line": 465,
      "tokens": 274,
      "context_length": 30116
    },
    {
      "position": 71,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._prepare_related_fields_for_save_Model._prepare_related_fields_for_save.5.6.2.2.1",
      "distance": 1.1997148990631104,
      "file_path": "django/db/models/base.py",
      "start_line": 1069,
      "end_line": 1121,
      "tokens": 520,
      "context_length": 30636
    },
    {
      "position": 72,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/schema.py_DatabaseSchemaEditor.add_field_DatabaseSchemaEditor.add_field.3.3.1",
      "distance": 1.1997480392456055,
      "file_path": "django/db/backends/sqlite3/schema.py",
      "start_line": 381,
      "end_line": 400,
      "tokens": 176,
      "context_length": 30812
    },
    {
      "position": 73,
      "id": "/tmp/repos/django/django/contrib/contenttypes/fields.py_create_generic_related_manager.GenericRelatedObjectManager.set_create_generic_related_manager.GenericRelatedObjectManager.set.objs.3.1.3.5",
      "distance": 1.2004165649414062,
      "file_path": "django/contrib/contenttypes/fields.py",
      "start_line": 734,
      "end_line": 754,
      "tokens": 192,
      "context_length": 31004
    },
    {
      "position": 74,
      "id": "/tmp/repos/django/django/forms/models.py_BaseModelFormSet.validate_unique_BaseModelFormSet.validate_unique.all_unique_checks.11.1",
      "distance": 1.2004883289337158,
      "file_path": "django/forms/models.py",
      "start_line": 791,
      "end_line": 882,
      "tokens": 787,
      "context_length": 31791
    },
    {
      "position": 75,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._field_should_be_altered_BaseDatabaseSchemaEditor._field_should_be_altered.11.1",
      "distance": 1.2007946968078613,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1507,
      "end_line": 1522,
      "tokens": 206,
      "context_length": 31997
    },
    {
      "position": 76,
      "id": "/tmp/repos/django/django/db/models/options.py_Options._forward_fields_map_Options.fields_map.4.1",
      "distance": 1.2010360956192017,
      "file_path": "django/db/models/options.py",
      "start_line": 630,
      "end_line": 658,
      "tokens": 231,
      "context_length": 32228
    },
    {
      "position": 77,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.alter_unique_together_BaseDatabaseSchemaEditor.alter_unique_together.7.2",
      "distance": 1.201345682144165,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 544,
      "end_line": 563,
      "tokens": 196,
      "context_length": 32424
    },
    {
      "position": 78,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._perform_unique_checks_Model._perform_unique_checks.3.1",
      "distance": 1.2027156352996826,
      "file_path": "django/db/models/base.py",
      "start_line": 1301,
      "end_line": 1348,
      "tokens": 413,
      "context_length": 32837
    },
    {
      "position": 79,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_1_DatabaseSchemaEditor.sql_delete_check.2.1",
      "distance": 1.2028043270111084,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 1,
      "end_line": 44,
      "tokens": 484,
      "context_length": 33321
    },
    {
      "position": 80,
      "id": "/tmp/repos/django/django/contrib/contenttypes/fields.py_create_generic_related_manager.GenericRelatedObjectManager.add_create_generic_related_manager.GenericRelatedObjectManager.add.4.4.1.1.2",
      "distance": 1.202992558479309,
      "file_path": "django/contrib/contenttypes/fields.py",
      "start_line": 654,
      "end_line": 688,
      "tokens": 288,
      "context_length": 33609
    },
    {
      "position": 81,
      "id": "/tmp/repos/django/django/contrib/auth/management/commands/createsuperuser.py_Command.handle_Command.handle.6.6.1",
      "distance": 1.203662395477295,
      "file_path": "django/contrib/auth/management/commands/createsuperuser.py",
      "start_line": 90,
      "end_line": 248,
      "tokens": 1288,
      "context_length": 34897
    },
    {
      "position": 82,
      "id": "/tmp/repos/django/django/db/models/fields/files.py_FileField_FileField.attr_class.formfield.1.1",
      "distance": 1.2038779258728027,
      "file_path": "django/db/models/fields/files.py",
      "start_line": 224,
      "end_line": 356,
      "tokens": 993,
      "context_length": 35890
    },
    {
      "position": 83,
      "id": "/tmp/repos/django/django/contrib/contenttypes/fields.py_create_generic_related_manager.GenericRelatedObjectManager.add.alters_data_create_generic_related_manager.GenericRelatedObjectManager._clear.alters_data.1",
      "distance": 1.2042818069458008,
      "file_path": "django/contrib/contenttypes/fields.py",
      "start_line": 690,
      "end_line": 732,
      "tokens": 325,
      "context_length": 36215
    },
    {
      "position": 84,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_Field.get_pk_value_on_save_Field.run_validators.4.1",
      "distance": 1.2050092220306396,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 688,
      "end_line": 737,
      "tokens": 342,
      "context_length": 36557
    },
    {
      "position": 85,
      "id": "/tmp/repos/django/django/db/backends/mysql/schema.py_DatabaseSchemaEditor._delete_composed_index_",
      "distance": 1.2057056427001953,
      "file_path": "django/db/backends/mysql/schema.py",
      "start_line": 210,
      "end_line": 244,
      "tokens": 324,
      "context_length": 36881
    },
    {
      "position": 86,
      "id": "/tmp/repos/django/django/contrib/admin/options.py_copy_csrf_protect_m.1",
      "distance": 1.2058463096618652,
      "file_path": "django/contrib/admin/options.py",
      "start_line": 1,
      "end_line": 114,
      "tokens": 776,
      "context_length": 37657
    },
    {
      "position": 87,
      "id": "/tmp/repos/django/django/db/models/options.py_Options.managers_Options.managers_map.1.1",
      "distance": 1.207166075706482,
      "file_path": "django/db/models/options.py",
      "start_line": 443,
      "end_line": 465,
      "tokens": 164,
      "context_length": 37821
    },
    {
      "position": 88,
      "id": "/tmp/repos/django/django/db/models/base.py_copy_DEFERRED.1",
      "distance": 1.2073346376419067,
      "file_path": "django/db/models/base.py",
      "start_line": 1,
      "end_line": 66,
      "tokens": 361,
      "context_length": 38182
    },
    {
      "position": 89,
      "id": "/tmp/repos/django/django/db/models/query.py_QuerySet.aget_QuerySet._prepare_for_bulk_create.1.2",
      "distance": 1.2073595523834229,
      "file_path": "django/db/models/query.py",
      "start_line": 640,
      "end_line": 661,
      "tokens": 183,
      "context_length": 38365,
      "file_pos": 29
    },
    {
      "position": 90,
      "id": "/tmp/repos/django/django/forms/models.py_BaseModelFormSet.save_existing_objects_BaseModelFormSet.save_new_objects.3.1",
      "distance": 1.207768440246582,
      "file_path": "django/forms/models.py",
      "start_line": 909,
      "end_line": 947,
      "tokens": 318,
      "context_length": 38683
    },
    {
      "position": 91,
      "id": "/tmp/repos/django/django/db/backends/oracle/features.py_1_DatabaseFeatures.test_now_utc_template.1",
      "distance": 1.207782506942749,
      "file_path": "django/db/backends/oracle/features.py",
      "start_line": 1,
      "end_line": 87,
      "tokens": 744,
      "context_length": 39427
    },
    {
      "position": 92,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._unique_sql_BaseDatabaseSchemaEditor._unique_sql.4.1",
      "distance": 1.2084022760391235,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1590,
      "end_line": 1628,
      "tokens": 240,
      "context_length": 39667
    },
    {
      "position": 93,
      "id": "/tmp/repos/django/django/db/backends/sqlite3/features.py_operator_DatabaseFeatures.create_test_table_with_composite_primary_key.1",
      "distance": 1.2088737487792969,
      "file_path": "django/db/backends/sqlite3/features.py",
      "start_line": 1,
      "end_line": 61,
      "tokens": 584,
      "context_length": 40251
    },
    {
      "position": 94,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._get_field_value_map_Model.validate_unique.6.1",
      "distance": 1.2088935375213623,
      "file_path": "django/db/models/base.py",
      "start_line": 1196,
      "end_line": 1236,
      "tokens": 310,
      "context_length": 40561
    },
    {
      "position": 95,
      "id": "/tmp/repos/django/django/db/models/base.py_Model._save_table_Model._save_table.15.1",
      "distance": 1.2090857028961182,
      "file_path": "django/db/models/base.py",
      "start_line": 938,
      "end_line": 1026,
      "tokens": 690,
      "context_length": 41251
    },
    {
      "position": 96,
      "id": "/tmp/repos/django/django/db/models/fields/__init__.py_collections.abc_return_None.1.1",
      "distance": 1.2094571590423584,
      "file_path": "django/db/models/fields/__init__.py",
      "start_line": 1,
      "end_line": 109,
      "tokens": 660,
      "context_length": 41911
    },
    {
      "position": 97,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor._fk_constraint_name_BaseDatabaseSchemaEditor._deferrable_constraint_sql.3.1.1",
      "distance": 1.2098908424377441,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 1566,
      "end_line": 1588,
      "tokens": 199,
      "context_length": 42110
    },
    {
      "position": 98,
      "id": "/tmp/repos/django/django/db/migrations/operations/models.py_AlterTogetherOptionOperation.database_backwards_AlterTogetherOptionOperation.can_reduce_through.1.1",
      "distance": 1.2103315591812134,
      "file_path": "django/db/migrations/operations/models.py",
      "start_line": 608,
      "end_line": 632,
      "tokens": 213,
      "context_length": 42323
    },
    {
      "position": 99,
      "id": "/tmp/repos/django/django/db/backends/base/schema.py_BaseDatabaseSchemaEditor.add_field_BaseDatabaseSchemaEditor.add_field.24.1",
      "distance": 1.211428165435791,
      "file_path": "django/db/backends/base/schema.py",
      "start_line": 659,
      "end_line": 743,
      "tokens": 742,
      "context_length": 43065
    },
    {
      "position": 100,
      "id": "/tmp/repos/django/django/db/models/sql/compiler.py_SQLUpdateCompiler.pre_sql_setup_SQLUpdateCompiler.pre_sql_setup.23",
      "distance": 1.2122077941894531,
      "file_path": "django/db/models/sql/compiler.py",
      "start_line": 1967,
      "end_line": 2028,
      "tokens": 588,
      "context_length": 43653
    }
  ],
  "files": [
    {
      "file_path": "django/db/models/query.py",
      "position": 1,
      "tokens": 20391,
      "context_length": 20391
    },
    {
      "file_path": "django/db/models/options.py",
      "position": 2,
      "tokens": 7696,
      "context_length": 28087
    },
    {
      "file_path": "django/contrib/auth/management/commands/createsuperuser.py",
      "position": 3,
      "tokens": 2291,
      "context_length": 30378
    },
    {
      "file_path": "django/db/models/base.py",
      "position": 4,
      "tokens": 18727,
      "context_length": 49105
    },
    {
      "file_path": "django/db/migrations/questioner.py",
      "position": 5,
      "tokens": 2696,
      "context_length": 51801
    },
    {
      "file_path": "django/db/backends/base/schema.py",
      "position": 6,
      "tokens": 14416,
      "context_length": 66217
    },
    {
      "file_path": "django/db/backends/mysql/schema.py",
      "position": 7,
      "tokens": 2072,
      "context_length": 68289
    },
    {
      "file_path": "django/db/backends/postgresql/schema.py",
      "position": 8,
      "tokens": 2837,
      "context_length": 71126
    },
    {
      "file_path": "django/db/models/constraints.py",
      "position": 9,
      "tokens": 2957,
      "context_length": 74083
    },
    {
      "file_path": "django/db/migrations/operations/models.py",
      "position": 10,
      "tokens": 7999,
      "context_length": 82082
    },
    {
      "file_path": "django/contrib/contenttypes/fields.py",
      "position": 11,
      "tokens": 5828,
      "context_length": 87910
    },
    {
      "file_path": "django/db/models/fields/__init__.py",
      "position": 12,
      "tokens": 18981,
      "context_length": 106891
    },
    {
      "file_path": "django/db/models/fields/related_descriptors.py",
      "position": 13,
      "tokens": 11658,
      "context_length": 118549
    },
    {
      "file_path": "django/contrib/auth/forms.py",
      "position": 14,
      "tokens": 3319,
      "context_length": 121868
    },
    {
      "file_path": "django/contrib/postgres/constraints.py",
      "position": 15,
      "tokens": 1707,
      "context_length": 123575
    },
    {
      "file_path": "django/contrib/admin/options.py",
      "position": 16,
      "tokens": 19240,
      "context_length": 142815
    },
    {
      "file_path": "django/forms/models.py",
      "position": 17,
      "tokens": 12210,
      "context_length": 155025
    },
    {
      "file_path": "django/db/models/fields/mixins.py",
      "position": 18,
      "tokens": 348,
      "context_length": 155373
    },
    {
      "file_path": "django/db/models/fields/reverse_related.py",
      "position": 19,
      "tokens": 2532,
      "context_length": 157905
    },
    {
      "file_path": "django/db/backends/mysql/features.py",
      "position": 20,
      "tokens": 2410,
      "context_length": 160315
    },
    {
      "file_path": "django/db/backends/base/features.py",
      "position": 21,
      "tokens": 3214,
      "context_length": 163529
    },
    {
      "file_path": "django/db/backends/oracle/creation.py",
      "position": 22,
      "tokens": 4015,
      "context_length": 167544
    },
    {
      "file_path": "django/db/models/__init__.py",
      "position": 23,
      "tokens": 682,
      "context_length": 168226
    },
    {
      "file_path": "django/contrib/auth/admin.py",
      "position": 24,
      "tokens": 1771,
      "context_length": 169997
    },
    {
      "file_path": "django/db/backends/postgresql/features.py",
      "position": 25,
      "tokens": 1045,
      "context_length": 171042
    },
    {
      "file_path": "django/db/backends/postgresql/operations.py",
      "position": 26,
      "tokens": 3385,
      "context_length": 174427
    },
    {
      "file_path": "django/db/backends/mysql/operations.py",
      "position": 27,
      "tokens": 4178,
      "context_length": 178605
    },
    {
      "file_path": "django/db/backends/sqlite3/schema.py",
      "position": 28,
      "tokens": 4715,
      "context_length": 183320
    },
    {
      "file_path": "django/db/models/fields/files.py",
      "position": 29,
      "tokens": 3885,
      "context_length": 187205
    },
    {
      "file_path": "django/db/backends/oracle/features.py",
      "position": 30,
      "tokens": 1343,
      "context_length": 188548
    },
    {
      "file_path": "django/db/backends/sqlite3/features.py",
      "position": 31,
      "tokens": 1344,
      "context_length": 189892
    },
    {
      "file_path": "django/db/models/sql/compiler.py",
      "position": 32,
      "tokens": 16493,
      "context_length": 206385
    }
  ]
}