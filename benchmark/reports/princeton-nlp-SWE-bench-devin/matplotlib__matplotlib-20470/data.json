{
  "instance_id": "matplotlib__matplotlib-20470",
  "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 2f83b323f4..a2302398e8 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -46,7 +46,23 @@ from matplotlib.offsetbox import (\n     DrawingArea, TextArea,\n )\n from matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n-from . import legend_handler\n+from matplotlib.text import Text\n+from matplotlib.legend_handler import HandlerBase\n+\n+\n+class HandlerText(HandlerBase):\n+    def create_artists(self, legend, orig_handle,\n+                       xdescent, ydescent, width, height, fontsize, trans):\n+        # Create a proxy artist for the Text object\n+        handle = Text(width / 2., height / 2, orig_handle.get_text(),\n+                      ha=\"center\", va=\"center\", fontproperties=orig_handle.get_font_properties(),\n+                      rotation=orig_handle.get_rotation(), color=orig_handle.get_color())\n+        handle.update_from(orig_handle)\n+        handle.set_transform(trans)\n+        return [handle]\n+\n+# Add the custom handler to the legend\n+Legend.update_default_handler_map({Text: HandlerText()})\n \n \n class DraggableLegend(DraggableOffsetBox):\n@@ -801,6 +817,247 @@ class Legend(Artist):\n         self.texts = text_list\n         self.legendHandles = handle_list\n \n+    def _set_artist_props(self, a):\n+        \"\"\"\n+        Set the boilerplate props for artists added to axes.\n+        \"\"\"\n+        a.set_figure(self.figure)\n+        if self.isaxes:\n+            # a.set_axes(self.axes)\n+            a.axes = self.axes\n+\n+        a.set_transform(self.get_transform())\n+\n+    def _set_loc(self, loc):\n+        # find_offset function will be provided to _legend_box and\n+        # _legend_box will draw itself at the location of the return\n+        # value of the find_offset.\n+        self._loc_used_default = False\n+        self._loc_real = loc\n+        self.stale = True\n+        self._legend_box.set_offset(self._findoffset)\n+\n+    def _get_loc(self):\n+        return self._loc_real\n+\n+    _loc = property(_get_loc, _set_loc)\n+\n+    def _findoffset(self, width, height, xdescent, ydescent, renderer):\n+        \"\"\"Helper function to locate the legend.\"\"\"\n+\n+        if self._loc == 0:  # \"best\".\n+            x, y = self._find_best_position(width, height, renderer)\n+        elif self._loc in Legend.codes.values():  # Fixed location.\n+            bbox = Bbox.from_bounds(0, 0, width, height)\n+            x, y = self._get_anchored_bbox(self._loc, bbox,\n+                                           self.get_bbox_to_anchor(),\n+                                           renderer)\n+        else:  # Axes or figure coordinates.\n+            fx, fy = self._loc\n+            bbox = self.get_bbox_to_anchor()\n+            x, y = bbox.x0 + bbox.width * fx, bbox.y0 + bbox.height * fy\n+\n+        return x + xdescent, y + ydescent\n+\n+    @allow_rasterization\n+    def draw(self, renderer):\n+        # docstring inherited\n+        if not self.get_visible():\n+            return\n+\n+        renderer.open_group('legend', gid=self.get_gid())\n+\n+        fontsize = renderer.points_to_pixels(self._fontsize)\n+\n+        # if mode == fill, set the width of the legend_box to the\n+        # width of the parent (minus pads)\n+        if self._mode in [\"expand\"]:\n+            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n+            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n+\n+        # update the location and size of the legend. This needs to\n+        # be done in any case to clip the figure right.\n+        bbox = self._legend_box.get_window_extent(renderer)\n+        self.legendPatch.set_bounds(bbox.bounds)\n+        self.legendPatch.set_mutation_scale(fontsize)\n+\n+        if self.shadow:\n+            Shadow(self.legendPatch, 2, -2).draw(renderer)\n+\n+        self.legendPatch.draw(renderer)\n+        self._legend_box.draw(renderer)\n+\n+        renderer.close_group('legend')\n+        self.stale = False\n+\n+    # _default_handler_map defines the default mapping between plot\n+    # elements and the legend handlers.\n+\n+    _default_handler_map = {\n+        StemContainer: legend_handler.HandlerStem(),\n+        ErrorbarContainer: legend_handler.HandlerErrorbar(),\n+        Line2D: legend_handler.HandlerLine2D(),\n+        Patch: legend_handler.HandlerPatch(),\n+        StepPatch: legend_handler.HandlerStepPatch(),\n+        LineCollection: legend_handler.HandlerLineCollection(),\n+        RegularPolyCollection: legend_handler.HandlerRegularPolyCollection(),\n+        CircleCollection: legend_handler.HandlerCircleCollection(),\n+        BarContainer: legend_handler.HandlerPatch(\n+            update_func=legend_handler.update_from_first_child),\n+        tuple: legend_handler.HandlerTuple(),\n+        PathCollection: legend_handler.HandlerPathCollection(),\n+        PolyCollection: legend_handler.HandlerPolyCollection()\n+        }\n+\n+    # (get|set|update)_default_handler_maps are public interfaces to\n+    # modify the default handler map.\n+\n+    @classmethod\n+    def get_default_handler_map(cls):\n+        \"\"\"Return the global default handler map, shared by all legends.\"\"\"\n+        return cls._default_handler_map\n+\n+    @classmethod\n+    def set_default_handler_map(cls, handler_map):\n+        \"\"\"Set the global default handler map, shared by all legends.\"\"\"\n+        cls._default_handler_map = handler_map\n+\n+    @classmethod\n+    def update_default_handler_map(cls, handler_map):\n+        \"\"\"Update the global default handler map, shared by all legends.\"\"\"\n+        cls._default_handler_map.update(handler_map)\n+\n+    def get_legend_handler_map(self):\n+        \"\"\"Return this legend instance's handler map.\"\"\"\n+        default_handler_map = self.get_default_handler_map()\n+        return ({**default_handler_map, **self._custom_handler_map}\n+                if self._custom_handler_map else default_handler_map)\n+\n+    @staticmethod\n+    def get_legend_handler(legend_handler_map, orig_handle):\n+        \"\"\"\n+        Return a legend handler from *legend_handler_map* that\n+        corresponds to *orig_handler*.\n+\n+        *legend_handler_map* should be a dictionary object (that is\n+        returned by the get_legend_handler_map method).\n+\n+        It first checks if the *orig_handle* itself is a key in the\n+        *legend_handler_map* and return the associated value.\n+        Otherwise, it checks for each of the classes in its\n+        method-resolution-order. If no matching key is found, it\n+        returns ``None``.\n+        \"\"\"\n+        try:\n+            return legend_handler_map[orig_handle]\n+        except (TypeError, KeyError):  # TypeError if unhashable.\n+            pass\n+        for handle_type in type(orig_handle).mro():\n+            try:\n+                return legend_handler_map[handle_type]\n+            except KeyError:\n+                pass\n+        return None\n+\n+    def _init_legend_box(self, handles, labels, markerfirst=True):\n+        \"\"\"\n+        Initialize the legend_box. The legend_box is an instance of\n+        the OffsetBox, which is packed with legend handles and\n+        texts. Once packed, their location is calculated during the\n+        drawing time.\n+        \"\"\"\n+\n+        fontsize = self._fontsize\n+\n+        # legend_box is a HPacker, horizontally packed with columns.\n+        # Each column is a VPacker, vertically packed with legend items.\n+        # Each legend item is a HPacker packed with:\n+        # - handlebox: a DrawingArea which contains the legend handle.\n+        # - labelbox: a TextArea which contains the legend text.\n+\n+        text_list = []  # the list of text instances\n+        handle_list = []  # the list of handle instances\n+        handles_and_labels = []\n+\n+        # The approximate height and descent of text. These values are\n+        # only used for plotting the legend handle.\n+        descent = 0.35 * fontsize * (self.handleheight - 0.7)  # heuristic.\n+        height = fontsize * self.handleheight - descent\n+        # each handle needs to be drawn inside a box of (x, y, w, h) =\n+        # (0, -descent, width, height).  And their coordinates should\n+        # be given in the display coordinates.\n+\n+        # The transformation of each handle will be automatically set\n+        # to self.get_transform(). If the artist does not use its\n+        # default transform (e.g., Collections), you need to\n+        # manually set their transform to the self.get_transform().\n+        legend_handler_map = self.get_legend_handler_map()\n+\n+        for orig_handle, label in zip(handles, labels):\n+            handler = self.get_legend_handler(legend_handler_map, orig_handle)\n+            if handler is None:\n+                _api.warn_external(\n+                    \"Legend does not support {!r} instances.\\nA proxy artist \"\n+                    \"may be used instead.\\nSee: \"\n+                    \"https://matplotlib.org/users/legend_guide.html\"\n+                    \"#creating-artists-specifically-for-adding-to-the-legend-\"\n+                    \"aka-proxy-artists\".format(orig_handle))\n+                # No handle for this artist, so we just defer to None.\n+                handle_list.append(None)\n+            else:\n+                textbox = TextArea(label, multilinebaseline=True,\n+                                   textprops=dict(\n+                                       verticalalignment='baseline',\n+                                       horizontalalignment='left',\n+                                       fontproperties=self.prop))\n+                handlebox = DrawingArea(width=self.handlelength * fontsize,\n+                                        height=height,\n+                                        xdescent=0., ydescent=descent)\n+\n+                text_list.append(textbox._text)\n+                # Create the artist for the legend which represents the\n+                # original artist/handle.\n+                handle_list.append(handler.legend_artist(self, orig_handle,\n+                                                         fontsize, handlebox))\n+                handles_and_labels.append((handlebox, textbox))\n+\n+        columnbox = []\n+        # array_split splits n handles_and_labels into ncol columns, with the\n+        # first n%ncol columns having an extra entry.  filter(len, ...) handles\n+        # the case where n < ncol: the last ncol-n columns are empty and get\n+        # filtered out.\n+        for handles_and_labels_column \\\n+                in filter(len, np.array_split(handles_and_labels, self._ncol)):\n+            # pack handlebox and labelbox into itembox\n+            itemboxes = [HPacker(pad=0,\n+                                 sep=self.handletextpad * fontsize,\n+                                 children=[h, t] if markerfirst else [t, h],\n+                                 align=\"baseline\")\n+                         for h, t in handles_and_labels_column]\n+            # pack columnbox\n+            alignment = \"baseline\" if markerfirst else \"right\"\n+            columnbox.append(VPacker(pad=0,\n+                                     sep=self.labelspacing * fontsize,\n+                                     align=alignment,\n+                                     children=itemboxes))\n+\n+        mode = \"expand\" if self._mode == \"expand\" else \"fixed\"\n+        sep = self.columnspacing * fontsize\n+        self._legend_handle_box = HPacker(pad=0,\n+                                          sep=sep, align=\"baseline\",\n+                                          mode=mode,\n+                                          children=columnbox)\n+        self._legend_title_box = TextArea(\"\")\n+        self._legend_box = VPacker(pad=self.borderpad * fontsize,\n+                                   sep=self.labelspacing * fontsize,\n+                                   align=\"center\",\n+                                   children=[self._legend_title_box,\n+                                             self._legend_handle_box])\n+        self._legend_box.set_figure(self.figure)\n+        self._legend_box.axes = self.axes\n+        self.texts = text_list\n+        self.legendHandles = handle_list\n+\n     def _auto_legend_data(self):\n         \"\"\"\n         Return display coordinates for hit testing for \"best\" positioning.\n@@ -1074,14 +1331,14 @@ def _get_legend_handles(axs, legend_handler_map=None):\n     for ax in axs:\n         handles_original += [\n             *(a for a in ax._children\n-              if isinstance(a, (Line2D, Patch, Collection))),\n+              if isinstance(a, (Line2D, Patch, Collection, Text))),\n             *ax.containers]\n         # support parasite axes:\n         if hasattr(ax, 'parasites'):\n             for axx in ax.parasites:\n                 handles_original += [\n                     *(a for a in axx._children\n-                      if isinstance(a, (Line2D, Patch, Collection))),\n+                      if isinstance(a, (Line2D, Patch, Collection, Text))),\n                     *axx.containers]\n \n     handler_map = {**Legend.get_default_handler_map(),\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "lib/matplotlib/legend.py"
  ],
  "repo": "matplotlib/matplotlib",
  "base_commit": "f0632c0fc7339f68e992ed63ae4cfac76cd41aad",
  "patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -38,6 +38,7 @@\n from matplotlib.collections import (\n     Collection, CircleCollection, LineCollection, PathCollection,\n     PolyCollection, RegularPolyCollection)\n+from matplotlib.text import Text\n from matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n from matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n from matplotlib.offsetbox import (\n@@ -740,11 +741,12 @@ def _init_legend_box(self, handles, labels, markerfirst=True):\n             handler = self.get_legend_handler(legend_handler_map, orig_handle)\n             if handler is None:\n                 _api.warn_external(\n-                    \"Legend does not support {!r} instances.\\nA proxy artist \"\n-                    \"may be used instead.\\nSee: \"\n-                    \"https://matplotlib.org/users/legend_guide.html\"\n-                    \"#creating-artists-specifically-for-adding-to-the-legend-\"\n-                    \"aka-proxy-artists\".format(orig_handle))\n+                             \"Legend does not support handles for {0} \"\n+                             \"instances.\\nA proxy artist may be used \"\n+                             \"instead.\\nSee: https://matplotlib.org/\"\n+                             \"stable/tutorials/intermediate/legend_guide.html\"\n+                             \"#controlling-the-legend-entries\".format(\n+                                 type(orig_handle).__name__))\n                 # No handle for this artist, so we just defer to None.\n                 handle_list.append(None)\n             else:\n@@ -1074,14 +1076,14 @@ def _get_legend_handles(axs, legend_handler_map=None):\n     for ax in axs:\n         handles_original += [\n             *(a for a in ax._children\n-              if isinstance(a, (Line2D, Patch, Collection))),\n+              if isinstance(a, (Line2D, Patch, Collection, Text))),\n             *ax.containers]\n         # support parasite axes:\n         if hasattr(ax, 'parasites'):\n             for axx in ax.parasites:\n                 handles_original += [\n                     *(a for a in axx._children\n-                      if isinstance(a, (Line2D, Patch, Collection))),\n+                      if isinstance(a, (Line2D, Patch, Collection, Text))),\n                     *axx.containers]\n \n     handler_map = {**Legend.get_default_handler_map(),\n@@ -1091,6 +1093,15 @@ def _get_legend_handles(axs, legend_handler_map=None):\n         label = handle.get_label()\n         if label != '_nolegend_' and has_handler(handler_map, handle):\n             yield handle\n+        elif (label not in ['_nolegend_', ''] and\n+                not has_handler(handler_map, handle)):\n+            _api.warn_external(\n+                             \"Legend does not support handles for {0} \"\n+                             \"instances.\\nSee: https://matplotlib.org/stable/\"\n+                             \"tutorials/intermediate/legend_guide.html\"\n+                             \"#implementing-a-custom-legend-handler\".format(\n+                                 type(handle).__name__))\n+            continue\n \n \n def _get_legend_handles_labels(axs, legend_handler_map=None):\ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -132,6 +132,9 @@ def __init__(self,\n         \"\"\"\n         Create a `.Text` instance at *x*, *y* with string *text*.\n \n+        While Text accepts the 'label' keyword argument, by default it is not\n+        added to the handles of a legend.\n+\n         Valid keyword arguments are:\n \n         %(Text:kwdoc)s\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -493,6 +493,15 @@ def test_handler_numpoints():\n     ax.legend(numpoints=0.5)\n \n \n+def test_text_nohandler_warning():\n+    \"\"\"Test that Text artists with labels raise a warning\"\"\"\n+    fig, ax = plt.subplots()\n+    ax.text(x=0, y=0, s=\"text\", label=\"label\")\n+    with pytest.warns(UserWarning) as record:\n+        ax.legend()\n+    assert len(record) == 1\n+\n+\n def test_empty_bar_chart_with_legend():\n     \"\"\"Test legend when bar chart is empty with a label.\"\"\"\n     # related to issue #13003. Calling plt.legend() should not\n",
  "problem_statement": "Handle and label not created for Text with label\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nText accepts a `label` keyword argument but neither its handle nor its label is created and added to the legend.\r\n\r\n**Code for reproduction**\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nx = [0, 10]\r\ny = [0, 10]\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(1, 1, 1)\r\n\r\nax.plot(x, y, label=\"line\")\r\nax.text(x=2, y=5, s=\"text\", label=\"label\")\r\n\r\nax.legend()\r\n\r\nplt.show()\r\n```\r\n\r\n**Actual outcome**\r\n\r\n![t](https://user-images.githubusercontent.com/9297904/102268707-a4e97f00-3ee9-11eb-9bd9-cca098f69c29.png)\r\n\r\n**Expected outcome**\r\n\r\nI expect a legend entry for the text.\r\n\r\n**Matplotlib version**\r\n  * Matplotlib version: 3.3.3\r\n\n",
  "hints_text": "This is an imprecision in the API. Technically, every `Artist` can have a label. But note every `Artist` has a legend handler (which creates the handle to show in the legend, see also https://matplotlib.org/3.3.3/api/legend_handler_api.html#module-matplotlib.legend_handler).\r\n\r\nIn particular `Text` does not have a legend handler. Also I wouldn't know what should be displayed there - what would you have expected for the text?\r\n\r\nI'd tent to say that `Text` just cannot appear in legends and it's an imprecision that it accepts a `label` keyword argument. Maybe we should warn on that, OTOH you *could* write your own legend handler for `Text`, in which case that warning would be a bit annoying.\nPeople can also query an artists label if they want to keep track of it somehow, so labels are not something we should just automatically assume labels are just for legends.\n> Technically, every Artist can have a label. But note every Artist has a legend handler\r\n\r\nWhat's confusing is that a `Patch` without a legend handler still appears, as a `Rectangle`, in the legend. I expected a legend entry for the `Text`, not blank output.\r\n\r\n> In particular Text does not have a legend handler. Also I wouldn't know what should be displayed there - what would you have expected for the text?\r\n\r\nIn the non-MWE code I use alphabet letters as \"markers\". So I expected \"A    \\<label text\\>\" to appear in the legend.\r\n\r\n> Maybe we should warn on that, OTOH you could write your own legend handler for Text\r\n\r\nThis is what I did as a workaround.\n[Artist.set_label](https://matplotlib.org/devdocs/api/_as_gen/matplotlib.artist.Artist.set_label.html) explicitly specifies \r\n\r\n> Set a label that will be displayed in the legend.\r\n\r\nSo while you could use it for something else, IMHO it's not in the intended scope and we would not have to care for that.\r\n\r\nBut thinking about it a bit more: In the current design, Artists don't know if handlers exist for them, so they cannot reasonably warn about that. There's a bit more issues underneath the surface. Overall, while it's a bit annoying as is, we cannot make this better without internal and possibly public API changes.\r\n\r\n> In the non-MWE code I use alphabet letters as \"markers\". So I expected \"A <label text>\" to appear in the legend.\r\n\r\nI see. Given that this only makes sense for special usecases where texts are one or a few characters, I don't think that we can add a reasonable general legend handler for `Text`s. You solution to write your own handler seems the right one for this kind of problem. I'll therefore close the issue (please report back if you think that there should be some better solution, and you have an idea how that can reasonably work for arbitrary texts). Anyway, thanks for opening the issue. \nBTW you can use arbitrary latex strings as markers with `plt.scatter`, something like\r\n\r\n```python\r\nplt.scatter(.5, .9, marker=\"$a$\", label=\"the letter a\")\r\nplt.legend()\r\n```\r\n\r\nmight give what you want.\n> Artists don't know if handlers exist for them, so they cannot reasonably warn about that. There's a bit more issues underneath the surface. Overall, while it's a bit annoying as is, we cannot make this better without internal and possibly public API changes.\r\n\r\nWe could warn when collecting all artists that have handlers (in `_get_legend_handles`) if `has_handler` returns False.  I make no judgment as to whether we want to do that, though.\n> We could warn when collecting all artists that have handlers (in `_get_legend_handles`) if `has_handler` returns False.  I make no judgment as to whether we want to do that, though.\r\n\r\nSeems cleaner to me. It may be considered an error if a label is set, but that Artist cannot occur in a legend.\r\n\r\nThis requires looping through all artists instead of https://github.com/matplotlib/matplotlib/blob/93649f830c4ae428701d4f02ecd64d19da1d5a06/lib/matplotlib/legend.py#L1117.\n> (please report back if you think that there should be some better solution, and you have an idea how that can reasonably work for arbitrary texts)\r\n\r\nThis is my custom class:\r\n\r\n```python\r\nclass HandlerText:\r\n    def legend_artist(self, legend, orig_handle, fontsize, handlebox):\r\n        x0, y0 = handlebox.xdescent, handlebox.ydescent\r\n        handle_text = Text(x=x0, y=y0, text=orig_handle.get_text())\r\n        handlebox.add_artist(handle_text)\r\n        return handle_text\r\n```\r\n\r\nSeems to me that it should work for arbitrary text. Here's a [gist](https://gist.github.com/kdpenner/a16d249ae24ed6496e6f5915e4540b4b). Note that I have to add the `Text` handle and label manually.\r\n\r\n> We could warn when collecting all artists that have handlers (in _get_legend_handles) if has_handler returns False.\r\n\r\nYes x 1000. It's bewildering to create an `Ellipse` and get a `Rectangle` in the legend. Before I descended into the legend mine, my first thought was not \"The `Ellipse` must not have a handler\", it was \"matplotlib must have a bug\". And then it's bewildering again to have `Text` dropped from the legend instead of having a placeholder like in the patches case.\nAlso I'm willing to work on addition of the warning and/or handler after y'all decide what's best to do.\n> Also I'm willing to work on addition of the warning and/or handler.\r\n\r\nGreat! :+1: \r\n\r\nPlease give me a bit of time to think about what exactly should be done.\nI'm revisiting my backlog of issues...any more thoughts?\n### No default legend handler for Text.\r\nThe proposed implmentation is rather tautological, that's something only reasonable in very special cases. I also don't see any other good way to visualize a legend entry for a text.\r\n\r\n#### Recommendation: Users should implement their own handler if needed.\r\n\r\n### Warn on legend entries without handler.\r\n> We could warn when collecting all artists that have handlers (in _get_legend_handles) if has_handler returns False.\r\n\r\nWhat are the use cases and how would a warning affect them?\r\n\r\n1) When using `legend(handles=artists)`, it would be awkward if something in `artists` is silently not rendered because it has no handler. --> warning is reasonable\r\n2) When using `plt.text(..., label='a'), plt.legend()` it deprends:\r\n   a) is the label setting done with the intention of legend? --> then reasonable\r\n   b) is the label only used as a generic identifier? --> then a warning would be unhelpful.\r\n\r\nOverall, since the label parameter is bound to taking part in legends, we can dismiss scenario 2b). (With the logic of 2b we'd also get undesired entries in the legend for artists that have a handler.\r\n\r\n#### Recommendation: Implement the warning.\r\n\r\n",
  "created_at": "2021-06-19T22:21:18Z",
  "version": "3.4",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite\", \"lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs\", \"lib/matplotlib/tests/test_legend.py::test_alpha_handles\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]\", \"lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]\", \"lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend\", \"lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend\", \"lib/matplotlib/tests/test_legend.py::test_fancy[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_fancy[png]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_framealpha[png]\", \"lib/matplotlib/tests/test_legend.py::test_get_set_draggable\", \"lib/matplotlib/tests/test_legend.py::test_handler_numpoints\", \"lib/matplotlib/tests/test_legend.py::test_handlerline2d\", \"lib/matplotlib/tests/test_legend.py::test_hatching[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_hatching[png]\", \"lib/matplotlib/tests/test_legend.py::test_labels_first[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_legend_expand[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]\", \"lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]\", \"lib/matplotlib/tests/test_legend.py::test_legend_ordereddict\", \"lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent\", \"lib/matplotlib/tests/test_legend.py::test_legend_remove\", \"lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok\", \"lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]\", \"lib/matplotlib/tests/test_legend.py::test_legend_text_axes\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_empty\", \"lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize\", \"lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes\", \"lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]\", \"lib/matplotlib/tests/test_legend.py::test_nanscatter\", \"lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]\", \"lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]\", \"lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]\", \"lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]\", \"lib/matplotlib/tests/test_legend.py::test_rc[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_rc[png]\", \"lib/matplotlib/tests/test_legend.py::test_shadow_framealpha\", \"lib/matplotlib/tests/test_legend.py::test_subfigure_legend\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]\", \"lib/matplotlib/tests/test_legend.py::test_various_labels[png]\", \"lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc\", \"lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer\"]",
  "environment_setup_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3",
  "patch_files": [
    "lib/matplotlib/legend.py",
    "lib/matplotlib/text.py"
  ],
  "test_patch_files": [
    "lib/matplotlib/tests/test_legend.py"
  ],
  "patch_diff_details": {
    "lib/matplotlib/legend.py": {
      "diffs": [
        {
          "start_line_old": 41,
          "end_line_old": 41,
          "file_pos": 3,
          "file_context_length": 28951,
          "closest_snippet_id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_Legend.get_title_Legend.get_bbox_to_anchor.2.2.1.1",
          "closest_snippet_line_distance": 836,
          "pos": 54,
          "context_length": 26343
        },
        {
          "start_line_old": 743,
          "end_line_old": 747,
          "file_pos": 3,
          "file_context_length": 28951,
          "closest_snippet_id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_Legend.draw_Legend.draw.2.self.stale.1",
          "closest_snippet_line_distance": 113,
          "pos": 93,
          "context_length": 41534
        },
        {
          "start_line_old": 1077,
          "end_line_old": 1084,
          "file_pos": 3,
          "file_context_length": 28951,
          "closest_snippet_id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_Legend.__init__.52_Legend.__init__.74.5.1",
          "closest_snippet_line_distance": 523,
          "pos": 25,
          "context_length": 10623
        },
        {
          "start_line_old": 1094,
          "end_line_old": 1094,
          "file_pos": 3,
          "file_context_length": 28951,
          "closest_snippet_id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_Legend.__init__.52_Legend.__init__.74.5.1",
          "closest_snippet_line_distance": 533,
          "pos": 25,
          "context_length": 10623
        }
      ]
    },
    "lib/matplotlib/text.py": {
      "diffs": [
        {
          "start_line_old": 135,
          "end_line_old": 135,
          "file_pos": 12,
          "file_context_length": 115578,
          "pos": 30,
          "context_length": 14382
        }
      ]
    }
  },
  "vectors": 3882,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/contour.py_ContourLabeler._add_label_ContourLabeler.add_label.3",
      "distance": 0.8499810099601746,
      "file_path": "lib/matplotlib/contour.py",
      "start_line": 465,
      "end_line": 482,
      "tokens": 181,
      "context_length": 181
    },
    {
      "position": 2,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/legend_demo.py_44_71",
      "distance": 0.8816444277763367,
      "file_path": "examples/text_labels_and_annotations/legend_demo.py",
      "start_line": 76,
      "end_line": 116,
      "tokens": 567,
      "context_length": 748
    },
    {
      "position": 3,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_Legend._init_legend_box.mode_Legend._init_legend_box.self.legendHandles.1",
      "distance": 0.8973530530929565,
      "file_path": "lib/matplotlib/legend.py",
      "start_line": 787,
      "end_line": 802,
      "tokens": 175,
      "context_length": 923,
      "file_pos": 3
    },
    {
      "position": 4,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/line_with_text.py_8_",
      "distance": 0.8978854417800903,
      "file_path": "examples/text_labels_and_annotations/line_with_text.py",
      "start_line": 51,
      "end_line": 87,
      "tokens": 260,
      "context_length": 1183
    },
    {
      "position": 5,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/label_subplots.py_1_",
      "distance": 0.9163302183151245,
      "file_path": "examples/text_labels_and_annotations/label_subplots.py",
      "start_line": 1,
      "end_line": 71,
      "tokens": 603,
      "context_length": 1786
    },
    {
      "position": 6,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/contour.py_ContourLabeler._get_label_text_ContourLabeler._get_label_clabeltext.transDataInv.5.1",
      "distance": 0.9249144792556763,
      "file_path": "lib/matplotlib/contour.py",
      "start_line": 443,
      "end_line": 463,
      "tokens": 235,
      "context_length": 2021
    },
    {
      "position": 7,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/contour.py_ContourLabeler.add_label_clabeltext_ContourLabeler.add_label_clabeltext.7",
      "distance": 0.932162880897522,
      "file_path": "lib/matplotlib/contour.py",
      "start_line": 484,
      "end_line": 493,
      "tokens": 130,
      "context_length": 2151
    },
    {
      "position": 8,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerErrorbar.create_artists_HandlerErrorbar.create_artists.18.1",
      "distance": 0.9324232339859009,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 540,
      "end_line": 622,
      "tokens": 756,
      "context_length": 2907
    },
    {
      "position": 9,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerTuple.create_artists_HandlerTuple.create_artists.8.1",
      "distance": 0.9328370094299316,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 736,
      "end_line": 767,
      "tokens": 258,
      "context_length": 3165
    },
    {
      "position": 10,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/legend_demo.py_1_43",
      "distance": 0.9350311160087585,
      "file_path": "examples/text_labels_and_annotations/legend_demo.py",
      "start_line": 1,
      "end_line": 75,
      "tokens": 738,
      "context_length": 3903
    },
    {
      "position": 11,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/legend_demo.py_x_76_",
      "distance": 0.9384597539901733,
      "file_path": "examples/text_labels_and_annotations/legend_demo.py",
      "start_line": 164,
      "end_line": 183,
      "tokens": 198,
      "context_length": 4101
    },
    {
      "position": 12,
      "id": "/tmp/repos/matplotlib/tutorials/intermediate/legend_guide.py_92_147",
      "distance": 0.9558314681053162,
      "file_path": "tutorials/intermediate/legend_guide.py",
      "start_line": 196,
      "end_line": 282,
      "tokens": 812,
      "context_length": 4913
    },
    {
      "position": 13,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py__parse_legend_args_",
      "distance": 0.9567624926567078,
      "file_path": "lib/matplotlib/legend.py",
      "start_line": 1108,
      "end_line": 1204,
      "tokens": 715,
      "context_length": 5628,
      "file_pos": 7
    },
    {
      "position": 14,
      "id": "/tmp/repos/matplotlib/tutorials/intermediate/legend_guide.py_32_91",
      "distance": 0.9654437899589539,
      "file_path": "tutorials/intermediate/legend_guide.py",
      "start_line": 122,
      "end_line": 194,
      "tokens": 768,
      "context_length": 6396
    },
    {
      "position": 15,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/legend.py_1_",
      "distance": 0.9684227705001831,
      "file_path": "examples/text_labels_and_annotations/legend.py",
      "start_line": 1,
      "end_line": 40,
      "tokens": 233,
      "context_length": 6629
    },
    {
      "position": 16,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerLineCollection.create_artists_HandlerLineCollection.create_artists.6.1",
      "distance": 0.9803420305252075,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 409,
      "end_line": 420,
      "tokens": 129,
      "context_length": 6758
    },
    {
      "position": 17,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/pyplot.py_278_tricontourf.3.1",
      "distance": 0.9825321435928345,
      "file_path": "lib/matplotlib/pyplot.py",
      "start_line": 2927,
      "end_line": 2963,
      "tokens": 401,
      "context_length": 7159
    },
    {
      "position": 18,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py__Line2DHandleList__Line2DHandleList.__getitem__.2.1",
      "distance": 0.9833272099494934,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 248,
      "end_line": 263,
      "tokens": 144,
      "context_length": 7303
    },
    {
      "position": 19,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_Legend.__init__.52_Legend.__init__.74.5.1",
      "distance": 0.9871909618377686,
      "file_path": "lib/matplotlib/legend.py",
      "start_line": 470,
      "end_line": 561,
      "tokens": 1270,
      "context_length": 8573,
      "file_pos": 9
    },
    {
      "position": 20,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/contour.py_ContourLabeler.clabel.2_ContourLabeler.clabel.28.1",
      "distance": 0.988919734954834,
      "file_path": "lib/matplotlib/contour.py",
      "start_line": 167,
      "end_line": 238,
      "tokens": 712,
      "context_length": 9285
    },
    {
      "position": 21,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerStem.create_artists_HandlerStem._copy_collection_props.3",
      "distance": 0.9944618940353394,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 659,
      "end_line": 712,
      "tokens": 498,
      "context_length": 9783
    },
    {
      "position": 22,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.legend.2_FigureBase.legend.11.1",
      "distance": 0.9962049126625061,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 1053,
      "end_line": 1075,
      "tokens": 242,
      "context_length": 10025
    },
    {
      "position": 23,
      "id": "/tmp/repos/matplotlib/lib/mpl_toolkits/axisartist/axis_artist.py_LabelBase.draw_LabelBase.draw.15",
      "distance": 1.0021939277648926,
      "file_path": "lib/mpl_toolkits/axisartist/axis_artist.py",
      "start_line": 245,
      "end_line": 263,
      "tokens": 161,
      "context_length": 10186
    },
    {
      "position": 24,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerStepPatch.create_artists_HandlerStepPatch.create_artists.3.1",
      "distance": 1.0045685768127441,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 378,
      "end_line": 388,
      "tokens": 137,
      "context_length": 10323
    },
    {
      "position": 25,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_22__get_legend_handles_labels.5.1",
      "distance": 1.012364387512207,
      "file_path": "lib/matplotlib/legend.py",
      "start_line": 1069,
      "end_line": 1105,
      "tokens": 300,
      "context_length": 10623,
      "file_pos": 11
    },
    {
      "position": 26,
      "id": "/tmp/repos/matplotlib/lib/mpl_toolkits/axisartist/axis_artist.py_AxisLabel_AxisLabel.set_default_angle.1",
      "distance": 1.0131266117095947,
      "file_path": "lib/mpl_toolkits/axisartist/axis_artist.py",
      "start_line": 285,
      "end_line": 352,
      "tokens": 470,
      "context_length": 11093
    },
    {
      "position": 27,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_Legend.1_Legend.__init__.51",
      "distance": 1.0191258192062378,
      "file_path": "lib/matplotlib/legend.py",
      "start_line": 285,
      "end_line": 468,
      "tokens": 1668,
      "context_length": 12761,
      "file_pos": 11
    },
    {
      "position": 28,
      "id": "/tmp/repos/matplotlib/tutorials/intermediate/legend_guide.py_1_31",
      "distance": 1.02018404006958,
      "file_path": "tutorials/intermediate/legend_guide.py",
      "start_line": 1,
      "end_line": 120,
      "tokens": 883,
      "context_length": 13644
    },
    {
      "position": 29,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerPatch._create_patch_HandlerPatch.create_artists.4.1",
      "distance": 1.0256760120391846,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 331,
      "end_line": 348,
      "tokens": 199,
      "context_length": 13843
    },
    {
      "position": 30,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/text.py_Text_Text.__init__.22",
      "distance": 1.027944564819336,
      "file_path": "lib/matplotlib/text.py",
      "start_line": 91,
      "end_line": 160,
      "tokens": 539,
      "context_length": 14382,
      "file_pos": 12
    },
    {
      "position": 31,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/figlegend_demo.py_1_",
      "distance": 1.0288275480270386,
      "file_path": "examples/text_labels_and_annotations/figlegend_demo.py",
      "start_line": 1,
      "end_line": 31,
      "tokens": 254,
      "context_length": 14636
    },
    {
      "position": 32,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_Legend.get_title_Legend.get_bbox_to_anchor.2.2.1.1",
      "distance": 1.0289881229400635,
      "file_path": "lib/matplotlib/legend.py",
      "start_line": 877,
      "end_line": 913,
      "tokens": 240,
      "context_length": 14876,
      "file_pos": 13
    },
    {
      "position": 33,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.legend_FigureBase.legend.1",
      "distance": 1.0291664600372314,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 942,
      "end_line": 1051,
      "tokens": 815,
      "context_length": 15691
    },
    {
      "position": 34,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerLine2DCompound_HandlerLine2DCompound.create_artists.17.1",
      "distance": 1.031153917312622,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 211,
      "end_line": 245,
      "tokens": 323,
      "context_length": 16014
    },
    {
      "position": 35,
      "id": "/tmp/repos/matplotlib/examples/ticks/colorbar_tick_labelling_demo.py_1_",
      "distance": 1.0335192680358887,
      "file_path": "examples/ticks/colorbar_tick_labelling_demo.py",
      "start_line": 1,
      "end_line": 48,
      "tokens": 303,
      "context_length": 16317
    },
    {
      "position": 36,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/legend_demo.py_72_HandlerDashedLines.create_artists.numlines.10.1",
      "distance": 1.0346065759658813,
      "file_path": "examples/text_labels_and_annotations/legend_demo.py",
      "start_line": 118,
      "end_line": 162,
      "tokens": 403,
      "context_length": 16720
    },
    {
      "position": 37,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/axis.py_Tick.label_Tick._set_labelrotation.self._labelrotation.1",
      "distance": 1.0387163162231445,
      "file_path": "lib/matplotlib/axis.py",
      "start_line": 185,
      "end_line": 200,
      "tokens": 134,
      "context_length": 16854
    },
    {
      "position": 38,
      "id": "/tmp/repos/matplotlib/tutorials/text/text_intro.py_14_74",
      "distance": 1.0390392541885376,
      "file_path": "tutorials/text/text_intro.py",
      "start_line": 85,
      "end_line": 171,
      "tokens": 776,
      "context_length": 17630
    },
    {
      "position": 39,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/contour.py_ContourLabeler.add_label_near_ContourLabeler.add_label_near.22.2",
      "distance": 1.0406535863876343,
      "file_path": "lib/matplotlib/contour.py",
      "start_line": 495,
      "end_line": 559,
      "tokens": 667,
      "context_length": 18297
    },
    {
      "position": 40,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/axis.py_Axis.set_ticklabels_Axis.set_ticklabels.9.1",
      "distance": 1.0411031246185303,
      "file_path": "lib/matplotlib/axis.py",
      "start_line": 1670,
      "end_line": 1747,
      "tokens": 708,
      "context_length": 19005
    },
    {
      "position": 41,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/demo_text_path.py_11_",
      "distance": 1.0436913967132568,
      "file_path": "examples/text_labels_and_annotations/demo_text_path.py",
      "start_line": 47,
      "end_line": 134,
      "tokens": 775,
      "context_length": 19780
    },
    {
      "position": 42,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/mathtext_examples.py_doall_doall.mpl_grey_rgb.17",
      "distance": 1.046290636062622,
      "file_path": "examples/text_labels_and_annotations/mathtext_examples.py",
      "start_line": 59,
      "end_line": 102,
      "tokens": 434,
      "context_length": 20214
    },
    {
      "position": 43,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_1_update_from_first_child.2.1",
      "distance": 1.0466097593307495,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 1,
      "end_line": 44,
      "tokens": 317,
      "context_length": 20531
    },
    {
      "position": 44,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/angle_annotation.py_75_",
      "distance": 1.0479092597961426,
      "file_path": "examples/text_labels_and_annotations/angle_annotation.py",
      "start_line": 270,
      "end_line": 326,
      "tokens": 707,
      "context_length": 21238
    },
    {
      "position": 45,
      "id": "/tmp/repos/matplotlib/examples/lines_bars_and_markers/bar_label_demo.py_1_",
      "distance": 1.048505425453186,
      "file_path": "examples/lines_bars_and_markers/bar_label_demo.py",
      "start_line": 1,
      "end_line": 107,
      "tokens": 820,
      "context_length": 22058
    },
    {
      "position": 46,
      "id": "/tmp/repos/matplotlib/lib/mpl_toolkits/axisartist/axis_artist.py_TickLabels_TickLabels.2",
      "distance": 1.0523316860198975,
      "file_path": "lib/mpl_toolkits/axisartist/axis_artist.py",
      "start_line": 400,
      "end_line": 583,
      "tokens": 1482,
      "context_length": 23540
    },
    {
      "position": 47,
      "id": "/tmp/repos/matplotlib/tutorials/text/text_intro.py_font_149",
      "distance": 1.0525225400924683,
      "file_path": "tutorials/text/text_intro.py",
      "start_line": 173,
      "end_line": 261,
      "tokens": 771,
      "context_length": 24311
    },
    {
      "position": 48,
      "id": "/tmp/repos/matplotlib/examples/userdemo/simple_legend01.py_1_",
      "distance": 1.0530117750167847,
      "file_path": "examples/userdemo/simple_legend01.py",
      "start_line": 1,
      "end_line": 27,
      "tokens": 199,
      "context_length": 24510
    },
    {
      "position": 49,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/contour.py__contour_labeler_event_handler__contour_labeler_event_handler.7.5.1.2",
      "distance": 1.0551923513412476,
      "file_path": "lib/matplotlib/contour.py",
      "start_line": 47,
      "end_line": 73,
      "tokens": 309,
      "context_length": 24819
    },
    {
      "position": 50,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/pyplot.py_226_loglog.1.1",
      "distance": 1.055276870727539,
      "file_path": "lib/matplotlib/pyplot.py",
      "start_line": 2655,
      "end_line": 2670,
      "tokens": 169,
      "context_length": 24988
    },
    {
      "position": 51,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/line_with_text.py_1_MyLine.draw.2",
      "distance": 1.055485486984253,
      "file_path": "examples/text_labels_and_annotations/line_with_text.py",
      "start_line": 1,
      "end_line": 49,
      "tokens": 332,
      "context_length": 25320
    },
    {
      "position": 52,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerBase.legend_artist_HandlerBase.create_artists.1",
      "distance": 1.0581234693527222,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 93,
      "end_line": 136,
      "tokens": 357,
      "context_length": 25677
    },
    {
      "position": 53,
      "id": "/tmp/repos/matplotlib/lib/mpl_toolkits/axisartist/axis_artist.py_LabelBase_LabelBase._get_opposite_direction.1",
      "distance": 1.0586328506469727,
      "file_path": "lib/mpl_toolkits/axisartist/axis_artist.py",
      "start_line": 202,
      "end_line": 243,
      "tokens": 280,
      "context_length": 25957
    },
    {
      "position": 54,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_1_legend_handler",
      "distance": 1.0590965747833252,
      "file_path": "lib/matplotlib/legend.py",
      "start_line": 1,
      "end_line": 49,
      "tokens": 386,
      "context_length": 26343,
      "file_pos": 21
    },
    {
      "position": 55,
      "id": "/tmp/repos/matplotlib/examples/pyplots/pyplot_text.py_1_",
      "distance": 1.0593198537826538,
      "file_path": "examples/pyplots/pyplot_text.py",
      "start_line": 1,
      "end_line": 42,
      "tokens": 242,
      "context_length": 26585
    },
    {
      "position": 56,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerLine2D_HandlerLine2D.create_artists.9.1",
      "distance": 1.059367299079895,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 266,
      "end_line": 302,
      "tokens": 326,
      "context_length": 26911
    },
    {
      "position": 57,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/accented_text.py_1_",
      "distance": 1.061424732208252,
      "file_path": "examples/text_labels_and_annotations/accented_text.py",
      "start_line": 1,
      "end_line": 36,
      "tokens": 376,
      "context_length": 27287
    },
    {
      "position": 58,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/contour.py_ContourLabeler.print_label_ContourLabeler.too_close.3.1",
      "distance": 1.0623164176940918,
      "file_path": "lib/matplotlib/contour.py",
      "start_line": 240,
      "end_line": 249,
      "tokens": 147,
      "context_length": 27434
    },
    {
      "position": 59,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerErrorbar_HandlerErrorbar.get_err_size.3.1",
      "distance": 1.0624650716781616,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 518,
      "end_line": 538,
      "tokens": 177,
      "context_length": 27611
    },
    {
      "position": 60,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/multiline.py_1_",
      "distance": 1.06327223777771,
      "file_path": "examples/text_labels_and_annotations/multiline.py",
      "start_line": 1,
      "end_line": 46,
      "tokens": 386,
      "context_length": 27997
    },
    {
      "position": 61,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/text.py_Text.draw_Text.draw.2.self.stale.1",
      "distance": 1.0633689165115356,
      "file_path": "lib/matplotlib/text.py",
      "start_line": 671,
      "end_line": 739,
      "tokens": 630,
      "context_length": 28627,
      "file_pos": 24
    },
    {
      "position": 62,
      "id": "/tmp/repos/matplotlib/tutorials/text/text_intro.py_150_209",
      "distance": 1.0635828971862793,
      "file_path": "tutorials/text/text_intro.py",
      "start_line": 262,
      "end_line": 329,
      "tokens": 833,
      "context_length": 29460
    },
    {
      "position": 63,
      "id": "/tmp/repos/matplotlib/examples/subplots_axes_and_figures/figure_title.py_1_",
      "distance": 1.0658562183380127,
      "file_path": "examples/subplots_axes_and_figures/figure_title.py",
      "start_line": 1,
      "end_line": 65,
      "tokens": 544,
      "context_length": 30004
    },
    {
      "position": 64,
      "id": "/tmp/repos/matplotlib/examples/showcase/anatomy.py_49_",
      "distance": 1.0659499168395996,
      "file_path": "examples/showcase/anatomy.py",
      "start_line": 90,
      "end_line": 162,
      "tokens": 554,
      "context_length": 30558
    },
    {
      "position": 65,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/pyplot.py_190_clabel.1.1",
      "distance": 1.06620192527771,
      "file_path": "lib/matplotlib/pyplot.py",
      "start_line": 2445,
      "end_line": 2456,
      "tokens": 146,
      "context_length": 30704
    },
    {
      "position": 66,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/annotation_demo.py_text_",
      "distance": 1.0666697025299072,
      "file_path": "examples/text_labels_and_annotations/annotation_demo.py",
      "start_line": 365,
      "end_line": 389,
      "tokens": 264,
      "context_length": 30968
    },
    {
      "position": 67,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.supylabel_FigureBase.supylabel.info.2.1",
      "distance": 1.0673586130142212,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 421,
      "end_line": 429,
      "tokens": 137,
      "context_length": 31105
    },
    {
      "position": 68,
      "id": "/tmp/repos/matplotlib/lib/mpl_toolkits/axisartist/axis_artist.py_AxisArtist._init_label_AxisArtist._init_label.5",
      "distance": 1.0699377059936523,
      "file_path": "lib/mpl_toolkits/axisartist/axis_artist.py",
      "start_line": 949,
      "end_line": 963,
      "tokens": 141,
      "context_length": 31246
    },
    {
      "position": 69,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/pyplot.py_barh_bar_label.1.1",
      "distance": 1.0779412984848022,
      "file_path": "lib/matplotlib/pyplot.py",
      "start_line": 2404,
      "end_line": 2417,
      "tokens": 158,
      "context_length": 31404
    },
    {
      "position": 70,
      "id": "/tmp/repos/matplotlib/lib/mpl_toolkits/axisartist/axis_artist.py_AxisArtist._update_label_AxisArtist._update_label.9",
      "distance": 1.0797048807144165,
      "file_path": "lib/mpl_toolkits/axisartist/axis_artist.py",
      "start_line": 965,
      "end_line": 992,
      "tokens": 222,
      "context_length": 31626
    },
    {
      "position": 71,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.supxlabel_FigureBase.supxlabel.info.2.1",
      "distance": 1.080161452293396,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 412,
      "end_line": 419,
      "tokens": 129,
      "context_length": 31755
    },
    {
      "position": 72,
      "id": "/tmp/repos/matplotlib/examples/userdemo/simple_legend02.py_1_",
      "distance": 1.080673098564148,
      "file_path": "examples/userdemo/simple_legend02.py",
      "start_line": 1,
      "end_line": 24,
      "tokens": 136,
      "context_length": 31891
    },
    {
      "position": 73,
      "id": "/tmp/repos/matplotlib/tutorials/text/text_intro.py_1_13",
      "distance": 1.0811823606491089,
      "file_path": "tutorials/text/text_intro.py",
      "start_line": 1,
      "end_line": 83,
      "tokens": 733,
      "context_length": 32624
    },
    {
      "position": 74,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/axis.py_Axis.get_gridlines_Axis.get_minorticklabels.5.1",
      "distance": 1.0821902751922607,
      "file_path": "lib/matplotlib/axis.py",
      "start_line": 1171,
      "end_line": 1201,
      "tokens": 307,
      "context_length": 32931
    },
    {
      "position": 75,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/demo_text_rotation_mode.py_fig_",
      "distance": 1.0822675228118896,
      "file_path": "examples/text_labels_and_annotations/demo_text_rotation_mode.py",
      "start_line": 79,
      "end_line": 94,
      "tokens": 102,
      "context_length": 33033
    },
    {
      "position": 76,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/pyplot.py_142_162",
      "distance": 1.0831542015075684,
      "file_path": "lib/matplotlib/pyplot.py",
      "start_line": 2256,
      "end_line": 2331,
      "tokens": 767,
      "context_length": 33800
    },
    {
      "position": 77,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/date.py_1_",
      "distance": 1.0833845138549805,
      "file_path": "examples/text_labels_and_annotations/date.py",
      "start_line": 1,
      "end_line": 64,
      "tokens": 658,
      "context_length": 34458
    },
    {
      "position": 78,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/text.py_Text._get_layout.corners_horiz_Text._get_layout.54.1",
      "distance": 1.08406400680542,
      "file_path": "lib/matplotlib/text.py",
      "start_line": 372,
      "end_line": 445,
      "tokens": 731,
      "context_length": 35189,
      "file_pos": 30
    },
    {
      "position": 79,
      "id": "/tmp/repos/matplotlib/tutorials/intermediate/artists.py_axis_",
      "distance": 1.0842976570129395,
      "file_path": "tutorials/intermediate/artists.py",
      "start_line": 616,
      "end_line": 727,
      "tokens": 1004,
      "context_length": 36193
    },
    {
      "position": 80,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_Legend.draw_Legend.draw.2.self.stale.1",
      "distance": 1.0857044458389282,
      "file_path": "lib/matplotlib/legend.py",
      "start_line": 605,
      "end_line": 634,
      "tokens": 238,
      "context_length": 36431,
      "file_pos": 31
    },
    {
      "position": 81,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/artist.py_Artist.get_label_Artist.set_zorder.self.stale.1",
      "distance": 1.0861530303955078,
      "file_path": "lib/matplotlib/artist.py",
      "start_line": 1072,
      "end_line": 1109,
      "tokens": 215,
      "context_length": 36646
    },
    {
      "position": 82,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/text.py_Annotation.__init__.2_Annotation.__init__.14",
      "distance": 1.0863494873046875,
      "file_path": "lib/matplotlib/text.py",
      "start_line": 1792,
      "end_line": 1829,
      "tokens": 388,
      "context_length": 37034,
      "file_pos": 32
    },
    {
      "position": 83,
      "id": "/tmp/repos/matplotlib/examples/mplot3d/text3d.py_1_",
      "distance": 1.0889291763305664,
      "file_path": "examples/mplot3d/text3d.py",
      "start_line": 1,
      "end_line": 48,
      "tokens": 433,
      "context_length": 37467
    },
    {
      "position": 84,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/contour.py_ContourLabeler.pop_label__is_closed_polygon.2.1",
      "distance": 1.089040994644165,
      "file_path": "lib/matplotlib/contour.py",
      "start_line": 561,
      "end_line": 620,
      "tokens": 475,
      "context_length": 37942
    },
    {
      "position": 85,
      "id": "/tmp/repos/matplotlib/lib/mpl_toolkits/axisartist/axis_artist.py_LabelBase.get_window_extent_LabelBase.get_window_extent.tr.14.1",
      "distance": 1.090504765510559,
      "file_path": "lib/mpl_toolkits/axisartist/axis_artist.py",
      "start_line": 265,
      "end_line": 282,
      "tokens": 163,
      "context_length": 38105
    },
    {
      "position": 86,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/engineering_formatter.py_1_",
      "distance": 1.090742588043213,
      "file_path": "examples/text_labels_and_annotations/engineering_formatter.py",
      "start_line": 1,
      "end_line": 45,
      "tokens": 367,
      "context_length": 38472
    },
    {
      "position": 87,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.suptitle_FigureBase.suptitle.info.2.1",
      "distance": 1.0913934707641602,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 403,
      "end_line": 410,
      "tokens": 132,
      "context_length": 38604
    },
    {
      "position": 88,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerRegularPolyCollection.create_artists_HandlerRegularPolyCollection.create_artists.7.1",
      "distance": 1.0917041301727295,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 476,
      "end_line": 494,
      "tokens": 178,
      "context_length": 38782
    },
    {
      "position": 89,
      "id": "/tmp/repos/matplotlib/lib/mpl_toolkits/mplot3d/axis3d.py_Axis.draw_Axis.draw.55",
      "distance": 1.0919337272644043,
      "file_path": "lib/mpl_toolkits/mplot3d/axis3d.py",
      "start_line": 265,
      "end_line": 343,
      "tokens": 826,
      "context_length": 39608
    },
    {
      "position": 90,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/contour.py_1_ClabelText.get_rotation.2.1",
      "distance": 1.0950653553009033,
      "file_path": "lib/matplotlib/contour.py",
      "start_line": 1,
      "end_line": 44,
      "tokens": 289,
      "context_length": 39897
    },
    {
      "position": 91,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/text_rotation.py_addtext_addtext.10",
      "distance": 1.096107006072998,
      "file_path": "examples/text_labels_and_annotations/text_rotation.py",
      "start_line": 24,
      "end_line": 35,
      "tokens": 212,
      "context_length": 40109
    },
    {
      "position": 92,
      "id": "/tmp/repos/matplotlib/examples/images_contours_and_fields/contour_label_demo.py_1_",
      "distance": 1.0965869426727295,
      "file_path": "examples/images_contours_and_fields/contour_label_demo.py",
      "start_line": 1,
      "end_line": 87,
      "tokens": 613,
      "context_length": 40722
    },
    {
      "position": 93,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend.py_Legend._init_legend_box_Legend._init_legend_box.32.itemboxes.4",
      "distance": 1.0971059799194336,
      "file_path": "lib/matplotlib/legend.py",
      "start_line": 705,
      "end_line": 785,
      "tokens": 812,
      "context_length": 41534,
      "file_pos": 37
    },
    {
      "position": 94,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerLineCollection_HandlerLineCollection._default_update_prop.6",
      "distance": 1.0984898805618286,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 391,
      "end_line": 407,
      "tokens": 134,
      "context_length": 41668
    },
    {
      "position": 95,
      "id": "/tmp/repos/matplotlib/examples/pyplots/align_ylabels.py_1_make_plot.19",
      "distance": 1.0991313457489014,
      "file_path": "examples/pyplots/align_ylabels.py",
      "start_line": 1,
      "end_line": 37,
      "tokens": 288,
      "context_length": 41956
    },
    {
      "position": 96,
      "id": "/tmp/repos/matplotlib/lib/mpl_toolkits/axisartist/axis_artist.py_AxisArtist._draw_label_AxisArtist.draw.2.7",
      "distance": 1.1006457805633545,
      "file_path": "lib/mpl_toolkits/axisartist/axis_artist.py",
      "start_line": 994,
      "end_line": 1030,
      "tokens": 271,
      "context_length": 42227
    },
    {
      "position": 97,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/contour.py_ContourLabeler_ContourLabeler.clabel.1",
      "distance": 1.1007843017578125,
      "file_path": "lib/matplotlib/contour.py",
      "start_line": 76,
      "end_line": 165,
      "tokens": 821,
      "context_length": 43048
    },
    {
      "position": 98,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/angle_annotation.py_67_plot_angle.4.1",
      "distance": 1.1013684272766113,
      "file_path": "examples/text_labels_and_annotations/angle_annotation.py",
      "start_line": 254,
      "end_line": 267,
      "tokens": 162,
      "context_length": 43210
    },
    {
      "position": 99,
      "id": "/tmp/repos/matplotlib/tutorials/introductory/lifecycle.py_36_111",
      "distance": 1.1015071868896484,
      "file_path": "tutorials/introductory/lifecycle.py",
      "start_line": 105,
      "end_line": 198,
      "tokens": 827,
      "context_length": 44037
    },
    {
      "position": 100,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/fancytextbox_demo.py_1_",
      "distance": 1.1026650667190552,
      "file_path": "examples/text_labels_and_annotations/fancytextbox_demo.py",
      "start_line": 1,
      "end_line": 27,
      "tokens": 184,
      "context_length": 44221
    },
    {
      "position": 101,
      "id": "/tmp/repos/matplotlib/tutorials/intermediate/legend_guide.py_HandlerEllipse_",
      "distance": 1.1042900085449219,
      "file_path": "tutorials/intermediate/legend_guide.py",
      "start_line": 285,
      "end_line": 304,
      "tokens": 193,
      "context_length": 44414
    },
    {
      "position": 102,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/text.py_Annotation.draw_Annotation.draw.2.10",
      "distance": 1.1047919988632202,
      "file_path": "lib/matplotlib/text.py",
      "start_line": 1968,
      "end_line": 1985,
      "tokens": 187,
      "context_length": 44601,
      "file_pos": 40
    },
    {
      "position": 103,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerNpoints.get_xdata_HandlerNpoints.get_xdata.3.1",
      "distance": 1.104803204536438,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 166,
      "end_line": 178,
      "tokens": 158,
      "context_length": 44759
    },
    {
      "position": 104,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/contour.py_ContourLabeler.set_label_props_ContourLabeler.get_text.2.5.1.1",
      "distance": 1.1051081418991089,
      "file_path": "lib/matplotlib/contour.py",
      "start_line": 299,
      "end_line": 317,
      "tokens": 164,
      "context_length": 44923
    },
    {
      "position": 105,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/legend_handler.py_HandlerBase_HandlerBase.adjust_drawing_area.5.1",
      "distance": 1.1051760911941528,
      "file_path": "lib/matplotlib/legend_handler.py",
      "start_line": 47,
      "end_line": 91,
      "tokens": 383,
      "context_length": 45306
    },
    {
      "position": 106,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/axes/_subplots.py_SubplotBase._label_outer_yaxis_SubplotBase._label_outer_yaxis.4.2.3.1",
      "distance": 1.1063508987426758,
      "file_path": "lib/matplotlib/axes/_subplots.py",
      "start_line": 131,
      "end_line": 145,
      "tokens": 182,
      "context_length": 45488
    },
    {
      "position": 107,
      "id": "/tmp/repos/matplotlib/tutorials/text/text_intro.py_210_",
      "distance": 1.1067283153533936,
      "file_path": "tutorials/text/text_intro.py",
      "start_line": 330,
      "end_line": 423,
      "tokens": 764,
      "context_length": 46252
    },
    {
      "position": 108,
      "id": "/tmp/repos/matplotlib/examples/pyplots/fig_axes_labels_simple.py_1_",
      "distance": 1.1096363067626953,
      "file_path": "examples/pyplots/fig_axes_labels_simple.py",
      "start_line": 1,
      "end_line": 43,
      "tokens": 289,
      "context_length": 46541
    },
    {
      "position": 109,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/mathtext_demo.py_1_",
      "distance": 1.109663486480713,
      "file_path": "examples/text_labels_and_annotations/mathtext_demo.py",
      "start_line": 1,
      "end_line": 27,
      "tokens": 219,
      "context_length": 46760
    },
    {
      "position": 110,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/arrow_demo.py_6_",
      "distance": 1.1104384660720825,
      "file_path": "examples/text_labels_and_annotations/arrow_demo.py",
      "start_line": 141,
      "end_line": 160,
      "tokens": 238,
      "context_length": 46998
    },
    {
      "position": 111,
      "id": "/tmp/repos/matplotlib/examples/text_labels_and_annotations/titles_demo.py_1_",
      "distance": 1.1114253997802734,
      "file_path": "examples/text_labels_and_annotations/titles_demo.py",
      "start_line": 1,
      "end_line": 60,
      "tokens": 367,
      "context_length": 47365
    },
    {
      "position": 112,
      "id": "/tmp/repos/matplotlib/examples/misc/logos2.py_create_text_axes_create_text_axes.11",
      "distance": 1.1119108200073242,
      "file_path": "examples/misc/logos2.py",
      "start_line": 91,
      "end_line": 106,
      "tokens": 154,
      "context_length": 47519
    },
    {
      "position": 113,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/axes/_axes.py_Axes.pcolorfast.C_Axes.hist",
      "distance": 1.1120229959487915,
      "file_path": "lib/matplotlib/axes/_axes.py",
      "start_line": 6183,
      "end_line": 6771,
      "tokens": 1190,
      "context_length": 48709
    }
  ],
  "files": [
    {
      "file_path": "lib/matplotlib/contour.py",
      "position": 1,
      "tokens": 16669,
      "context_length": 16669
    },
    {
      "file_path": "examples/text_labels_and_annotations/legend_demo.py",
      "position": 2,
      "tokens": 1907,
      "context_length": 18576
    },
    {
      "file_path": "lib/matplotlib/legend.py",
      "position": 3,
      "tokens": 10375,
      "context_length": 28951
    },
    {
      "file_path": "examples/text_labels_and_annotations/line_with_text.py",
      "position": 4,
      "tokens": 592,
      "context_length": 29543
    },
    {
      "file_path": "examples/text_labels_and_annotations/label_subplots.py",
      "position": 5,
      "tokens": 603,
      "context_length": 30146
    },
    {
      "file_path": "lib/matplotlib/legend_handler.py",
      "position": 6,
      "tokens": 6538,
      "context_length": 36684
    },
    {
      "file_path": "tutorials/intermediate/legend_guide.py",
      "position": 7,
      "tokens": 2657,
      "context_length": 39341
    },
    {
      "file_path": "examples/text_labels_and_annotations/legend.py",
      "position": 8,
      "tokens": 233,
      "context_length": 39574
    },
    {
      "file_path": "lib/matplotlib/pyplot.py",
      "position": 9,
      "tokens": 26445,
      "context_length": 66019
    },
    {
      "file_path": "lib/matplotlib/figure.py",
      "position": 10,
      "tokens": 26267,
      "context_length": 92286
    },
    {
      "file_path": "lib/mpl_toolkits/axisartist/axis_artist.py",
      "position": 11,
      "tokens": 8058,
      "context_length": 100344
    },
    {
      "file_path": "lib/matplotlib/text.py",
      "position": 12,
      "tokens": 15234,
      "context_length": 115578
    },
    {
      "file_path": "examples/text_labels_and_annotations/figlegend_demo.py",
      "position": 13,
      "tokens": 254,
      "context_length": 115832
    },
    {
      "file_path": "examples/ticks/colorbar_tick_labelling_demo.py",
      "position": 14,
      "tokens": 303,
      "context_length": 116135
    },
    {
      "file_path": "lib/matplotlib/axis.py",
      "position": 15,
      "tokens": 20216,
      "context_length": 136351
    },
    {
      "file_path": "tutorials/text/text_intro.py",
      "position": 16,
      "tokens": 3878,
      "context_length": 140229
    },
    {
      "file_path": "examples/text_labels_and_annotations/demo_text_path.py",
      "position": 17,
      "tokens": 1098,
      "context_length": 141327
    },
    {
      "file_path": "examples/text_labels_and_annotations/mathtext_examples.py",
      "position": 18,
      "tokens": 1282,
      "context_length": 142609
    },
    {
      "file_path": "examples/text_labels_and_annotations/angle_annotation.py",
      "position": 19,
      "tokens": 3440,
      "context_length": 146049
    },
    {
      "file_path": "examples/lines_bars_and_markers/bar_label_demo.py",
      "position": 20,
      "tokens": 820,
      "context_length": 146869
    },
    {
      "file_path": "examples/userdemo/simple_legend01.py",
      "position": 21,
      "tokens": 199,
      "context_length": 147068
    },
    {
      "file_path": "examples/pyplots/pyplot_text.py",
      "position": 22,
      "tokens": 242,
      "context_length": 147310
    },
    {
      "file_path": "examples/text_labels_and_annotations/accented_text.py",
      "position": 23,
      "tokens": 376,
      "context_length": 147686
    },
    {
      "file_path": "examples/text_labels_and_annotations/multiline.py",
      "position": 24,
      "tokens": 386,
      "context_length": 148072
    },
    {
      "file_path": "examples/subplots_axes_and_figures/figure_title.py",
      "position": 25,
      "tokens": 544,
      "context_length": 148616
    },
    {
      "file_path": "examples/showcase/anatomy.py",
      "position": 26,
      "tokens": 1314,
      "context_length": 149930
    },
    {
      "file_path": "examples/text_labels_and_annotations/annotation_demo.py",
      "position": 27,
      "tokens": 3969,
      "context_length": 153899
    },
    {
      "file_path": "examples/userdemo/simple_legend02.py",
      "position": 28,
      "tokens": 136,
      "context_length": 154035
    },
    {
      "file_path": "examples/text_labels_and_annotations/demo_text_rotation_mode.py",
      "position": 29,
      "tokens": 851,
      "context_length": 154886
    },
    {
      "file_path": "examples/text_labels_and_annotations/date.py",
      "position": 30,
      "tokens": 658,
      "context_length": 155544
    },
    {
      "file_path": "tutorials/intermediate/artists.py",
      "position": 31,
      "tokens": 7704,
      "context_length": 163248
    },
    {
      "file_path": "lib/matplotlib/artist.py",
      "position": 32,
      "tokens": 12876,
      "context_length": 176124
    },
    {
      "file_path": "examples/mplot3d/text3d.py",
      "position": 33,
      "tokens": 433,
      "context_length": 176557
    },
    {
      "file_path": "examples/text_labels_and_annotations/engineering_formatter.py",
      "position": 34,
      "tokens": 367,
      "context_length": 176924
    },
    {
      "file_path": "lib/mpl_toolkits/mplot3d/axis3d.py",
      "position": 35,
      "tokens": 5202,
      "context_length": 182126
    },
    {
      "file_path": "examples/text_labels_and_annotations/text_rotation.py",
      "position": 36,
      "tokens": 484,
      "context_length": 182610
    },
    {
      "file_path": "examples/images_contours_and_fields/contour_label_demo.py",
      "position": 37,
      "tokens": 613,
      "context_length": 183223
    },
    {
      "file_path": "examples/pyplots/align_ylabels.py",
      "position": 38,
      "tokens": 634,
      "context_length": 183857
    },
    {
      "file_path": "tutorials/introductory/lifecycle.py",
      "position": 39,
      "tokens": 2301,
      "context_length": 186158
    },
    {
      "file_path": "examples/text_labels_and_annotations/fancytextbox_demo.py",
      "position": 40,
      "tokens": 184,
      "context_length": 186342
    },
    {
      "file_path": "lib/matplotlib/axes/_subplots.py",
      "position": 41,
      "tokens": 1638,
      "context_length": 187980
    },
    {
      "file_path": "examples/pyplots/fig_axes_labels_simple.py",
      "position": 42,
      "tokens": 289,
      "context_length": 188269
    },
    {
      "file_path": "examples/text_labels_and_annotations/mathtext_demo.py",
      "position": 43,
      "tokens": 219,
      "context_length": 188488
    },
    {
      "file_path": "examples/text_labels_and_annotations/arrow_demo.py",
      "position": 44,
      "tokens": 1559,
      "context_length": 190047
    },
    {
      "file_path": "examples/text_labels_and_annotations/titles_demo.py",
      "position": 45,
      "tokens": 367,
      "context_length": 190414
    },
    {
      "file_path": "examples/misc/logos2.py",
      "position": 46,
      "tokens": 1328,
      "context_length": 191742
    },
    {
      "file_path": "lib/matplotlib/axes/_axes.py",
      "position": 47,
      "tokens": 72828,
      "context_length": 264570
    }
  ]
}