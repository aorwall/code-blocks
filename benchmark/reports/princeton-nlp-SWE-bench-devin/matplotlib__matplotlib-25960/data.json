{
  "instance_id": "matplotlib__matplotlib-25960",
  "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..af0cc4aab1 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1017,7 +1017,7 @@ default: %(va)s\n     #    \" legend(\" -> \" figlegend(\" for the signatures\n     #    \"fig.legend(\" -> \"plt.figlegend\" for the code examples\n     #    \"ax.plot\" -> \"plt.plot\" for consistency in using pyplot when able\n-    @_docstring.dedent_interpd\n+    @_docstring.interpd\n     def legend(self, *args, **kwargs):\n         \"\"\"\n         Place a legend on the figure.\n@@ -1312,236 +1312,6 @@ default: %(va)s\n         cax.figure.stale = True\n         return cb\n \n-    def subplots_adjust(self, left=None, bottom=None, right=None, top=None,\n-                        wspace=None, hspace=None):\n-        \"\"\"\n-        Adjust the subplot layout parameters.\n-\n-        Unset parameters are left unmodified; initial values are given by\n-        :rc:`figure.subplot.[name]`.\n-\n-        Parameters\n-        ----------\n-        left : float, optional\n-            The position of the left edge of the subplots,\n-            as a fraction of the figure width.\n-        right : float, optional\n-            The position of the right edge of the subplots,\n-            as a fraction of the figure width.\n-        bottom : float, optional\n-            The position of the bottom edge of the subplots,\n-            as a fraction of the figure height.\n-        top : float, optional\n-            The position of the top edge of the subplots,\n-            as a fraction of the figure height.\n-        wspace : float, optional\n-            The width of the padding between subplots,\n-            as a fraction of the average Axes width.\n-        hspace : float, optional\n-            The height of the padding between subplots,\n-            as a fraction of the average Axes height.\n-        \"\"\"\n-        if (self.get_layout_engine() is not None and\n-                not self.get_layout_engine().adjust_compatible):\n-            _api.warn_external(\n-                \"This figure was using a layout engine that is \"\n-                \"incompatible with subplots_adjust and/or tight_layout; \"\n-                \"not calling subplots_adjust.\")\n-            return\n-        self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n-        for ax in self.axes:\n-            if ax.get_subplotspec() is not None:\n-                ax._set_position(ax.get_subplotspec().get_position(self))\n-        self.stale = True\n-\n-    def align_xlabels(self, axs=None):\n-        \"\"\"\n-        Align the xlabels of subplots in the same subplot column if label\n-        alignment is being done automatically (i.e. the label position is\n-        not manually set).\n-\n-        Alignment persists for draw events after this is called.\n-\n-        If a label is on the bottom, it is aligned with labels on Axes that\n-        also have their label on the bottom and that have the same\n-        bottom-most subplot row.  If the label is on the top,\n-        it is aligned with labels on Axes with the same top-most row.\n-\n-        Parameters\n-        ----------\n-        axs : list of `~matplotlib.axes.Axes`\n-            Optional list of (or `~numpy.ndarray`) `~matplotlib.axes.Axes`\n-            to align the xlabels.\n-            Default is to align all Axes on the figure.\n-\n-        See Also\n-        --------\n-        matplotlib.figure.Figure.align_ylabels\n-        matplotlib.figure.Figure.align_labels\n-\n-        Notes\n-        -----\n-        This assumes that ``axs`` are from the same `.GridSpec`, so that\n-        their `.SubplotSpec` positions correspond to figure positions.\n-\n-        Examples\n-        --------\n-        Example with rotated xtick labels::\n-\n-            fig, axs = plt.subplots(1, 2)\n-            for tick in axs[0].get_xticklabels():\n-                tick.set_rotation(55)\n-            axs[0].set_xlabel('XLabel 0')\n-            axs[1].set_xlabel('XLabel 1')\n-            fig.align_xlabels()\n-        \"\"\"\n-        if axs is None:\n-            axs = self.axes\n-        axs = [ax for ax in np.ravel(axs) if ax.get_subplotspec() is not None]\n-        for ax in axs:\n-            _log.debug(' Working on: %s', ax.get_xlabel())\n-            rowspan = ax.get_subplotspec().rowspan\n-            pos = ax.xaxis.get_label_position()  # top or bottom\n-            # Search through other axes for label positions that are same as\n-            # this one and that share the appropriate row number.\n-            # Add to a grouper associated with each axes of siblings.\n-            # This list is inspected in `axis.draw` by\n-            # `axis._update_label_position`.\n-            for axc in axs:\n-                if axc.xaxis.get_label_position() == pos:\n-                    rowspanc = axc.get_subplotspec().rowspan\n-                    if (pos == 'top' and rowspan.start == rowspanc.start or\n-                            pos == 'bottom' and rowspan.stop == rowspanc.stop):\n-                        # grouper for groups of xlabels to align\n-                        self._align_label_groups['x'].join(ax, axc)\n-\n-    def align_ylabels(self, axs=None):\n-        \"\"\"\n-        Align the ylabels of subplots in the same subplot column if label\n-        alignment is being done automatically (i.e. the label position is\n-        not manually set).\n-\n-        Alignment persists for draw events after this is called.\n-\n-        If a label is on the left, it is aligned with labels on Axes that\n-        also have their label on the left and that have the same\n-        left-most subplot column.  If the label is on the right,\n-        it is aligned with labels on Axes with the same right-most column.\n-\n-        Parameters\n-        ----------\n-        axs : list of `~matplotlib.axes.Axes`\n-            Optional list (or `~numpy.ndarray`) of `~matplotlib.axes.Axes`\n-            to align the ylabels.\n-            Default is to align all Axes on the figure.\n-\n-        See Also\n-        --------\n-        matplotlib.figure.Figure.align_xlabels\n-        matplotlib.figure.Figure.align_labels\n-\n-        Notes\n-        -----\n-        This assumes that ``axs`` are from the same `.GridSpec`, so that\n-        their `.SubplotSpec` positions correspond to figure positions.\n-\n-        Examples\n-        --------\n-        Example with large yticks labels::\n-\n-            fig, axs = plt.subplots(2, 1)\n-            axs[0].plot(np.arange(0, 1000, 50))\n-            axs[0].set_ylabel('YLabel 0')\n-            axs[1].set_ylabel('YLabel 1')\n-            fig.align_ylabels()\n-        \"\"\"\n-        if axs is None:\n-            axs = self.axes\n-        axs = [ax for ax in np.ravel(axs) if ax.get_subplotspec() is not None]\n-        for ax in axs:\n-            _log.debug(' Working on: %s', ax.get_ylabel())\n-            colspan = ax.get_subplotspec().colspan\n-            pos = ax.yaxis.get_label_position()  # left or right\n-            # Search through other axes for label positions that are same as\n-            # this one and that share the appropriate column number.\n-            # Add to a list associated with each axes of siblings.\n-            # This list is inspected in `axis.draw` by\n-            # `axis._update_label_position`.\n-            for axc in axs:\n-                if axc.yaxis.get_label_position() == pos:\n-                    colspanc = axc.get_subplotspec().colspan\n-                    if (pos == 'left' and colspan.start == colspanc.start or\n-                            pos == 'right' and colspan.stop == colspanc.stop):\n-                        # grouper for groups of ylabels to align\n-                        self._align_label_groups['y'].join(ax, axc)\n-\n-    def align_labels(self, axs=None):\n-        \"\"\"\n-        Align the xlabels and ylabels of subplots with the same subplots\n-        row or column (respectively) if label alignment is being\n-        done automatically (i.e. the label position is not manually set).\n-\n-        Alignment persists for draw events after this is called.\n-\n-        Parameters\n-        ----------\n-        axs : list of `~matplotlib.axes.Axes`\n-            Optional list (or `~numpy.ndarray`) of `~matplotlib.axes.Axes`\n-            to align the labels.\n-            Default is to align all Axes on the figure.\n-\n-        See Also\n-        --------\n-        matplotlib.figure.Figure.align_xlabels\n-\n-        matplotlib.figure.Figure.align_ylabels\n-        \"\"\"\n-        self.align_xlabels(axs=axs)\n-        self.align_ylabels(axs=axs)\n-\n-    def add_gridspec(self, nrows=1, ncols=1, **kwargs):\n-        \"\"\"\n-        Return a `.GridSpec` that has this figure as a parent.  This allows\n-        complex layout of Axes in the figure.\n-\n-        Parameters\n-        ----------\n-        nrows : int, default: 1\n-            Number of rows in grid.\n-\n-        ncols : int, default: 1\n-            Number of columns in grid.\n-\n-        Returns\n-        -------\n-        `.GridSpec`\n-\n-        Other Parameters\n-        ----------------\n-        **kwargs\n-            Keyword arguments are passed to `.GridSpec`.\n-\n-        See Also\n-        --------\n-        matplotlib.pyplot.subplots\n-\n-        Examples\n-        --------\n-        Adding a subplot that spans two rows::\n-\n-            fig = plt.figure()\n-            gs = fig.add_gridspec(2, 2)\n-            ax1 = fig.add_subplot(gs[0, 0])\n-            ax2 = fig.add_subplot(gs[1, 0])\n-            # spans two rows:\n-            ax3 = fig.add_subplot(gs[:, 1])\n-\n-        \"\"\"\n-\n-        _ = kwargs.pop('figure', None)  # pop in case user has added this...\n-        gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, **kwargs)\n-        return gs\n-\n     def subfigures(self, nrows=1, ncols=1, squeeze=True,\n                    wspace=None, hspace=None,\n                    width_ratios=None, height_ratios=None,\n@@ -1574,13 +1344,30 @@ default: %(va)s\n         width_ratios : array-like of length *ncols*, optional\n             Defines the relative widths of the columns. Each column gets a\n             relative width of ``width_ratios[i] / sum(width_ratios)``.\n-            If not given, all columns will have the same width.\n+            If not given, all columns will have the same width.  Equivalent\n+            to ``gridspec_kw={'width_ratios': [...]}``. In the case of nested\n+            layouts, this argument applies only to the outer layout.\n \n         height_ratios : array-like of length *nrows*, optional\n             Defines the relative heights of the rows. Each row gets a\n             relative height of ``height_ratios[i] / sum(height_ratios)``.\n-            If not given, all rows will have the same height.\n+            If not given, all rows will have the same height. Equivalent\n+            to ``gridspec_kw={'height_ratios': [...]}``. In the case of nested\n+            layouts, this argument applies only to the outer layout.\n         \"\"\"\n+        gridspec_kw = dict(gridspec_kw or {})\n+        if height_ratios is not None:\n+            if 'height_ratios' in gridspec_kw:\n+                raise ValueError(\"'height_ratios' must not be defined both as \"\n+                                 \"parameter and as key in 'gridspec_kw'\")\n+            gridspec_kw['height_ratios'] = height_ratios\n+        if width_ratios is not None:\n+            if 'width_ratios' in gridspec_kw:\n+                raise ValueError(\"'width_ratios' must not be defined both as \"\n+                                 \"parameter and as key in 'gridspec_kw'\")\n+            gridspec_kw['width_ratios'] = width_ratios\n+\n+        # create a GridSpec instance\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self,\n                       wspace=wspace, hspace=hspace,\n                       width_ratios=width_ratios,\n@@ -1738,7 +1525,7 @@ default: %(va)s\n             Renderer that will be used to draw the figures (i.e.\n             ``fig.canvas.get_renderer()``)\n \n-        bbox_extra_artists : list of `.Artist` or ``None``\n+        bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional\n             List of artists to include in the tight bounding box.  If\n             ``None`` (default), then all artist children of each Axes are\n             included in the tight bounding box.\n@@ -2572,165 +2359,6 @@ None}, default: None\n         if not self.canvas.widgetlock.locked():\n             super().pick(mouseevent)\n \n-    def _check_layout_engines_compat(self, old, new):\n-        \"\"\"\n-        Helper for set_layout engine\n-\n-        If the figure has used the old engine and added a colorbar then the\n-        value of colorbar_gridspec must be the same on the new engine.\n-        \"\"\"\n-        if old is None or new is None:\n-            return True\n-        if old.colorbar_gridspec == new.colorbar_gridspec:\n-            return True\n-        # colorbar layout different, so check if any colorbars are on the\n-        # figure...\n-        for ax in self.axes:\n-            if hasattr(ax, '_colorbar'):\n-                # colorbars list themselves as a colorbar.\n-                return False\n-        return True\n-\n-    def set_layout_engine(self, layout=None, **kwargs):\n-        \"\"\"\n-        Set the layout engine for this figure.\n-\n-        Parameters\n-        ----------\n-        layout: {'constrained', 'compressed', 'tight', 'none'} or \\\n-`LayoutEngine` or None\n-\n-            - 'constrained' will use `~.ConstrainedLayoutEngine`\n-            - 'compressed' will also use `~.ConstrainedLayoutEngine`, but with\n-              a correction that attempts to make a good layout for fixed-aspect\n-              ratio Axes.\n-            - 'tight' uses `~.TightLayoutEngine`\n-            - 'none' removes layout engine.\n-\n-            If `None`, the behavior is controlled by :rc:`figure.autolayout`\n-            (which if `True` behaves as if 'tight' was passed) and\n-            :rc:`figure.constrained_layout.use` (which if `True` behaves as if\n-            'constrained' was passed).  If both are `True`,\n-            :rc:`figure.autolayout` takes priority.\n-\n-            Users and libraries can define their own layout engines and pass\n-            the instance directly as well.\n-\n-        kwargs: dict\n-            The keyword arguments are passed to the layout engine to set things\n-            like padding and margin sizes.  Only used if *layout* is a string.\n-\n-        \"\"\"\n-        if layout is None:\n-            if mpl.rcParams['figure.autolayout']:\n-                layout = 'tight'\n-            elif mpl.rcParams['figure.constrained_layout.use']:\n-                layout = 'constrained'\n-            else:\n-                self._layout_engine = None\n-                return\n-        if layout == 'tight':\n-            new_layout_engine = TightLayoutEngine(**kwargs)\n-        elif layout == 'constrained':\n-            new_layout_engine = ConstrainedLayoutEngine(**kwargs)\n-        elif layout == 'compressed':\n-            new_layout_engine = ConstrainedLayoutEngine(compress=True,\n-                                                        **kwargs)\n-        elif layout == 'none':\n-            if self._layout_engine is not None:\n-                new_layout_engine = PlaceHolderLayoutEngine(\n-                    self._layout_engine.adjust_compatible,\n-                    self._layout_engine.colorbar_gridspec\n-                )\n-            else:\n-                new_layout_engine = None\n-        elif isinstance(layout, LayoutEngine):\n-            new_layout_engine = layout\n-        else:\n-            raise ValueError(f\"Invalid value for 'layout': {layout!r}\")\n-\n-        if self._check_layout_engines_compat(self._layout_engine,\n-                                             new_layout_engine):\n-            self._layout_engine = new_layout_engine\n-        else:\n-            raise RuntimeError('Colorbar layout of new layout engine not '\n-                               'compatible with old engine, and a colorbar '\n-                               'has been created.  Engine not changed.')\n-\n-    def get_layout_engine(self):\n-        return self._layout_engine\n-\n-    # TODO: I'd like to dynamically add the _repr_html_ method\n-    # to the figure in the right context, but then IPython doesn't\n-    # use it, for some reason.\n-\n-    def _repr_html_(self):\n-        # We can't use \"isinstance\" here, because then we'd end up importing\n-        # webagg unconditionally.\n-        if 'WebAgg' in type(self.canvas).__name__:\n-            from matplotlib.backends import backend_webagg\n-            return backend_webagg.ipython_inline_display(self)\n-\n-    def show(self, warn=True):\n-        \"\"\"\n-        If using a GUI backend with pyplot, display the figure window.\n-\n-        If the figure was not created using `~.pyplot.figure`, it will lack\n-        a `~.backend_bases.FigureManagerBase`, and this method will raise an\n-        AttributeError.\n-\n-        .. warning::\n-\n-            This does not manage an GUI event loop. Consequently, the figure\n-            may only be shown briefly or not shown at all if you or your\n-            environment are not managing an event loop.\n-\n-            Use cases for `.Figure.show` include running this from a GUI\n-            application (where there is persistently an event loop running) or\n-            from a shell, like IPython, that install an input hook to allow the\n-            interactive shell to accept input while the figure is also being\n-            shown and interactive.  Some, but not all, GUI toolkits will\n-            register an input hook on import.  See :ref:`cp_integration` for\n-            more details.\n-\n-            If you're in a shell without input hook integration or executing a\n-            python script, you should use `matplotlib.pyplot.show` with\n-            ``block=True`` instead, which takes care of starting and running\n-            the event loop for you.\n-\n-        Parameters\n-        ----------\n-        warn : bool, default: True\n-            If ``True`` and we are not running headless (i.e. on Linux with an\n-            unset DISPLAY), issue warning when called on a non-GUI backend.\n-\n-        \"\"\"\n-        if self.canvas.manager is None:\n-            raise AttributeError(\n-                \"Figure.show works only for figures managed by pyplot, \"\n-                \"normally created by pyplot.figure()\")\n-        try:\n-            self.canvas.manager.show()\n-        except NonGuiException as exc:\n-            if warn:\n-                _api.warn_external(str(exc))\n-\n-    @property\n-    def axes(self):\n-        \"\"\"\n-        List of Axes in the Figure. You can access and modify the Axes in the\n-        Figure through this list.\n-\n-        Do not modify the list itself. Instead, use `~Figure.add_axes`,\n-        `~.Figure.add_subplot` or `~.Figure.delaxes` to add or remove an Axes.\n-\n-        Note: The `.Figure.axes` property and `~.Figure.get_axes` method are\n-        equivalent.\n-        \"\"\"\n-        return self._axstack.as_list()\n-\n-    get_axes = axes.fget\n-\n     def _get_renderer(self):\n         if hasattr(self.canvas, 'get_renderer'):\n             return self.canvas.get_renderer()\n@@ -3386,7 +3014,7 @@ None}, default: None\n                mouse_pop=MouseButton.RIGHT,\n                mouse_stop=MouseButton.MIDDLE):\n         \"\"\"\n-        Blocking call to interact with a figure.\n+        Blocking call to interact with the figure.\n \n         Wait until the user clicks *n* times on the figure, and return the\n         coordinates of each click in a list.\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "lib/matplotlib/figure.py"
  ],
  "repo": "matplotlib/matplotlib",
  "base_commit": "1d0d255b79e84dfc9f2123c5eb85a842d342f72b",
  "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1564,8 +1564,9 @@ def subfigures(self, nrows=1, ncols=1, squeeze=True,\n         wspace, hspace : float, default: None\n             The amount of width/height reserved for space between subfigures,\n             expressed as a fraction of the average subfigure width/height.\n-            If not given, the values will be inferred from a figure or\n-            rcParams when necessary.\n+            If not given, the values will be inferred from rcParams if using\n+            constrained layout (see `~.ConstrainedLayoutEngine`), or zero if\n+            not using a layout engine.\n \n         width_ratios : array-like of length *ncols*, optional\n             Defines the relative widths of the columns. Each column gets a\n@@ -1580,13 +1581,24 @@ def subfigures(self, nrows=1, ncols=1, squeeze=True,\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self,\n                       wspace=wspace, hspace=hspace,\n                       width_ratios=width_ratios,\n-                      height_ratios=height_ratios)\n+                      height_ratios=height_ratios,\n+                      left=0, right=1, bottom=0, top=1)\n \n         sfarr = np.empty((nrows, ncols), dtype=object)\n         for i in range(ncols):\n             for j in range(nrows):\n                 sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n \n+        if self.get_layout_engine() is None and (wspace is not None or\n+                                                 hspace is not None):\n+            # Gridspec wspace and hspace is ignored on subfigure instantiation,\n+            # and no space is left.  So need to account for it here if required.\n+            bottoms, tops, lefts, rights = gs.get_grid_positions(self)\n+            for sfrow, bottom, top in zip(sfarr, bottoms, tops):\n+                for sf, left, right in zip(sfrow, lefts, rights):\n+                    bbox = Bbox.from_extents(left, bottom, right, top)\n+                    sf._redo_transform_rel_fig(bbox=bbox)\n+\n         if squeeze:\n             # Discarding unneeded dimensions that equal 1.  If we only have one\n             # subfigure, just return it instead of a 1-element array.\n",
  "test_patch": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1449,6 +1449,31 @@ def test_subfigure_pdf():\n     fig.savefig(buffer, format='pdf')\n \n \n+def test_subfigures_wspace_hspace():\n+    sub_figs = plt.figure().subfigures(2, 3, hspace=0.5, wspace=1/6.)\n+\n+    w = 640\n+    h = 480\n+\n+    np.testing.assert_allclose(sub_figs[0, 0].bbox.min, [0., h * 0.6])\n+    np.testing.assert_allclose(sub_figs[0, 0].bbox.max, [w * 0.3, h])\n+\n+    np.testing.assert_allclose(sub_figs[0, 1].bbox.min, [w * 0.35, h * 0.6])\n+    np.testing.assert_allclose(sub_figs[0, 1].bbox.max, [w * 0.65, h])\n+\n+    np.testing.assert_allclose(sub_figs[0, 2].bbox.min, [w * 0.7, h * 0.6])\n+    np.testing.assert_allclose(sub_figs[0, 2].bbox.max, [w, h])\n+\n+    np.testing.assert_allclose(sub_figs[1, 0].bbox.min, [0, 0])\n+    np.testing.assert_allclose(sub_figs[1, 0].bbox.max, [w * 0.3, h * 0.4])\n+\n+    np.testing.assert_allclose(sub_figs[1, 1].bbox.min, [w * 0.35, 0])\n+    np.testing.assert_allclose(sub_figs[1, 1].bbox.max, [w * 0.65, h * 0.4])\n+\n+    np.testing.assert_allclose(sub_figs[1, 2].bbox.min, [w * 0.7, 0])\n+    np.testing.assert_allclose(sub_figs[1, 2].bbox.max, [w, h * 0.4])\n+\n+\n def test_add_subplot_kwargs():\n     # fig.add_subplot() always creates new axes, even if axes kwargs differ.\n     fig = plt.figure()\n",
  "problem_statement": "[Bug]: wspace and hspace in subfigures not working\n### Bug summary\n\n`wspace` and `hspace` in `Figure.subfigures` do nothing.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nfigs = plt.figure().subfigures(2, 2, wspace=0, hspace=0)\r\nfor fig in figs.flat:\r\n    fig.subplots().plot([1, 2])\r\nplt.show()\n```\n\n\n### Actual outcome\n\nSame figure independently of the values of hspace and wspace.\n\n### Expected outcome\n\nhttps://github.com/matplotlib/matplotlib/blob/b3bd929cf07ea35479fded8f739126ccc39edd6d/lib/matplotlib/figure.py#L1550-L1554\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nOS/X\n\n### Matplotlib Version\n\n3.7.1\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\nPython 3.10.9\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nconda\n",
  "hints_text": "Thanks for the report @maurosilber.  The problem is clearer if we set a facecolor for each subfigure:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nfor space in [0, 0.2]:\r\n    figs = plt.figure().subfigures(2, 2, hspace=space, wspace=space)\r\n    for fig, color in zip(figs.flat, 'cmyw'):\r\n        fig.set_facecolor(color)\r\n        fig.subplots().plot([1, 2])\r\nplt.show()\r\n```\r\n\r\nWith `main`, both figures look like\r\n![test](https://user-images.githubusercontent.com/10599679/226331428-3969469e-fee7-4b1d-95da-8d46ab2b31ee.png)\r\n\nJust to add something, it looks like it works when using 'constrained' layout.\nThe relevant code is https://github.com/matplotlib/matplotlib/blob/0b4e615d72eb9f131feb877a8e3bf270f399fe77/lib/matplotlib/figure.py#L2237\r\nThis didn't break - it never worked.  I imagine the position logic could be borrowed from Axes....  \nI am a first time contributer, and would like to attempt to work on this if possible! Will get a PR in the coming days\nI have been trying to understand the code associated with this and have run into some issues.\r\nIn the function _redo_transform_rel_fig (linked above), I feel that I would have to be able to access all of the subfigures within this figure in order to give the correct amount of space based on the average subfigure width/height. Would this be possible? \r\nI have been looking to this function as inspiration for the logic, but I am still trying to understand all the parameters as well:\r\nhttps://github.com/matplotlib/matplotlib/blob/0b4e615d72eb9f131feb877a8e3bf270f399fe77/lib/matplotlib/gridspec.py#L145\r\n\nThere is a `fig.subfigs` attribute which is a list of the `SubFigures` in a `Figure`.\nApologies for the slow progress, had a busier week than expected.\r\nBelow is the code I am running to test.\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\nfigs = plt.figure().subfigures(2, 2, hspace=0.2, wspace=0.2)\r\nfor fig, color in zip(figs.flat, 'cmyw'):\r\n    fig.set_facecolor(color)\r\n    fig.subplots().plot([1, 2])\r\n# plt.show()\r\n\r\nfigs = plt.figure(constrained_layout=True).subfigures(2, 2, hspace=0.2, wspace=0.2)\r\nfor fig, color in zip(figs.flat, 'cmyw'):\r\n    fig.set_facecolor(color)\r\n    fig.subplots().plot([1, 2])\r\nplt.show()\r\n```\r\n\r\nThis creates two figures, one with constrained layout and one without. Below is my current output.\r\nOn the right is the constrained layout figure, and the left is the one without.\r\n<img width=\"1278\" alt=\"Screenshot 2023-04-04 at 6 20 33 PM\" src=\"https://user-images.githubusercontent.com/90582921/229935570-8ec26074-421c-4b78-a746-ce711ff6bea9.png\">\r\n\r\nMy code currently fits the facecolors in the background to the correct spots, however the actual graphs do not match. They seem to need resizing to the right and upwards in order to match the constrained layout. Would a non-constrained layout figure be expected to resize those graphs to fit the background? I would assume so but I wanted to check since I couldn't find the answer in the documentation I looked at.\n> My code currently fits the facecolors in the background to the correct spots, however the actual graphs do not match. They seem to need resizing to the right and upwards in order to match the constrained layout. Would a non-constrained layout figure be expected to resize those graphs to fit the background? I would assume so but I wanted to check since I couldn't find the answer in the documentation I looked at.\r\n\r\nI'm not quite sure what you are asking here?  Constrained layout adjusts the axes sizes to fit in the figure.  If you don't do constrained layout the axes labels can definitely spill out of the figure if you just use default axes positioning.  \r\n\nI've been digging into this.  We have a test that adds a subplot and a subfigure using the same gridspec, and the subfigure is expected to ignore the wspace on the gridspec.\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/ffd3b12969e4ab630e678617c68492bc238924fa/lib/matplotlib/tests/test_figure.py#L1425-L1439\r\n\r\n <img src=\"https://github.com/matplotlib/matplotlib/blob/main/lib/matplotlib/tests/baseline_images/test_figure/test_subfigure_scatter_size.png?raw=true\"> \r\n\r\nThe use-case envisioned in the test seems entirely reasonable to me, but I'm struggling to see how we can support that while also fixing this issue.\nWhy do you say the subfigure is expected to ignore the wspace?  I don't see that wspace is set in the test. \nSince no _wspace_ is passed, I assume the gridspec will have the default from rcParams, which is 0.2.\nSure, but I don't understand what wouldn't work in that example with `wspace` argument. Do you just mean that the default would be too large for this case? \nYes, I think in the test example, if both subfigure and subplot were respecting the 0.2 wspace then the left-hand subplots would be narrower and we\u2019d have more whitespace in the middle.  Currently in this example the total width of the two lefthand subplots looks about the same as the width of the righthand one, so overall the figure seems well-balanced.\r\n\r\nAnother test here explicitly doesn\u2019t expect any whitespace between subfigures, though in this case there are no subplots so you could just pass `wspace=0, hspace=0` to the gridspec and retain this result.\r\nhttps://github.com/matplotlib/matplotlib/blob/8293774ba930fb039d91c3b3d4dd68c49ff997ba/lib/matplotlib/tests/test_figure.py#L1368-L1388\r\n\r\n\nCan we just make the default wspace for subfigures be zero?\n`wspace` is a property of the gridspec.  Do you mean we should have a separate property for subfigures, e.g. `GridSpec.subfig_wspace`, with its own default?\n`gridspec` is still public API, but barely, as there are usually more elegant ways to do the same things that folks used to use gridspecs for.  \r\n\r\nIn this case, as you point out, it is better if subplots and subfigures get different wspace values, even if they are the same grid spec level.  I'm suggesting that subfigures ignores the grid spec wspace (as it currently does) and if we want a wspace for a set of subfigures that be a kwarg of the subfigure call.  \r\n\r\nHowever, I never use wspace nor hspace, and given that all these things work so much better with constrained layout, I'm not sure what the goal of manually tweaking the spacing is.  ",
  "created_at": "2023-05-23T21:58:53Z",
  "version": "3.7",
  "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_subfigures_wspace_hspace\"]",
  "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_all_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x2-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x3-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x0-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x1-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x2-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x3-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x4-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x5-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_extra_per_subplot_kw\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[AAA\\\\nc\\\\nBBB-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x0-(?m)we\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x1-There\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x3-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail_list_of_str\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_hashable_keys[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_height_ratios\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_tuple[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_user_order\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_width_ratios\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw[BC-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw[multi_value1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_per_subplot_kw_expander\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_share_all\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[AAA\\\\nBBB-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[ABC\\\\nDEF-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[\\\\nAAA\\\\nBBB\\\\n-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_string_parser\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[abc]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[acb]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bac]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bca]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cab]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cba]\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[png]\", \"lib/matplotlib/tests/test_figure.py::test_add_axes_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_invalid\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_subclass\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_twotuple\", \"lib/matplotlib/tests/test_figure.py::test_align_labels[png]\", \"lib/matplotlib/tests/test_figure.py::test_align_labels_stray_axes\", \"lib/matplotlib/tests/test_figure.py::test_alpha[png]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[eps]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[png]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[both]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[major]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[minor]\", \"lib/matplotlib/tests/test_figure.py::test_axes_removal\", \"lib/matplotlib/tests/test_figure.py::test_axes_remove\", \"lib/matplotlib/tests/test_figure.py::test_change_dpi\", \"lib/matplotlib/tests/test_figure.py::test_clf_keyword\", \"lib/matplotlib/tests/test_figure.py::test_clf_not_redefined\", \"lib/matplotlib/tests/test_figure.py::test_deepcopy\", \"lib/matplotlib/tests/test_figure.py::test_figaspect\", \"lib/matplotlib/tests/test_figure.py::test_fignum_exists\", \"lib/matplotlib/tests/test_figure.py::test_figure[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_figure[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clear]\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clf]\", \"lib/matplotlib/tests/test_figure.py::test_figure_label\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure_repr\", \"lib/matplotlib/tests/test_figure.py::test_fspath[eps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[png]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[ps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[svg]\", \"lib/matplotlib/tests/test_figure.py::test_gca\", \"lib/matplotlib/tests/test_figure.py::test_get_constrained_layout_pads\", \"lib/matplotlib/tests/test_figure.py::test_get_suptitle_supxlabel_supylabel\", \"lib/matplotlib/tests/test_figure.py::test_ginput\", \"lib/matplotlib/tests/test_figure.py::test_gridspec_no_mutate_input\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_add_axes\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[-1-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[1-nan]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[inf-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_iterability_axes_argument\", \"lib/matplotlib/tests/test_figure.py::test_kwargs_pass\", \"lib/matplotlib/tests/test_figure.py::test_layout_change_warning[compressed]\", \"lib/matplotlib/tests/test_figure.py::test_layout_change_warning[constrained]\", \"lib/matplotlib/tests/test_figure.py::test_picking_does_not_stale\", \"lib/matplotlib/tests/test_figure.py::test_rcparams[png]\", \"lib/matplotlib/tests/test_figure.py::test_removed_axis\", \"lib/matplotlib/tests/test_figure.py::test_reused_gridspec\", \"lib/matplotlib/tests/test_figure.py::test_savefig\", \"lib/matplotlib/tests/test_figure.py::test_savefig_backend\", \"lib/matplotlib/tests/test_figure.py::test_savefig_locate_colorbar\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[eps]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[png]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[ps]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[svg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata[svgz]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[jpeg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[jpg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[raw]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[rgba]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[tif]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[tiff]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_metadata_error[webp]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Agg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Cairo]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_preserve_layout_engine\", \"lib/matplotlib/tests/test_figure.py::test_savefig_transparent[png]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_warns\", \"lib/matplotlib/tests/test_figure.py::test_set_fig_size\", \"lib/matplotlib/tests/test_figure.py::test_subfigure[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_double[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_dpi\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_pdf\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_scatter_size[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_spanning\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ss[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ticks\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_subplots_shareax_loglabels\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[png]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_fontproperties\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_subfigures\", \"lib/matplotlib/tests/test_figure.py::test_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_tightlayout_autolayout_deconflict[png]\", \"lib/matplotlib/tests/test_figure.py::test_too_many_figures\", \"lib/matplotlib/tests/test_figure.py::test_unpickle_with_device_pixel_ratio\", \"lib/matplotlib/tests/test_figure.py::test_valid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_waitforbuttonpress\"]",
  "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f",
  "patch_files": [
    "lib/matplotlib/figure.py"
  ],
  "test_patch_files": [
    "lib/matplotlib/tests/test_figure.py"
  ],
  "patch_diff_details": {
    "lib/matplotlib/figure.py": {
      "diffs": [
        {
          "start_line_old": 1567,
          "end_line_old": 1568,
          "file_pos": 4,
          "file_context_length": 39796,
          "closest_snippet_id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.subplots.gridspec_kw_FigureBase.subplots.7.1",
          "closest_snippet_line_distance": 636,
          "pos": 19,
          "context_length": 10939
        },
        {
          "start_line_old": 1583,
          "end_line_old": 1583,
          "file_pos": 4,
          "file_context_length": 39796,
          "closest_snippet_id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.subplots.gridspec_kw_FigureBase.subplots.7.1",
          "closest_snippet_line_distance": 651,
          "pos": 19,
          "context_length": 10939
        }
      ]
    }
  },
  "vectors": 3859,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/subfigures.py_37_",
      "distance": 0.8707253932952881,
      "file_path": "galleries/examples/subplots_axes_and_figures/subfigures.py",
      "start_line": 84,
      "end_line": 149,
      "tokens": 667,
      "context_length": 667
    },
    {
      "position": 2,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/subfigures.py_1_36",
      "distance": 0.9071999192237854,
      "file_path": "galleries/examples/subplots_axes_and_figures/subfigures.py",
      "start_line": 1,
      "end_line": 83,
      "tokens": 759,
      "context_length": 1426
    },
    {
      "position": 3,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/constrainedlayout_guide.py_92_152",
      "distance": 0.9216396808624268,
      "file_path": "galleries/users_explain/axes/constrainedlayout_guide.py",
      "start_line": 184,
      "end_line": 268,
      "tokens": 863,
      "context_length": 2289
    },
    {
      "position": 4,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/constrainedlayout_guide.py_153_210",
      "distance": 0.9416918158531189,
      "file_path": "galleries/users_explain/axes/constrainedlayout_guide.py",
      "start_line": 270,
      "end_line": 351,
      "tokens": 845,
      "context_length": 3134
    },
    {
      "position": 5,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/subplots_demo.py_gs_128_",
      "distance": 0.9644010066986084,
      "file_path": "galleries/examples/subplots_axes_and_figures/subplots_demo.py",
      "start_line": 171,
      "end_line": 212,
      "tokens": 444,
      "context_length": 3578
    },
    {
      "position": 6,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_SubFigure.get_constrained_layout_SubFigure.get_constrained_layout_pads.2.1",
      "distance": 0.9771388173103333,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 2289,
      "end_line": 2311,
      "tokens": 162,
      "context_length": 3740,
      "file_pos": 4
    },
    {
      "position": 7,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/constrainedlayout_guide.py_sfigs_fig_333.1",
      "distance": 0.9775584936141968,
      "file_path": "galleries/users_explain/axes/constrainedlayout_guide.py",
      "start_line": 442,
      "end_line": 527,
      "tokens": 795,
      "context_length": 4535
    },
    {
      "position": 8,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/subplots_demo.py_64_fig_127.1",
      "distance": 0.978046178817749,
      "file_path": "galleries/examples/subplots_axes_and_figures/subplots_demo.py",
      "start_line": 87,
      "end_line": 170,
      "tokens": 791,
      "context_length": 5326
    },
    {
      "position": 9,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_SubFigure.get_axes_SubFigure.draw.3.3.6.self.stale.1",
      "distance": 0.9853090047836304,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 2331,
      "end_line": 2352,
      "tokens": 149,
      "context_length": 5475,
      "file_pos": 4
    },
    {
      "position": 10,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/arranging_axes.py_gs_",
      "distance": 0.987342357635498,
      "file_path": "galleries/users_explain/axes/arranging_axes.py",
      "start_line": 342,
      "end_line": 437,
      "tokens": 927,
      "context_length": 6402
    },
    {
      "position": 11,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/ganged_plots.py_1_",
      "distance": 0.9885076284408569,
      "file_path": "galleries/examples/subplots_axes_and_figures/ganged_plots.py",
      "start_line": 1,
      "end_line": 41,
      "tokens": 345,
      "context_length": 6747
    },
    {
      "position": 12,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.subplots.gridspec_kw_FigureBase.subplots.7.1",
      "distance": 0.9901707172393799,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 917,
      "end_line": 932,
      "tokens": 245,
      "context_length": 6992,
      "file_pos": 6
    },
    {
      "position": 13,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/auto_subplots_adjust.py_8_",
      "distance": 0.9980881810188293,
      "file_path": "galleries/examples/subplots_axes_and_figures/auto_subplots_adjust.py",
      "start_line": 69,
      "end_line": 88,
      "tokens": 140,
      "context_length": 7132
    },
    {
      "position": 14,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/figure_size_units.py_1_",
      "distance": 1.0001170635223389,
      "file_path": "galleries/examples/subplots_axes_and_figures/figure_size_units.py",
      "start_line": 1,
      "end_line": 83,
      "tokens": 629,
      "context_length": 7761
    },
    {
      "position": 15,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/arranging_axes.py_65_inner.1",
      "distance": 1.0030813217163086,
      "file_path": "galleries/users_explain/axes/arranging_axes.py",
      "start_line": 186,
      "end_line": 260,
      "tokens": 795,
      "context_length": 8556
    },
    {
      "position": 16,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/demo_tight_layout.py_1_bottom.1",
      "distance": 1.0182125568389893,
      "file_path": "galleries/examples/subplots_axes_and_figures/demo_tight_layout.py",
      "start_line": 1,
      "end_line": 116,
      "tokens": 762,
      "context_length": 9318
    },
    {
      "position": 17,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/arranging_axes.py_np_64",
      "distance": 1.0294091701507568,
      "file_path": "galleries/users_explain/axes/arranging_axes.py",
      "start_line": 101,
      "end_line": 185,
      "tokens": 854,
      "context_length": 10172
    },
    {
      "position": 18,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/subplots_adjust.py_1_",
      "distance": 1.0295164585113525,
      "file_path": "galleries/examples/subplots_axes_and_figures/subplots_adjust.py",
      "start_line": 1,
      "end_line": 32,
      "tokens": 207,
      "context_length": 10379
    },
    {
      "position": 19,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.subfigures_FigureBase.subfigures.5.4.2.1",
      "distance": 1.0303289890289307,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 1545,
      "end_line": 1600,
      "tokens": 560,
      "context_length": 10939,
      "file_pos": 10
    },
    {
      "position": 20,
      "id": "/tmp/repos/matplotlib/galleries/examples/lines_bars_and_markers/scatter_hist.py_10_",
      "distance": 1.030617117881775,
      "file_path": "galleries/examples/lines_bars_and_markers/scatter_hist.py",
      "start_line": 57,
      "end_line": 123,
      "tokens": 695,
      "context_length": 11634
    },
    {
      "position": 21,
      "id": "/tmp/repos/matplotlib/galleries/examples/mplot3d/subplot3d.py_1_",
      "distance": 1.033611536026001,
      "file_path": "galleries/examples/mplot3d/subplot3d.py",
      "start_line": 1,
      "end_line": 46,
      "tokens": 367,
      "context_length": 12001
    },
    {
      "position": 22,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/tight_layout_guide.py_1_57",
      "distance": 1.0349299907684326,
      "file_path": "galleries/users_explain/axes/tight_layout_guide.py",
      "start_line": 1,
      "end_line": 108,
      "tokens": 798,
      "context_length": 12799
    },
    {
      "position": 23,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/tight_layout_guide.py_fig_146",
      "distance": 1.0357387065887451,
      "file_path": "galleries/users_explain/axes/tight_layout_guide.py",
      "start_line": 109,
      "end_line": 225,
      "tokens": 879,
      "context_length": 13678
    },
    {
      "position": 24,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/_constrained_layout.py_do_constrained_layout.6_do_constrained_layout.7.1",
      "distance": 1.0376293659210205,
      "file_path": "lib/matplotlib/_constrained_layout.py",
      "start_line": 111,
      "end_line": 149,
      "tokens": 471,
      "context_length": 14149
    },
    {
      "position": 25,
      "id": "/tmp/repos/matplotlib/galleries/examples/mplot3d/mixed_subplots.py_1_",
      "distance": 1.0382516384124756,
      "file_path": "galleries/examples/mplot3d/mixed_subplots.py",
      "start_line": 1,
      "end_line": 47,
      "tokens": 356,
      "context_length": 14505
    },
    {
      "position": 26,
      "id": "/tmp/repos/matplotlib/galleries/tutorials/pyplot.py_t1_292",
      "distance": 1.038677453994751,
      "file_path": "galleries/tutorials/pyplot.py",
      "start_line": 257,
      "end_line": 335,
      "tokens": 909,
      "context_length": 15414
    },
    {
      "position": 27,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/constrainedlayout_guide.py_fig_fig_267.1",
      "distance": 1.0394949913024902,
      "file_path": "galleries/users_explain/axes/constrainedlayout_guide.py",
      "start_line": 352,
      "end_line": 441,
      "tokens": 761,
      "context_length": 16175
    },
    {
      "position": 28,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/constrainedlayout_guide.py_ax1_334_440",
      "distance": 1.0415889024734497,
      "file_path": "galleries/users_explain/axes/constrainedlayout_guide.py",
      "start_line": 529,
      "end_line": 648,
      "tokens": 1131,
      "context_length": 17306
    },
    {
      "position": 29,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/mosaic.py_73_axd_131.1",
      "distance": 1.0437061786651611,
      "file_path": "galleries/users_explain/axes/mosaic.py",
      "start_line": 169,
      "end_line": 289,
      "tokens": 785,
      "context_length": 18091
    },
    {
      "position": 30,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_1__stale_figure_callback.1.self.figure.stale.1",
      "distance": 1.0448964834213257,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 1,
      "end_line": 69,
      "tokens": 493,
      "context_length": 18584,
      "file_pos": 17
    },
    {
      "position": 31,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/pyplot.py_88_subplots",
      "distance": 1.046256184577942,
      "file_path": "lib/matplotlib/pyplot.py",
      "start_line": 739,
      "end_line": 1567,
      "tokens": 5724,
      "context_length": 24308
    },
    {
      "position": 32,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/auto_subplots_adjust.py_on_draw_on_draw.5.2",
      "distance": 1.0485129356384277,
      "file_path": "galleries/examples/subplots_axes_and_figures/auto_subplots_adjust.py",
      "start_line": 52,
      "end_line": 66,
      "tokens": 151,
      "context_length": 24459
    },
    {
      "position": 33,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/_constrained_layout.py_make_margin_suptitles_make_margin_suptitles.inv_trans_fig.10.2.3",
      "distance": 1.0489563941955566,
      "file_path": "lib/matplotlib/_constrained_layout.py",
      "start_line": 443,
      "end_line": 479,
      "tokens": 473,
      "context_length": 24932
    },
    {
      "position": 34,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_SubplotParams.update_SubplotParams.update.9.self.hspace.1",
      "distance": 1.051126480102539,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 155,
      "end_line": 177,
      "tokens": 205,
      "context_length": 25137,
      "file_pos": 18
    },
    {
      "position": 35,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.suptitle_FigureBase.suptitle.info.2.1",
      "distance": 1.0528453588485718,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 391,
      "end_line": 399,
      "tokens": 154,
      "context_length": 25291,
      "file_pos": 18
    },
    {
      "position": 36,
      "id": "/tmp/repos/matplotlib/galleries/examples/text_labels_and_annotations/label_subplots.py_1_",
      "distance": 1.0540164709091187,
      "file_path": "galleries/examples/text_labels_and_annotations/label_subplots.py",
      "start_line": 1,
      "end_line": 72,
      "tokens": 606,
      "context_length": 25897
    },
    {
      "position": 37,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_SubFigure_SubFigure.dpi_4.self._parent.dpi.1",
      "distance": 1.0566929578781128,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 2141,
      "end_line": 2239,
      "tokens": 781,
      "context_length": 26678,
      "file_pos": 19
    },
    {
      "position": 38,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_Figure.get_constrained_layout_pads_Figure.set_canvas.self.canvas.1",
      "distance": 1.0570729970932007,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 2863,
      "end_line": 2904,
      "tokens": 321,
      "context_length": 26999,
      "file_pos": 19
    },
    {
      "position": 39,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/subplot.py_1_",
      "distance": 1.0581101179122925,
      "file_path": "galleries/examples/subplots_axes_and_figures/subplot.py",
      "start_line": 1,
      "end_line": 52,
      "tokens": 345,
      "context_length": 27344
    },
    {
      "position": 40,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/demo_tight_layout.py_71_",
      "distance": 1.0598598718643188,
      "file_path": "galleries/examples/subplots_axes_and_figures/demo_tight_layout.py",
      "start_line": 118,
      "end_line": 135,
      "tokens": 112,
      "context_length": 27456
    },
    {
      "position": 41,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/constrainedlayout_guide.py_441_",
      "distance": 1.0605486631393433,
      "file_path": "galleries/users_explain/axes/constrainedlayout_guide.py",
      "start_line": 650,
      "end_line": 735,
      "tokens": 780,
      "context_length": 28236
    },
    {
      "position": 42,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/subplots_demo.py_1_63",
      "distance": 1.0612238645553589,
      "file_path": "galleries/examples/subplots_axes_and_figures/subplots_demo.py",
      "start_line": 1,
      "end_line": 86,
      "tokens": 746,
      "context_length": 28982
    },
    {
      "position": 43,
      "id": "/tmp/repos/matplotlib/galleries/examples/lines_bars_and_markers/vline_hline_demo.py_1_",
      "distance": 1.0632376670837402,
      "file_path": "galleries/examples/lines_bars_and_markers/vline_hline_demo.py",
      "start_line": 1,
      "end_line": 35,
      "tokens": 295,
      "context_length": 29277
    },
    {
      "position": 44,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.subplot_mosaic.subplot_kw_FigureBase.subplot_mosaic.11",
      "distance": 1.0633141994476318,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 1935,
      "end_line": 1960,
      "tokens": 316,
      "context_length": 29593,
      "file_pos": 21
    },
    {
      "position": 45,
      "id": "/tmp/repos/matplotlib/galleries/examples/userdemo/demo_gridspec03.py_1_",
      "distance": 1.063378095626831,
      "file_path": "galleries/examples/userdemo/demo_gridspec03.py",
      "start_line": 1,
      "end_line": 53,
      "tokens": 422,
      "context_length": 30015
    },
    {
      "position": 46,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/mosaic.py_6_axd_72.1",
      "distance": 1.0636656284332275,
      "file_path": "galleries/users_explain/axes/mosaic.py",
      "start_line": 57,
      "end_line": 168,
      "tokens": 799,
      "context_length": 30814
    },
    {
      "position": 47,
      "id": "/tmp/repos/matplotlib/galleries/tutorials/pyplot.py_t_f.1.1",
      "distance": 1.0636839866638184,
      "file_path": "galleries/tutorials/pyplot.py",
      "start_line": 96,
      "end_line": 255,
      "tokens": 1523,
      "context_length": 32337
    },
    {
      "position": 48,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.subplot_mosaic._do_layout.18_FigureBase.subplot_mosaic._do_layout.19.1",
      "distance": 1.065195918083191,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 2074,
      "end_line": 2113,
      "tokens": 401,
      "context_length": 32738,
      "file_pos": 22
    },
    {
      "position": 49,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/quick_start.py_438_513",
      "distance": 1.067217230796814,
      "file_path": "galleries/users_explain/quick_start.py",
      "start_line": 489,
      "end_line": 575,
      "tokens": 1016,
      "context_length": 33754
    },
    {
      "position": 50,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.subplot_mosaic.mosaic_FigureBase._set_artist_props.3",
      "distance": 1.0675795078277588,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 2115,
      "end_line": 2138,
      "tokens": 266,
      "context_length": 34020,
      "file_pos": 23
    },
    {
      "position": 51,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/text/text_intro.py_font_149",
      "distance": 1.0685216188430786,
      "file_path": "galleries/users_explain/text/text_intro.py",
      "start_line": 180,
      "end_line": 268,
      "tokens": 762,
      "context_length": 34782
    },
    {
      "position": 52,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/text/annotations.py_an1_447_",
      "distance": 1.0689613819122314,
      "file_path": "galleries/users_explain/text/annotations.py",
      "start_line": 641,
      "end_line": 714,
      "tokens": 793,
      "context_length": 35575
    },
    {
      "position": 53,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/arranging_axes.py_outer_fig_183.1",
      "distance": 1.0695810317993164,
      "file_path": "galleries/users_explain/axes/arranging_axes.py",
      "start_line": 261,
      "end_line": 341,
      "tokens": 743,
      "context_length": 36318
    },
    {
      "position": 54,
      "id": "/tmp/repos/matplotlib/galleries/examples/text_labels_and_annotations/align_ylabels.py_5_",
      "distance": 1.0732502937316895,
      "file_path": "galleries/examples/text_labels_and_annotations/align_ylabels.py",
      "start_line": 41,
      "end_line": 87,
      "tokens": 346,
      "context_length": 36664
    },
    {
      "position": 55,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/auto_subplots_adjust.py_1_6",
      "distance": 1.073455572128296,
      "file_path": "galleries/examples/subplots_axes_and_figures/auto_subplots_adjust.py",
      "start_line": 1,
      "end_line": 49,
      "tokens": 409,
      "context_length": 37073
    },
    {
      "position": 56,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/backends/backend_wx.py__FigureCanvasWxBase.keyvald__FigureCanvasWxBase.keyvald.1",
      "distance": 1.0736725330352783,
      "file_path": "lib/matplotlib/backends/backend_wx.py",
      "start_line": 404,
      "end_line": 462,
      "tokens": 682,
      "context_length": 37755
    },
    {
      "position": 57,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/backends/backend_wx.py_FigureFrameWx_FigureFrameWx.__init__.3.19",
      "distance": 1.0737510919570923,
      "file_path": "lib/matplotlib/backends/backend_wx.py",
      "start_line": 877,
      "end_line": 907,
      "tokens": 271,
      "context_length": 38026
    },
    {
      "position": 58,
      "id": "/tmp/repos/matplotlib/galleries/examples/text_labels_and_annotations/figlegend_demo.py_1_",
      "distance": 1.0739134550094604,
      "file_path": "galleries/examples/text_labels_and_annotations/figlegend_demo.py",
      "start_line": 1,
      "end_line": 54,
      "tokens": 511,
      "context_length": 38537
    },
    {
      "position": 59,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.add_subfigure_FigureBase.add_subfigure.4.1",
      "distance": 1.0743293762207031,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 1602,
      "end_line": 1627,
      "tokens": 148,
      "context_length": 38685,
      "file_pos": 28
    },
    {
      "position": 60,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/constrainedlayout_guide.py_30_91",
      "distance": 1.075679063796997,
      "file_path": "galleries/users_explain/axes/constrainedlayout_guide.py",
      "start_line": 106,
      "end_line": 183,
      "tokens": 750,
      "context_length": 39435
    },
    {
      "position": 61,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/backends/backend_wx.py__FigureCanvasWxBase._mpl_modifiers__FigureCanvasWxBase._mpl_modifiers.2.3.1.1",
      "distance": 1.0758858919143677,
      "file_path": "lib/matplotlib/backends/backend_wx.py",
      "start_line": 672,
      "end_line": 685,
      "tokens": 143,
      "context_length": 39578
    },
    {
      "position": 62,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/axes_box_aspect.py_73_",
      "distance": 1.0761027336120605,
      "file_path": "galleries/examples/subplots_axes_and_figures/axes_box_aspect.py",
      "start_line": 110,
      "end_line": 156,
      "tokens": 366,
      "context_length": 39944
    },
    {
      "position": 63,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/axhspan_demo.py_1_",
      "distance": 1.076162576675415,
      "file_path": "galleries/examples/subplots_axes_and_figures/axhspan_demo.py",
      "start_line": 1,
      "end_line": 37,
      "tokens": 369,
      "context_length": 40313
    },
    {
      "position": 64,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/_mathtext.py_Hlist.hpack_Hlist.hpack.17.2.1",
      "distance": 1.0764901638031006,
      "file_path": "lib/matplotlib/_mathtext.py",
      "start_line": 1156,
      "end_line": 1218,
      "tokens": 577,
      "context_length": 40890
    },
    {
      "position": 65,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/_constrained_layout.py_get_margin_from_padding_get_margin_from_padding.13.1",
      "distance": 1.0766870975494385,
      "file_path": "lib/matplotlib/_constrained_layout.py",
      "start_line": 300,
      "end_line": 335,
      "tokens": 391,
      "context_length": 41281
    },
    {
      "position": 66,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/multiple_figs_demo.py_1_",
      "distance": 1.0767747163772583,
      "file_path": "galleries/examples/subplots_axes_and_figures/multiple_figs_demo.py",
      "start_line": 1,
      "end_line": 52,
      "tokens": 317,
      "context_length": 41598
    },
    {
      "position": 67,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.colorbar.3_FigureBase.colorbar.7.1",
      "distance": 1.0775823593139648,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 1283,
      "end_line": 1313,
      "tokens": 413,
      "context_length": 42011,
      "file_pos": 32
    },
    {
      "position": 68,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/broken_axis.py_1_",
      "distance": 1.0780143737792969,
      "file_path": "galleries/examples/subplots_axes_and_figures/broken_axis.py",
      "start_line": 1,
      "end_line": 55,
      "tokens": 525,
      "context_length": 42536
    },
    {
      "position": 69,
      "id": "/tmp/repos/matplotlib/galleries/examples/showcase/anatomy.py_35_",
      "distance": 1.0788979530334473,
      "file_path": "galleries/examples/showcase/anatomy.py",
      "start_line": 85,
      "end_line": 122,
      "tokens": 453,
      "context_length": 42989
    },
    {
      "position": 70,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.add_subplot.2_FigureBase._add_axes_internal.10.1",
      "distance": 1.0792704820632935,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 758,
      "end_line": 796,
      "tokens": 446,
      "context_length": 43435,
      "file_pos": 34
    },
    {
      "position": 71,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/demo_constrained_layout.py_1_",
      "distance": 1.0793774127960205,
      "file_path": "galleries/examples/subplots_axes_and_figures/demo_constrained_layout.py",
      "start_line": 1,
      "end_line": 72,
      "tokens": 425,
      "context_length": 43860
    },
    {
      "position": 72,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/colorbar_placement.py_1_cmaps_40.1",
      "distance": 1.0795233249664307,
      "file_path": "galleries/users_explain/axes/colorbar_placement.py",
      "start_line": 1,
      "end_line": 85,
      "tokens": 764,
      "context_length": 44624
    },
    {
      "position": 73,
      "id": "/tmp/repos/matplotlib/galleries/examples/lines_bars_and_markers/filled_step.py_10_",
      "distance": 1.0800048112869263,
      "file_path": "galleries/examples/lines_bars_and_markers/filled_step.py",
      "start_line": 180,
      "end_line": 238,
      "tokens": 493,
      "context_length": 45117
    },
    {
      "position": 74,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/_constrained_layout.py_make_layout_margins.3_make_layout_margins.4",
      "distance": 1.083221197128296,
      "file_path": "lib/matplotlib/_constrained_layout.py",
      "start_line": 359,
      "end_line": 423,
      "tokens": 780,
      "context_length": 45897
    },
    {
      "position": 75,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/artists/transforms_tutorial.py_fig_200",
      "distance": 1.0836865901947021,
      "file_path": "galleries/users_explain/artists/transforms_tutorial.py",
      "start_line": 259,
      "end_line": 356,
      "tokens": 1006,
      "context_length": 46903
    },
    {
      "position": 76,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_SubFigure.get_layout_engine_SubFigure.axes.2.1",
      "distance": 1.0843802690505981,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 2313,
      "end_line": 2329,
      "tokens": 149,
      "context_length": 47052,
      "file_pos": 38
    },
    {
      "position": 77,
      "id": "/tmp/repos/matplotlib/galleries/examples/mplot3d/wire3d_zero_stride.py_1_",
      "distance": 1.0845561027526855,
      "file_path": "galleries/examples/mplot3d/wire3d_zero_stride.py",
      "start_line": 1,
      "end_line": 30,
      "tokens": 232,
      "context_length": 47284
    },
    {
      "position": 78,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/_tight_layout.py__auto_adjust_subplotpars.16__auto_adjust_subplotpars.25.1",
      "distance": 1.086641788482666,
      "file_path": "lib/matplotlib/_tight_layout.py",
      "start_line": 96,
      "end_line": 157,
      "tokens": 738,
      "context_length": 48022
    },
    {
      "position": 79,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/figure_title.py_1_",
      "distance": 1.0871963500976562,
      "file_path": "galleries/examples/subplots_axes_and_figures/figure_title.py",
      "start_line": 1,
      "end_line": 54,
      "tokens": 456,
      "context_length": 48478
    },
    {
      "position": 80,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_Figure.savefig.2_Figure.savefig.4.2",
      "distance": 1.087594747543335,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 3345,
      "end_line": 3382,
      "tokens": 363,
      "context_length": 48841,
      "file_pos": 41
    },
    {
      "position": 81,
      "id": "/tmp/repos/matplotlib/galleries/examples/axisartist/demo_floating_axes.py_14_",
      "distance": 1.0891203880310059,
      "file_path": "galleries/examples/axisartist/demo_floating_axes.py",
      "start_line": 149,
      "end_line": 168,
      "tokens": 186,
      "context_length": 49027
    },
    {
      "position": 82,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/constrainedlayout_guide.py_1_29",
      "distance": 1.0891947746276855,
      "file_path": "galleries/users_explain/axes/constrainedlayout_guide.py",
      "start_line": 1,
      "end_line": 105,
      "tokens": 783,
      "context_length": 49810
    },
    {
      "position": 83,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/_constrained_layout.py_make_layout_margins.5_make_layout_margins.5.2.7.2.1",
      "distance": 1.089599370956421,
      "file_path": "lib/matplotlib/_constrained_layout.py",
      "start_line": 424,
      "end_line": 440,
      "tokens": 233,
      "context_length": 50043
    },
    {
      "position": 84,
      "id": "/tmp/repos/matplotlib/galleries/examples/pyplots/pyplot_two_subplots.py_1_",
      "distance": 1.0901241302490234,
      "file_path": "galleries/examples/pyplots/pyplot_two_subplots.py",
      "start_line": 1,
      "end_line": 38,
      "tokens": 220,
      "context_length": 50263
    },
    {
      "position": 85,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/custom_figure_class.py_x_",
      "distance": 1.0910961627960205,
      "file_path": "galleries/examples/subplots_axes_and_figures/custom_figure_class.py",
      "start_line": 36,
      "end_line": 53,
      "tokens": 115,
      "context_length": 50378
    },
    {
      "position": 86,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/_constrained_layout.py_make_layout_margins_make_layout_margins.2.ss.5",
      "distance": 1.092083215713501,
      "file_path": "lib/matplotlib/_constrained_layout.py",
      "start_line": 338,
      "end_line": 357,
      "tokens": 214,
      "context_length": 50592
    },
    {
      "position": 87,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.add_axes.3_FigureBase.add_axes.5.1",
      "distance": 1.093003273010254,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 634,
      "end_line": 655,
      "tokens": 230,
      "context_length": 50822,
      "file_pos": 44
    },
    {
      "position": 88,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/_constrained_layout.py_1__log.1",
      "distance": 1.093597412109375,
      "file_path": "lib/matplotlib/_constrained_layout.py",
      "start_line": 1,
      "end_line": 59,
      "tokens": 591,
      "context_length": 51413
    },
    {
      "position": 89,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/axes/tight_layout_guide.py_lines_",
      "distance": 1.0940563678741455,
      "file_path": "galleries/users_explain/axes/tight_layout_guide.py",
      "start_line": 226,
      "end_line": 297,
      "tokens": 499,
      "context_length": 51912
    },
    {
      "position": 90,
      "id": "/tmp/repos/matplotlib/galleries/examples/shapes_and_collections/hatch_style_reference.py_1_",
      "distance": 1.0966155529022217,
      "file_path": "galleries/examples/shapes_and_collections/hatch_style_reference.py",
      "start_line": 1,
      "end_line": 65,
      "tokens": 558,
      "context_length": 52470
    },
    {
      "position": 91,
      "id": "/tmp/repos/matplotlib/galleries/users_explain/quick_start.py_x_275_361",
      "distance": 1.099853515625,
      "file_path": "galleries/users_explain/quick_start.py",
      "start_line": 305,
      "end_line": 402,
      "tokens": 968,
      "context_length": 53438
    },
    {
      "position": 92,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase.subplots_adjust_FigureBase.subplots_adjust.self.stale.1",
      "distance": 1.1024373769760132,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 1315,
      "end_line": 1355,
      "tokens": 369,
      "context_length": 53807,
      "file_pos": 45
    },
    {
      "position": 93,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/backends/backend_gtk3.py_FigureCanvasGTK3._post_draw_FigureCanvasGTK3._post_draw.22",
      "distance": 1.1027472019195557,
      "file_path": "lib/matplotlib/backends/backend_gtk3.py",
      "start_line": 232,
      "end_line": 260,
      "tokens": 282,
      "context_length": 54089
    },
    {
      "position": 94,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/two_scales.py_1_",
      "distance": 1.1029608249664307,
      "file_path": "galleries/examples/subplots_axes_and_figures/two_scales.py",
      "start_line": 1,
      "end_line": 52,
      "tokens": 407,
      "context_length": 54496
    },
    {
      "position": 95,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_Figure.set_constrained_layout_pads_Figure.set_constrained_layout_pads.2.1",
      "distance": 1.105196475982666,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 2829,
      "end_line": 2861,
      "tokens": 323,
      "context_length": 54819,
      "file_pos": 47
    },
    {
      "position": 96,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase_FigureBase.__init__.25",
      "distance": 1.106009840965271,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 180,
      "end_line": 212,
      "tokens": 286,
      "context_length": 55105,
      "file_pos": 47
    },
    {
      "position": 97,
      "id": "/tmp/repos/matplotlib/galleries/examples/axisartist/demo_parasite_axes.py_1_",
      "distance": 1.1069613695144653,
      "file_path": "galleries/examples/axisartist/demo_parasite_axes.py",
      "start_line": 1,
      "end_line": 54,
      "tokens": 499,
      "context_length": 55604
    },
    {
      "position": 98,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/backends/backend_wx.py_FigureCanvasWx.print_bmp_FigureCanvasWx.print_xpm.1",
      "distance": 1.1092016696929932,
      "file_path": "lib/matplotlib/backends/backend_wx.py",
      "start_line": 863,
      "end_line": 874,
      "tokens": 151,
      "context_length": 55755
    },
    {
      "position": 99,
      "id": "/tmp/repos/matplotlib/galleries/examples/axisartist/demo_parasite_axes2.py_1_",
      "distance": 1.1100530624389648,
      "file_path": "galleries/examples/axisartist/demo_parasite_axes2.py",
      "start_line": 1,
      "end_line": 57,
      "tokens": 521,
      "context_length": 56276
    },
    {
      "position": 100,
      "id": "/tmp/repos/matplotlib/galleries/examples/subplots_axes_and_figures/axes_margins.py_1_",
      "distance": 1.110245943069458,
      "file_path": "galleries/examples/subplots_axes_and_figures/axes_margins.py",
      "start_line": 1,
      "end_line": 89,
      "tokens": 770,
      "context_length": 57046
    },
    {
      "position": 101,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/_tight_layout.py_get_tight_layout_figure.kwargs_",
      "distance": 1.1102662086486816,
      "file_path": "lib/matplotlib/_tight_layout.py",
      "start_line": 266,
      "end_line": 302,
      "tokens": 362,
      "context_length": 57408
    },
    {
      "position": 102,
      "id": "/tmp/repos/matplotlib/galleries/examples/axes_grid1/demo_axes_hbox_divider.py_1_",
      "distance": 1.111328363418579,
      "file_path": "galleries/examples/axes_grid1/demo_axes_hbox_divider.py",
      "start_line": 1,
      "end_line": 55,
      "tokens": 394,
      "context_length": 57802
    },
    {
      "position": 103,
      "id": "/tmp/repos/matplotlib/galleries/examples/statistics/errorbars_and_boxes.py_16_",
      "distance": 1.111417293548584,
      "file_path": "galleries/examples/statistics/errorbars_and_boxes.py",
      "start_line": 64,
      "end_line": 82,
      "tokens": 117,
      "context_length": 57919
    },
    {
      "position": 104,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/backends/backend_wx.py__FigureCanvasWxBase.draw_idle__FigureCanvasWxBase.flush_events.2",
      "distance": 1.1114858388900757,
      "file_path": "lib/matplotlib/backends/backend_wx.py",
      "start_line": 527,
      "end_line": 538,
      "tokens": 128,
      "context_length": 58047
    },
    {
      "position": 105,
      "id": "/tmp/repos/matplotlib/galleries/examples/event_handling/figure_axes_enter_leave.py_1_",
      "distance": 1.1115739345550537,
      "file_path": "galleries/examples/event_handling/figure_axes_enter_leave.py",
      "start_line": 1,
      "end_line": 53,
      "tokens": 323,
      "context_length": 58370
    },
    {
      "position": 106,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/backends/backend_gtk4.py_FigureCanvasGTK4._post_draw_FigureCanvasGTK4._post_draw.24",
      "distance": 1.1116682291030884,
      "file_path": "lib/matplotlib/backends/backend_gtk4.py",
      "start_line": 225,
      "end_line": 260,
      "tokens": 337,
      "context_length": 58707
    },
    {
      "position": 107,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/figure.py_FigureBase._norm_per_subplot_kw_FigureBase._normalize_grid_string.1.3.layout.2.1",
      "distance": 1.111802339553833,
      "file_path": "lib/matplotlib/figure.py",
      "start_line": 1796,
      "end_line": 1823,
      "tokens": 203,
      "context_length": 58910,
      "file_pos": 54
    },
    {
      "position": 108,
      "id": "/tmp/repos/matplotlib/lib/matplotlib/backend_bases.py_FigureManagerBase.destroy__Mode._navigate_mode.1.1",
      "distance": 1.1147738695144653,
      "file_path": "lib/matplotlib/backend_bases.py",
      "start_line": 2740,
      "end_line": 2777,
      "tokens": 207,
      "context_length": 59117
    }
  ],
  "files": [
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/subfigures.py",
      "position": 1,
      "tokens": 1426,
      "context_length": 1426
    },
    {
      "file_path": "galleries/users_explain/axes/constrainedlayout_guide.py",
      "position": 2,
      "tokens": 6710,
      "context_length": 8136
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/subplots_demo.py",
      "position": 3,
      "tokens": 1981,
      "context_length": 10117
    },
    {
      "file_path": "lib/matplotlib/figure.py",
      "position": 4,
      "tokens": 29679,
      "context_length": 39796
    },
    {
      "file_path": "galleries/users_explain/axes/arranging_axes.py",
      "position": 5,
      "tokens": 4126,
      "context_length": 43922
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/ganged_plots.py",
      "position": 6,
      "tokens": 345,
      "context_length": 44267
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/auto_subplots_adjust.py",
      "position": 7,
      "tokens": 700,
      "context_length": 44967
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/figure_size_units.py",
      "position": 8,
      "tokens": 629,
      "context_length": 45596
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/demo_tight_layout.py",
      "position": 9,
      "tokens": 874,
      "context_length": 46470
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/subplots_adjust.py",
      "position": 10,
      "tokens": 207,
      "context_length": 46677
    },
    {
      "file_path": "galleries/examples/lines_bars_and_markers/scatter_hist.py",
      "position": 11,
      "tokens": 1104,
      "context_length": 47781
    },
    {
      "file_path": "galleries/examples/mplot3d/subplot3d.py",
      "position": 12,
      "tokens": 367,
      "context_length": 48148
    },
    {
      "file_path": "galleries/users_explain/axes/tight_layout_guide.py",
      "position": 13,
      "tokens": 2176,
      "context_length": 50324
    },
    {
      "file_path": "lib/matplotlib/_constrained_layout.py",
      "position": 14,
      "tokens": 7563,
      "context_length": 57887
    },
    {
      "file_path": "galleries/examples/mplot3d/mixed_subplots.py",
      "position": 15,
      "tokens": 356,
      "context_length": 58243
    },
    {
      "file_path": "galleries/tutorials/pyplot.py",
      "position": 16,
      "tokens": 4488,
      "context_length": 62731
    },
    {
      "file_path": "galleries/users_explain/axes/mosaic.py",
      "position": 17,
      "tokens": 2706,
      "context_length": 65437
    },
    {
      "file_path": "lib/matplotlib/pyplot.py",
      "position": 18,
      "tokens": 34081,
      "context_length": 99518
    },
    {
      "file_path": "galleries/examples/text_labels_and_annotations/label_subplots.py",
      "position": 19,
      "tokens": 606,
      "context_length": 100124
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/subplot.py",
      "position": 20,
      "tokens": 345,
      "context_length": 100469
    },
    {
      "file_path": "galleries/examples/lines_bars_and_markers/vline_hline_demo.py",
      "position": 21,
      "tokens": 295,
      "context_length": 100764
    },
    {
      "file_path": "galleries/examples/userdemo/demo_gridspec03.py",
      "position": 22,
      "tokens": 422,
      "context_length": 101186
    },
    {
      "file_path": "galleries/users_explain/quick_start.py",
      "position": 23,
      "tokens": 6007,
      "context_length": 107193
    },
    {
      "file_path": "galleries/users_explain/text/text_intro.py",
      "position": 24,
      "tokens": 3877,
      "context_length": 111070
    },
    {
      "file_path": "galleries/users_explain/text/annotations.py",
      "position": 25,
      "tokens": 7397,
      "context_length": 118467
    },
    {
      "file_path": "galleries/examples/text_labels_and_annotations/align_ylabels.py",
      "position": 26,
      "tokens": 647,
      "context_length": 119114
    },
    {
      "file_path": "lib/matplotlib/backends/backend_wx.py",
      "position": 27,
      "tokens": 11696,
      "context_length": 130810
    },
    {
      "file_path": "galleries/examples/text_labels_and_annotations/figlegend_demo.py",
      "position": 28,
      "tokens": 511,
      "context_length": 131321
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/axes_box_aspect.py",
      "position": 29,
      "tokens": 1127,
      "context_length": 132448
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/axhspan_demo.py",
      "position": 30,
      "tokens": 369,
      "context_length": 132817
    },
    {
      "file_path": "lib/matplotlib/_mathtext.py",
      "position": 31,
      "tokens": 23682,
      "context_length": 156499
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/multiple_figs_demo.py",
      "position": 32,
      "tokens": 317,
      "context_length": 156816
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/broken_axis.py",
      "position": 33,
      "tokens": 525,
      "context_length": 157341
    },
    {
      "file_path": "galleries/examples/showcase/anatomy.py",
      "position": 34,
      "tokens": 1240,
      "context_length": 158581
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/demo_constrained_layout.py",
      "position": 35,
      "tokens": 425,
      "context_length": 159006
    },
    {
      "file_path": "galleries/users_explain/axes/colorbar_placement.py",
      "position": 36,
      "tokens": 895,
      "context_length": 159901
    },
    {
      "file_path": "galleries/examples/lines_bars_and_markers/filled_step.py",
      "position": 37,
      "tokens": 1626,
      "context_length": 161527
    },
    {
      "file_path": "galleries/users_explain/artists/transforms_tutorial.py",
      "position": 38,
      "tokens": 6362,
      "context_length": 167889
    },
    {
      "file_path": "galleries/examples/mplot3d/wire3d_zero_stride.py",
      "position": 39,
      "tokens": 232,
      "context_length": 168121
    },
    {
      "file_path": "lib/matplotlib/_tight_layout.py",
      "position": 40,
      "tokens": 2929,
      "context_length": 171050
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/figure_title.py",
      "position": 41,
      "tokens": 456,
      "context_length": 171506
    },
    {
      "file_path": "galleries/examples/axisartist/demo_floating_axes.py",
      "position": 42,
      "tokens": 1398,
      "context_length": 172904
    },
    {
      "file_path": "galleries/examples/pyplots/pyplot_two_subplots.py",
      "position": 43,
      "tokens": 220,
      "context_length": 173124
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/custom_figure_class.py",
      "position": 44,
      "tokens": 371,
      "context_length": 173495
    },
    {
      "file_path": "galleries/examples/shapes_and_collections/hatch_style_reference.py",
      "position": 45,
      "tokens": 558,
      "context_length": 174053
    },
    {
      "file_path": "lib/matplotlib/backends/backend_gtk3.py",
      "position": 46,
      "tokens": 4733,
      "context_length": 178786
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/two_scales.py",
      "position": 47,
      "tokens": 407,
      "context_length": 179193
    },
    {
      "file_path": "galleries/examples/axisartist/demo_parasite_axes.py",
      "position": 48,
      "tokens": 499,
      "context_length": 179692
    },
    {
      "file_path": "galleries/examples/axisartist/demo_parasite_axes2.py",
      "position": 49,
      "tokens": 521,
      "context_length": 180213
    },
    {
      "file_path": "galleries/examples/subplots_axes_and_figures/axes_margins.py",
      "position": 50,
      "tokens": 770,
      "context_length": 180983
    },
    {
      "file_path": "galleries/examples/axes_grid1/demo_axes_hbox_divider.py",
      "position": 51,
      "tokens": 394,
      "context_length": 181377
    },
    {
      "file_path": "galleries/examples/statistics/errorbars_and_boxes.py",
      "position": 52,
      "tokens": 646,
      "context_length": 182023
    },
    {
      "file_path": "galleries/examples/event_handling/figure_axes_enter_leave.py",
      "position": 53,
      "tokens": 323,
      "context_length": 182346
    },
    {
      "file_path": "lib/matplotlib/backends/backend_gtk4.py",
      "position": 54,
      "tokens": 4720,
      "context_length": 187066
    },
    {
      "file_path": "lib/matplotlib/backend_bases.py",
      "position": 55,
      "tokens": 27281,
      "context_length": 214347
    }
  ]
}