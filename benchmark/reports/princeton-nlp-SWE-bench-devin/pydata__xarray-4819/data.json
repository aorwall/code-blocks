{
  "instance_id": "pydata__xarray-4819",
  "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 7edc2fab..540caa24 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -665,7 +665,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         coords: Mapping[Hashable, Any] = None,\n         attrs: Mapping[Hashable, Any] = None,\n     ):\n-        # TODO(shoyer): expose indexes as a public argument in __init__\n+        # TODO: expose indexes as a public argument in __init__\n \n         if data_vars is None:\n             data_vars = {}\n@@ -790,10 +790,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             k: v._data for k, v in self.variables.items() if is_duck_dask_array(v._data)\n         }\n         if lazy_data:\n-            import dask.array as da\n+            import dask\n \n             # evaluate all the dask arrays simultaneously\n-            evaluated_data = da.compute(*lazy_data.values(), **kwargs)\n+            evaluated_data = dask.compute(*lazy_data.values(), **kwargs)\n \n             for k, data in zip(lazy_data, evaluated_data):\n                 self.variables[k].data = data\n@@ -1127,210 +1127,475 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             obj = obj.rename(dim_names)\n         return obj\n \n-    def copy(self, deep: bool = False, data: Mapping = None) -> \"Dataset\":\n-        \"\"\"Returns a copy of this dataset.\n+    @property\n+    def _attr_sources(self) -> Iterable[Mapping[Hashable, Any]]:\n+        \"\"\"Places to look-up items for attribute-style access\"\"\"\n+        yield from self._item_sources\n+        yield self.attrs\n \n-        If `deep=True`, a deep copy is made of each of the component variables.\n-        Otherwise, a shallow copy of each of the component variable is made, so\n-        that the underlying memory region of the new dataset is the same as in\n-        the original dataset.\n+    @property\n+    def _item_sources(self) -> Iterable[Mapping[Hashable, Any]]:\n+        \"\"\"Places to look-up items for key-completion\"\"\"\n+        yield self.data_vars\n+        yield HybridMappingProxy(keys=self._coord_names, mapping=self.coords)\n \n-        Use `data` to create a new object with the same structure as\n-        original but entirely new data.\n+        # virtual coordinates\n+        yield HybridMappingProxy(keys=self.dims, mapping=self)\n \n-        Parameters\n-        ----------\n-        deep : bool, optional\n-            Whether each component variable is loaded into memory and copied onto\n-            the new object. Default is False.\n-        data : dict-like, optional\n-            Data to use in the new object. Each item in `data` must have same\n-            shape as corresponding data variable in original. When `data` is\n-            used, `deep` is ignored for the data variables and only used for\n-            coords.\n+        # uses empty dict -- everything here can already be found in self.coords.\n+        yield HybridMappingProxy(keys=self._level_coords, mapping={})\n \n-        Returns\n-        -------\n-        object : Dataset\n-            New object with dimensions, attributes, coordinates, name, encoding,\n-            and optionally data copied from original.\n+    def __contains__(self, key: object) -> bool:\n+        \"\"\"The 'in' operator will return true or false depending on whether\n+        'key' is an array in the dataset or not.\n+        \"\"\"\n+        return key in self._variables\n \n-        Examples\n-        --------\n+    def __len__(self) -> int:\n+        return len(self.data_vars)\n \n-        Shallow copy versus deep copy\n+    def __bool__(self) -> bool:\n+        return bool(self.data_vars)\n \n-        >>> da = xr.DataArray(np.random.randn(2, 3))\n-        >>> ds = xr.Dataset(\n-        ...     {\"foo\": da, \"bar\": (\"x\", [-1, 2])},\n-        ...     coords={\"x\": [\"one\", \"two\"]},\n-        ... )\n-        >>> ds.copy()\n-        <xarray.Dataset>\n-        Dimensions:  (dim_0: 2, dim_1: 3, x: 2)\n-        Coordinates:\n-          * x        (x) <U3 'one' 'two'\n-        Dimensions without coordinates: dim_0, dim_1\n-        Data variables:\n-            foo      (dim_0, dim_1) float64 1.764 0.4002 0.9787 2.241 1.868 -0.9773\n-            bar      (x) int64 -1 2\n+    def __iter__(self) -> Iterator[Hashable]:\n+        return iter(self.data_vars)\n \n-        >>> ds_0 = ds.copy(deep=False)\n-        >>> ds_0[\"foo\"][0, 0] = 7\n-        >>> ds_0\n-        <xarray.Dataset>\n-        Dimensions:  (dim_0: 2, dim_1: 3, x: 2)\n-        Coordinates:\n-          * x        (x) <U3 'one' 'two'\n-        Dimensions without coordinates: dim_0, dim_1\n-        Data variables:\n-            foo      (dim_0, dim_1) float64 7.0 0.4002 0.9787 2.241 1.868 -0.9773\n-            bar      (x) int64 -1 2\n+    def __array__(self, dtype=None):\n+        raise TypeError(\n+            \"cannot directly convert an xarray.Dataset into a \"\n+            \"numpy array. Instead, create an xarray.DataArray \"\n+            \"first, either with indexing on the Dataset or by \"\n+            \"invoking the `to_array()` method.\"\n+        )\n \n-        >>> ds\n-        <xarray.Dataset>\n-        Dimensions:  (dim_0: 2, dim_1: 3, x: 2)\n-        Coordinates:\n-          * x        (x) <U3 'one' 'two'\n-        Dimensions without coordinates: dim_0, dim_1\n-        Data variables:\n-            foo      (dim_0, dim_1) float64 7.0 0.4002 0.9787 2.241 1.868 -0.9773\n-            bar      (x) int64 -1 2\n+    @property\n+    def nbytes(self) -> int:\n+        return sum(v.nbytes for v in self.variables.values())\n \n-        Changing the data using the ``data`` argument maintains the\n-        structure of the original object, but with the new data. Original\n-        object is unaffected.\n+    @property\n+    def loc(self) -> _LocIndexer:\n+        \"\"\"Attribute for location based indexing. Only supports __getitem__,\n+        and only when the key is a dict of the form {dim: labels}.\n+        \"\"\"\n+        return _LocIndexer(self)\n \n-        >>> ds.copy(data={\"foo\": np.arange(6).reshape(2, 3), \"bar\": [\"a\", \"b\"]})\n-        <xarray.Dataset>\n-        Dimensions:  (dim_0: 2, dim_1: 3, x: 2)\n-        Coordinates:\n-          * x        (x) <U3 'one' 'two'\n-        Dimensions without coordinates: dim_0, dim_1\n-        Data variables:\n-            foo      (dim_0, dim_1) int64 0 1 2 3 4 5\n-            bar      (x) <U1 'a' 'b'\n+    # FIXME https://github.com/python/mypy/issues/7328\n+    @overload\n+    def __getitem__(self, key: Mapping) -> \"Dataset\":  # type: ignore\n+        ...\n \n-        >>> ds\n-        <xarray.Dataset>\n-        Dimensions:  (dim_0: 2, dim_1: 3, x: 2)\n-        Coordinates:\n-          * x        (x) <U3 'one' 'two'\n-        Dimensions without coordinates: dim_0, dim_1\n-        Data variables:\n-            foo      (dim_0, dim_1) float64 7.0 0.4002 0.9787 2.241 1.868 -0.9773\n-            bar      (x) int64 -1 2\n+    @overload\n+    def __getitem__(self, key: Hashable) -> \"DataArray\":  # type: ignore\n+        ...\n+\n+    @overload\n+    def __getitem__(self, key: Any) -> \"Dataset\":\n+        ...\n+\n+    def __getitem__(self, key):\n+        \"\"\"Access variables or coordinates this dataset as a\n+        :py:class:`~xarray.DataArray`.\n+\n+        Indexing with a list of names will return a new ``Dataset`` object.\n+        \"\"\"\n+        if utils.is_dict_like(key):\n+            return self.isel(**cast(Mapping, key))\n+\n+        if hashable(key):\n+            return self._construct_dataarray(key)\n+        else:\n+            return self._copy_listed(np.asarray(key))\n+\n+    def __setitem__(self, key: Hashable, value) -> None:\n+        \"\"\"Add an array to this dataset.\n+\n+        If value is a `DataArray`, call its `select_vars()` method, rename it\n+        to `key` and merge the contents of the resulting dataset into this\n+        dataset.\n+\n+        If value is an `Variable` object (or tuple of form\n+        ``(dims, data[, attrs])``), add it to this dataset as a new\n+        variable.\n+        \"\"\"\n+        if utils.is_dict_like(key):\n+            raise NotImplementedError(\n+                \"cannot yet use a dictionary as a key to set Dataset values\"\n+            )\n+\n+        self.update({key: value})\n+\n+    def __delitem__(self, key: Hashable) -> None:\n+        \"\"\"Remove a variable from this dataset.\"\"\"\n+        del self._variables[key]\n+        self._coord_names.discard(key)\n+        if key in self.indexes:\n+            assert self._indexes is not None\n+            del self._indexes[key]\n+        self._dims = calculate_dimensions(self._variables)\n+\n+    # mutable objects should not be hashable\n+    # https://github.com/python/mypy/issues/4266\n+    __hash__ = None  # type: ignore\n+\n+    def _all_compat(self, other: \"Dataset\", compat_str: str) -> bool:\n+        \"\"\"Helper function for equals and identical\"\"\"\n+\n+        # some stores (e.g., scipy) do not seem to preserve order, so don't\n+        # require matching order for equality\n+        def compat(x: Variable, y: Variable) -> bool:\n+            return getattr(x, compat_str)(y)\n+\n+        return self._coord_names == other._coord_names and utils.dict_equiv(\n+            self._variables, other._variables, compat=compat\n+        )\n+\n+    def broadcast_equals(self, other: \"Dataset\") -> bool:\n+        \"\"\"Two Datasets are broadcast equal if they are equal after\n+        broadcasting all variables against each other.\n+\n+        For example, variables that are scalar in one dataset but non-scalar in\n+        the other dataset can still be broadcast equal if the the non-scalar\n+        variable is a constant.\n \n         See Also\n         --------\n-        pandas.DataFrame.copy\n+        Dataset.equals\n+        Dataset.identical\n         \"\"\"\n-        if data is None:\n-            variables = {k: v.copy(deep=deep) for k, v in self._variables.items()}\n-        elif not utils.is_dict_like(data):\n-            raise ValueError(\"Data must be dict-like\")\n-        else:\n-            var_keys = set(self.data_vars.keys())\n-            data_keys = set(data.keys())\n-            keys_not_in_vars = data_keys - var_keys\n-            if keys_not_in_vars:\n-                raise ValueError(\n-                    \"Data must only contain variables in original \"\n-                    \"dataset. Extra variables: {}\".format(keys_not_in_vars)\n-                )\n-            keys_missing_from_data = var_keys - data_keys\n-            if keys_missing_from_data:\n-                raise ValueError(\n-                    \"Data must contain all variables in original \"\n-                    \"dataset. Data is missing {}\".format(keys_missing_from_data)\n-                )\n-            variables = {\n-                k: v.copy(deep=deep, data=data.get(k))\n-                for k, v in self._variables.items()\n-            }\n+        try:\n+            return self._all_compat(other, \"broadcast_equals\")\n+        except (TypeError, AttributeError):\n+            return False\n+\n+    def equals(self, other: \"Dataset\") -> bool:\n+        \"\"\"Two Datasets are equal if they have matching variables and\n+        coordinates, all of which are equal.\n+\n+        Datasets can still be equal (like pandas objects) if they have NaN\n+        values in the same locations.\n+\n+        This method is necessary because `v1 == v2` for ``Dataset``\n+        does element-wise comparisons (like numpy.ndarrays).\n+\n+        See Also\n+        --------\n+        Dataset.broadcast_equals\n+        Dataset.identical\n+        \"\"\"\n+        try:\n+            return self._all_compat(other, \"equals\")\n+        except (TypeError, AttributeError):\n+            return False\n \n-        attrs = copy.deepcopy(self._attrs) if deep else copy.copy(self._attrs)\n+    def identical(self, other: \"Dataset\") -> bool:\n+        \"\"\"Like equals, but also checks all dataset attributes and the\n+        attributes on all variables and coordinates.\n \n-        return self._replace(variables, attrs=attrs)\n+        See Also\n+        --------\n+        Dataset.broadcast_equals\n+        Dataset.equals\n+        \"\"\"\n+        try:\n+            return utils.dict_equiv(self.attrs, other.attrs) and self._all_compat(\n+                other, \"identical\"\n+            )\n+        except (TypeError, AttributeError):\n+            return False\n \n     @property\n-    def _level_coords(self) -> Dict[str, Hashable]:\n-        \"\"\"Return a mapping of all MultiIndex levels and their corresponding\n-        coordinate name.\n+    def indexes(self) -> Indexes:\n+        \"\"\"Mapping of pandas.Index objects used for label based indexing\"\"\"\n+        if self._indexes is None:\n+            self._indexes = default_indexes(self._variables, self._dims)\n+        return Indexes(self._indexes)\n+\n+    @property\n+    def coords(self) -> DatasetCoordinates:\n+        \"\"\"Dictionary of xarray.DataArray objects corresponding to coordinate\n+        variables\n         \"\"\"\n-        level_coords: Dict[str, Hashable] = {}\n-        for name, index in self.indexes.items():\n-            if isinstance(index, pd.MultiIndex):\n-                level_names = index.names\n-                (dim,) = self.variables[name].dims\n-                level_coords.update({lname: dim for lname in level_names})\n-        return level_coords\n-\n-    def _copy_listed(self, names: Iterable[Hashable]) -> \"Dataset\":\n-        \"\"\"Create a new Dataset with the listed variables from this dataset and\n-        the all relevant coordinates. Skips all validation.\n+        return DatasetCoordinates(self)\n+\n+    @property\n+    def data_vars(self) -> DataVariables:\n+        \"\"\"Dictionary of DataArray objects corresponding to data variables\"\"\"\n+        return DataVariables(self)\n+\n+    def set_coords(self, names: \"Union[Hashable, Iterable[Hashable]]\") -> \"Dataset\":\n+        \"\"\"Given names of one or more variables, set them as coordinates\n+\n+        Parameters\n+        ----------\n+        names : hashable or iterable of hashable\n+            Name(s) of variables in this dataset to convert into coordinates.\n+\n+        Returns\n+        -------\n+        Dataset\n+\n+        See also\n+        --------\n+        Dataset.swap_dims\n         \"\"\"\n-        variables: Dict[Hashable, Variable] = {}\n-        coord_names = set()\n-        indexes: Dict[Hashable, pd.Index] = {}\n+        # TODO: allow inserting new coordinates with this method, like\n+        # DataFrame.set_index?\n+        # nb. check in self._variables, not self.data_vars to insure that the\n+        # operation is idempotent\n+        if isinstance(names, str) or not isinstance(names, Iterable):\n+            names = [names]\n+        else:\n+            names = list(names)\n+        self._assert_all_in_dataset(names)\n+        obj = self.copy()\n+        obj._coord_names.update(names)\n+        return obj\n \n-        for name in names:\n-            try:\n-                variables[name] = self._variables[name]\n-            except KeyError:\n-                ref_name, var_name, var = _get_virtual_variable(\n-                    self._variables, name, self._level_coords, self.dims\n+    def reset_coords(\n+        self,\n+        names: \"Union[Hashable, Iterable[Hashable], None]\" = None,\n+        drop: bool = False,\n+    ) -> \"Dataset\":\n+        \"\"\"Given names of coordinates, reset them to become variables\n+\n+        Parameters\n+        ----------\n+        names : hashable or iterable of hashable, optional\n+            Name(s) of non-index coordinates in this dataset to reset into\n+            variables. By default, all non-index coordinates are reset.\n+        drop : bool, optional\n+            If True, remove coordinates instead of converting them into\n+            variables.\n+\n+        Returns\n+        -------\n+        Dataset\n+        \"\"\"\n+        if names is None:\n+            names = self._coord_names - set(self.dims)\n+        else:\n+            if isinstance(names, str) or not isinstance(names, Iterable):\n+                names = [names]\n+            else:\n+                names = list(names)\n+            self._assert_all_in_dataset(names)\n+            bad_coords = set(names) & set(self.dims)\n+            if bad_coords:\n+                raise ValueError(\n+                    \"cannot remove index coordinates with reset_coords: %s\" % bad_coords\n                 )\n-                variables[var_name] = var\n-                if ref_name in self._coord_names or ref_name in self.dims:\n-                    coord_names.add(var_name)\n-                if (var_name,) == var.dims:\n-                    indexes[var_name] = var.to_index()\n+        obj = self.copy()\n+        obj._coord_names.difference_update(names)\n+        if drop:\n+            for name in names:\n+                del obj._variables[name]\n+        return obj\n \n-        needed_dims: Set[Hashable] = set()\n-        for v in variables.values():\n-            needed_dims.update(v.dims)\n+    def dump_to_store(self, store, **kwargs) -> None:\n+        \"\"\"Store dataset contents to a backends.*DataStore object.\"\"\"\n+        from ..backends.api import dump_to_store\n \n-        dims = {k: self.dims[k] for k in needed_dims}\n+        # TODO: rename and/or cleanup this method to make it more consistent\n+        # with to_netcdf()\n+        dump_to_store(self, store, **kwargs)\n \n-        # preserves ordering of coordinates\n-        for k in self._variables:\n-            if k not in self._coord_names:\n-                continue\n+    def to_netcdf(\n+        self,\n+        path=None,\n+        mode: str = \"w\",\n+        format: str = None,\n+        group: str = None,\n+        engine: str = None,\n+        encoding: Mapping = None,\n+        unlimited_dims: Iterable[Hashable] = None,\n+        compute: bool = True,\n+        invalid_netcdf: bool = False,\n+    ) -> Union[bytes, \"Delayed\", None]:\n+        \"\"\"Write dataset contents to a netCDF file.\n \n-            if set(self.variables[k].dims) <= needed_dims:\n-                variables[k] = self._variables[k]\n-                coord_names.add(k)\n-                if k in self.indexes:\n-                    indexes[k] = self.indexes[k]\n+        Parameters\n+        ----------\n+        path : str, Path or file-like, optional\n+            Path to which to save this dataset. File-like objects are only\n+            supported by the scipy engine. If no path is provided, this\n+            function returns the resulting netCDF file as bytes; in this case,\n+            we need to use scipy, which does not support netCDF version 4 (the\n+            default format becomes NETCDF3_64BIT).\n+        mode : {\"w\", \"a\"}, default: \"w\"\n+            Write ('w') or append ('a') mode. If mode='w', any existing file at\n+            this location will be overwritten. If mode='a', existing variables\n+            will be overwritten.\n+        format : {\"NETCDF4\", \"NETCDF4_CLASSIC\", \"NETCDF3_64BIT\", \\\n+                  \"NETCDF3_CLASSIC\"}, optional\n+            File format for the resulting netCDF file:\n \n-        return self._replace(variables, coord_names, dims, indexes=indexes)\n+            * NETCDF4: Data is stored in an HDF5 file, using netCDF4 API\n+              features.\n+            * NETCDF4_CLASSIC: Data is stored in an HDF5 file, using only\n+              netCDF 3 compatible API features.\n+            * NETCDF3_64BIT: 64-bit offset version of the netCDF 3 file format,\n+              which fully supports 2+ GB files, but is only compatible with\n+              clients linked against netCDF version 3.6.0 or later.\n+            * NETCDF3_CLASSIC: The classic netCDF 3 file format. It does not\n+              handle 2+ GB files very well.\n \n-    def _construct_dataarray(self, name: Hashable) -> \"DataArray\":\n-        \"\"\"Construct a DataArray by indexing this dataset\"\"\"\n-        from .dataarray import DataArray\n+            All formats are supported by the netCDF4-python library.\n+            scipy.io.netcdf only supports the last two formats.\n \n-        try:\n-            variable = self._variables[name]\n-        except KeyError:\n-            _, name, variable = _get_virtual_variable(\n-                self._variables, name, self._level_coords, self.dims\n-            )\n+            The default format is NETCDF4 if you are saving a file to disk and\n+            have the netCDF4-python library available. Otherwise, xarray falls\n+            back to using scipy to write netCDF files and defaults to the\n+            NETCDF3_64BIT format (scipy does not support netCDF4).\n+        group : str, optional\n+            Path to the netCDF4 group in the given file to open (only works for\n+            format='NETCDF4'). The group(s) will be created if necessary.\n+        engine : {\"netcdf4\", \"scipy\", \"h5netcdf\"}, optional\n+            Engine to use when writing netCDF files. If not provided, the\n+            default engine is chosen based on available dependencies, with a\n+            preference for 'netcdf4' if writing to a file on disk.\n+        encoding : dict, optional\n+            Nested dictionary with variable names as keys and dictionaries of\n+            variable specific encodings as values, e.g.,\n+            ``{\"my_variable\": {\"dtype\": \"int16\", \"scale_factor\": 0.1,\n+            \"zlib\": True}, ...}``\n \n-        needed_dims = set(variable.dims)\n+            The `h5netcdf` engine supports both the NetCDF4-style compression\n+            encoding parameters ``{\"zlib\": True, \"complevel\": 9}`` and the h5py\n+            ones ``{\"compression\": \"gzip\", \"compression_opts\": 9}``.\n+            This allows using any compression plugin installed in the HDF5\n+            library, e.g. LZF.\n \n-        coords: Dict[Hashable, Variable] = {}\n-        # preserve ordering\n-        for k in self._variables:\n-            if k in self._coord_names and set(self.variables[k].dims) <= needed_dims:\n-                coords[k] = self.variables[k]\n+        unlimited_dims : iterable of hashable, optional\n+            Dimension(s) that should be serialized as unlimited dimensions.\n+            By default, no dimensions are treated as unlimited dimensions.\n+            Note that unlimited_dims may also be set via\n+            ``dataset.encoding[\"unlimited_dims\"]``.\n+        compute: bool, default: True\n+            If true compute immediately, otherwise return a\n+            ``dask.delayed.Delayed`` object that can be computed later.\n+        invalid_netcdf: bool, default: False\n+            Only valid along with ``engine=\"h5netcdf\"``. If True, allow writing\n+            hdf5 files which are invalid netcdf as described in\n+            https://github.com/shoyer/h5netcdf.\n+        \"\"\"\n+        if encoding is None:\n+            encoding = {}\n+        from ..backends.api import to_netcdf\n \n-        if self._indexes is None:\n-            indexes = None\n-        else:\n-            indexes = {k: v for k, v in self._indexes.items() if k in coords}\n+        return to_netcdf(\n+            self,\n+            path,\n+            mode,\n+            format=format,\n+            group=group,\n+            engine=engine,\n+            encoding=encoding,\n+            unlimited_dims=unlimited_dims,\n+            compute=compute,\n+            invalid_netcdf=invalid_netcdf,\n+        )\n+\n+    def to_zarr(\n+        self,\n+        store: Union[MutableMapping, str, Path] = None,\n+        chunk_store: Union[MutableMapping, str, Path] = None,\n+        mode: str = None,\n+        synchronizer=None,\n+        group: str = None,\n+        encoding: Mapping = None,\n+        compute: bool = True,\n+        consolidated: bool = False,\n+        append_dim: Hashable = None,\n+        region: Mapping[str, slice] = None,\n+    ) -> \"ZarrStore\":\n+        \"\"\"Write dataset contents to a zarr group.\n+\n+        .. note:: Experimental\n+                  The Zarr backend is new and experimental. Please report any\n+                  unexpected behavior via github issues.\n+\n+        Parameters\n+        ----------\n+        store : MutableMapping, str or Path, optional\n+            Store or path to directory in file system.\n+        chunk_store : MutableMapping, str or Path, optional\n+            Store or path to directory in file system only for Zarr array chunks.\n+            Requires zarr-python v2.4.0 or later.\n+        mode : {\"w\", \"w-\", \"a\", None}, optional\n+            Persistence mode: \"w\" means create (overwrite if exists);\n+            \"w-\" means create (fail if exists);\n+            \"a\" means override existing variables (create if does not exist).\n+            If ``append_dim`` is set, ``mode`` can be omitted as it is\n+            internally set to ``\"a\"``. Otherwise, ``mode`` will default to\n+            `w-` if not set.\n+        synchronizer : object, optional\n+            Zarr array synchronizer.\n+        group : str, optional\n+            Group path. (a.k.a. `path` in zarr terminology.)\n+        encoding : dict, optional\n+            Nested dictionary with variable names as keys and dictionaries of\n+            variable specific encodings as values, e.g.,\n+            ``{\"my_variable\": {\"dtype\": \"int16\", \"scale_factor\": 0.1,}, ...}``\n+        compute: bool, optional\n+            If True write array data immediately, otherwise return a\n+            ``dask.delayed.Delayed`` object that can be computed to write\n+            array data later. Metadata is always updated eagerly.\n+        consolidated: bool, optional\n+            If True, apply zarr's `consolidate_metadata` function to the store\n+            after writing metadata.\n+        append_dim: hashable, optional\n+            If set, the dimension along which the data will be appended. All\n+            other dimensions on overriden variables must remain the same size.\n+        region: dict, optional\n+            Optional mapping from dimension names to integer slices along\n+            dataset dimensions to indicate the region of existing zarr array(s)\n+            in which to write this dataset's data. For example,\n+            ``{'x': slice(0, 1000), 'y': slice(10000, 11000)}`` would indicate\n+            that values should be written to the region ``0:1000`` along ``x``\n+            and ``10000:11000`` along ``y``.\n+\n+            Two restrictions apply to the use of ``region``:\n \n-        return DataArray(variable, coords, name=name, indexes=indexes, fastpath=True)\n+            - If ``region`` is set, _all_ variables in a dataset must have at\n+              least one dimension in common with the region. Other variables\n+              should be written in a separate call to ``to_zarr()``.\n+            - Dimensions cannot be included in both ``region`` and\n+              ``append_dim`` at the same time. To create empty arrays to fill\n+              in with ``region``, use a separate call to ``to_zarr()`` with\n+              ``compute=False``. See \"Appending to existing Zarr stores\" in\n+              the reference documentation for full details.\n+\n+        References\n+        ----------\n+        https://zarr.readthedocs.io/\n+\n+        Notes\n+        -----\n+        Zarr chunking behavior:\n+            If chunks are found in the encoding argument or attribute\n+            corresponding to any DataArray, those chunks are used.\n+            If a DataArray is a dask array, it is written with those chunks.\n+            If not other chunks are found, Zarr uses its own heuristics to\n+            choose automatic chunk sizes.\n+        \"\"\"\n+        from ..backends.api import to_zarr\n+\n+        if encoding is None:\n+            encoding = {}\n+\n+        return to_zarr(\n+            self,\n+            store=store,\n+            chunk_store=chunk_store,\n+            mode=mode,\n+            synchronizer=synchronizer,\n+            group=group,\n+            encoding=encoding,\n+            compute=compute,\n+            consolidated=consolidated,\n+            append_dim=append_dim,\n+            region=region,\n+        )\n \n     def __copy__(self) -> \"Dataset\":\n         return self.copy(deep=False)\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "xarray/core/dataset.py"
  ],
  "repo": "pydata/xarray",
  "base_commit": "a2b1712afd957deaf189c9b1a04e469596d853c9",
  "patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -2247,6 +2247,28 @@ def drop_sel(\n         ds = self._to_temp_dataset().drop_sel(labels, errors=errors)\n         return self._from_temp_dataset(ds)\n \n+    def drop_isel(self, indexers=None, **indexers_kwargs):\n+        \"\"\"Drop index positions from this DataArray.\n+\n+        Parameters\n+        ----------\n+        indexers : mapping of hashable to Any\n+            Index locations to drop\n+        **indexers_kwargs : {dim: position, ...}, optional\n+            The keyword arguments form of ``dim`` and ``positions``\n+\n+        Returns\n+        -------\n+        dropped : DataArray\n+\n+        Raises\n+        ------\n+        IndexError\n+        \"\"\"\n+        dataset = self._to_temp_dataset()\n+        dataset = dataset.drop_isel(indexers=indexers, **indexers_kwargs)\n+        return self._from_temp_dataset(dataset)\n+\n     def dropna(\n         self, dim: Hashable, how: str = \"any\", thresh: int = None\n     ) -> \"DataArray\":\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -4053,13 +4053,78 @@ def drop_sel(self, labels=None, *, errors=\"raise\", **labels_kwargs):\n                 labels_for_dim = [labels_for_dim]\n             labels_for_dim = np.asarray(labels_for_dim)\n             try:\n-                index = self.indexes[dim]\n+                index = self.get_index(dim)\n             except KeyError:\n                 raise ValueError(\"dimension %r does not have coordinate labels\" % dim)\n             new_index = index.drop(labels_for_dim, errors=errors)\n             ds = ds.loc[{dim: new_index}]\n         return ds\n \n+    def drop_isel(self, indexers=None, **indexers_kwargs):\n+        \"\"\"Drop index positions from this Dataset.\n+\n+        Parameters\n+        ----------\n+        indexers : mapping of hashable to Any\n+            Index locations to drop\n+        **indexers_kwargs : {dim: position, ...}, optional\n+            The keyword arguments form of ``dim`` and ``positions``\n+\n+        Returns\n+        -------\n+        dropped : Dataset\n+\n+        Raises\n+        ------\n+        IndexError\n+\n+        Examples\n+        --------\n+        >>> data = np.arange(6).reshape(2, 3)\n+        >>> labels = [\"a\", \"b\", \"c\"]\n+        >>> ds = xr.Dataset({\"A\": ([\"x\", \"y\"], data), \"y\": labels})\n+        >>> ds\n+        <xarray.Dataset>\n+        Dimensions:  (x: 2, y: 3)\n+        Coordinates:\n+          * y        (y) <U1 'a' 'b' 'c'\n+        Dimensions without coordinates: x\n+        Data variables:\n+            A        (x, y) int64 0 1 2 3 4 5\n+        >>> ds.drop_isel(y=[0, 2])\n+        <xarray.Dataset>\n+        Dimensions:  (x: 2, y: 1)\n+        Coordinates:\n+          * y        (y) <U1 'b'\n+        Dimensions without coordinates: x\n+        Data variables:\n+            A        (x, y) int64 1 4\n+        >>> ds.drop_isel(y=1)\n+        <xarray.Dataset>\n+        Dimensions:  (x: 2, y: 2)\n+        Coordinates:\n+          * y        (y) <U1 'a' 'c'\n+        Dimensions without coordinates: x\n+        Data variables:\n+            A        (x, y) int64 0 2 3 5\n+        \"\"\"\n+\n+        indexers = either_dict_or_kwargs(indexers, indexers_kwargs, \"drop\")\n+\n+        ds = self\n+        dimension_index = {}\n+        for dim, pos_for_dim in indexers.items():\n+            # Don't cast to set, as it would harm performance when labels\n+            # is a large numpy array\n+            if utils.is_scalar(pos_for_dim):\n+                pos_for_dim = [pos_for_dim]\n+            pos_for_dim = np.asarray(pos_for_dim)\n+            index = self.get_index(dim)\n+            new_index = index.delete(pos_for_dim)\n+            dimension_index[dim] = new_index\n+        ds = ds.loc[dimension_index]\n+        return ds\n+\n     def drop_dims(\n         self, drop_dims: Union[Hashable, Iterable[Hashable]], *, errors: str = \"raise\"\n     ) -> \"Dataset\":\n",
  "test_patch": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2327,6 +2327,12 @@ def test_drop_index_labels(self):\n         with pytest.warns(DeprecationWarning):\n             arr.drop([0, 1, 3], dim=\"y\", errors=\"ignore\")\n \n+    def test_drop_index_positions(self):\n+        arr = DataArray(np.random.randn(2, 3), dims=[\"x\", \"y\"])\n+        actual = arr.drop_sel(y=[0, 1])\n+        expected = arr[:, 2:]\n+        assert_identical(actual, expected)\n+\n     def test_dropna(self):\n         x = np.random.randn(4, 4)\n         x[::2, 0] = np.nan\ndiff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2371,8 +2371,12 @@ def test_drop_index_labels(self):\n             data.drop(DataArray([\"a\", \"b\", \"c\"]), dim=\"x\", errors=\"ignore\")\n         assert_identical(expected, actual)\n \n-        with raises_regex(ValueError, \"does not have coordinate labels\"):\n-            data.drop_sel(y=1)\n+        actual = data.drop_sel(y=[1])\n+        expected = data.isel(y=[0, 2])\n+        assert_identical(expected, actual)\n+\n+        with raises_regex(KeyError, \"not found in axis\"):\n+            data.drop_sel(x=0)\n \n     def test_drop_labels_by_keyword(self):\n         data = Dataset(\n@@ -2410,6 +2414,34 @@ def test_drop_labels_by_keyword(self):\n         with pytest.raises(ValueError):\n             data.drop(dim=\"x\", x=\"a\")\n \n+    def test_drop_labels_by_position(self):\n+        data = Dataset(\n+            {\"A\": ([\"x\", \"y\"], np.random.randn(2, 6)), \"x\": [\"a\", \"b\"], \"y\": range(6)}\n+        )\n+        # Basic functionality.\n+        assert len(data.coords[\"x\"]) == 2\n+\n+        actual = data.drop_isel(x=0)\n+        expected = data.drop_sel(x=\"a\")\n+        assert_identical(expected, actual)\n+\n+        actual = data.drop_isel(x=[0])\n+        expected = data.drop_sel(x=[\"a\"])\n+        assert_identical(expected, actual)\n+\n+        actual = data.drop_isel(x=[0, 1])\n+        expected = data.drop_sel(x=[\"a\", \"b\"])\n+        assert_identical(expected, actual)\n+        assert actual.coords[\"x\"].size == 0\n+\n+        actual = data.drop_isel(x=[0, 1], y=range(0, 6, 2))\n+        expected = data.drop_sel(x=[\"a\", \"b\"], y=range(0, 6, 2))\n+        assert_identical(expected, actual)\n+        assert actual.coords[\"x\"].size == 0\n+\n+        with pytest.raises(KeyError):\n+            data.drop_isel(z=1)\n+\n     def test_drop_dims(self):\n         data = xr.Dataset(\n             {\n",
  "problem_statement": "drop_sel indices in dimension that doesn't have coordinates?\n<!-- Please do a quick search of existing issues to make sure that this has not been asked before. -->\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nI am trying to drop particular indices from a dimension that doesn't have coordinates.\r\n\r\nFollowing: [drop_sel() documentation](http://xarray.pydata.org/en/stable/generated/xarray.Dataset.drop_sel.html#xarray.Dataset.drop_sel),\r\nbut leaving out the coordinate labels:\r\n```python\r\ndata = np.random.randn(2, 3)\r\nds = xr.Dataset({\"A\": ([\"x\", \"y\"], data)})\r\nds.drop_sel(y=[1])\r\n```\r\ngives me an error.\r\n\r\n**Describe the solution you'd like**\r\n\r\nI would think `drop_isel` should exist and work in analogy to `drop_sel` as `isel` does to `sel`.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAs far as I know, I could either create coordinates especially to in order to drop, or rebuild a new dataset. Both are not congenial. (I'd be grateful to know if there is actually a straightforward way to do this I've overlooked.\r\n\r\n\n",
  "hints_text": "I don't know of an easy way (which does not mean that there is none). `drop_sel` could be adjusted to work with _dimensions without coordinates_ by replacing\r\n\r\nhttps://github.com/pydata/xarray/blob/ff6b1f542e52dc330e294fd367f846e02c2955a2/xarray/core/dataset.py#L4038\r\n\r\nby `index = self.get_index(dim)`. That would then be analog to `sel`. I think `drop_isel` would also be a welcome addition.\nCan I work on this?\nSure. PRs are always welcome! ",
  "created_at": "2021-01-17T12:08:18Z",
  "version": "0.12",
  "FAIL_TO_PASS": "[\"xarray/tests/test_dataarray.py::TestDataArray::test_drop_index_positions\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_position\"]",
  "PASS_TO_PASS": "[\"xarray/tests/test_dataarray.py::TestDataArray::test__title_for_slice\", \"xarray/tests/test_dataarray.py::TestDataArray::test__title_for_slice_truncate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_copy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_exclude\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_mixed_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_override\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_override_error[darrays0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_override_error[darrays1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_str_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_without_indexes_errors\", \"xarray/tests/test_dataarray.py::TestDataArray::test_align_without_indexes_exclude\", \"xarray/tests/test_dataarray.py::TestDataArray::test_array_interface\", \"xarray/tests/test_dataarray.py::TestDataArray::test_assign_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_assign_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_astype_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_astype_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_astype_order\", \"xarray/tests/test_dataarray.py::TestDataArray::test_attr_sources_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_binary_op_join_setting\", \"xarray/tests/test_dataarray.py::TestDataArray::test_binary_op_propagate_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays_exclude\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays_misaligned\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_arrays_nocopy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_coordinates\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_equals\", \"xarray/tests/test_dataarray.py::TestDataArray::test_broadcast_like\", \"xarray/tests/test_dataarray.py::TestDataArray::test_combine_first\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_from_0d\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_from_self_described\", \"xarray/tests/test_dataarray.py::TestDataArray::test_constructor_invalid\", \"xarray/tests/test_dataarray.py::TestDataArray::test_contains\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coord_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coordinate_diff\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_delitem_delete_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_non_string\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_replacement_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_coords_to_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_copy_with_data\", \"xarray/tests/test_dataarray.py::TestDataArray::test_cumops\", \"xarray/tests/test_dataarray.py::TestDataArray::test_data_property\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dataarray_diff_n1\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dataset_getitem\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dataset_math\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dot\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dot_align_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_coordinates\", \"xarray/tests/test_dataarray.py::TestDataArray::test_drop_index_labels\", \"xarray/tests/test_dataarray.py::TestDataArray::test_dropna\", \"xarray/tests/test_dataarray.py::TestDataArray::test_empty_dataarrays_return_empty_result\", \"xarray/tests/test_dataarray.py::TestDataArray::test_encoding\", \"xarray/tests/test_dataarray.py::TestDataArray::test_equals_and_identical\", \"xarray/tests/test_dataarray.py::TestDataArray::test_equals_failures\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims_error\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims_with_greater_dim_size\", \"xarray/tests/test_dataarray.py::TestDataArray::test_expand_dims_with_scalar_coordinate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_fillna\", \"xarray/tests/test_dataarray.py::TestDataArray::test_full_like\", \"xarray/tests/test_dataarray.py::TestDataArray::test_get_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_get_index_size_zero\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_dict\", \"xarray/tests/test_dataarray.py::TestDataArray::test_getitem_empty_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_bins\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_bins_empty\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_bins_multidim\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_count\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_first_and_last\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_iter\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_map_center\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_map_changes_metadata\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_map_ndarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_multidim\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_multidim_map\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_properties\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_restore_coord_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_restore_dim_order\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_sum\", \"xarray/tests/test_dataarray.py::TestDataArray::test_groupby_sum_default\", \"xarray/tests/test_dataarray.py::TestDataArray::test_head\", \"xarray/tests/test_dataarray.py::TestDataArray::test_index_math\", \"xarray/tests/test_dataarray.py::TestDataArray::test_indexes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_init_value\", \"xarray/tests/test_dataarray.py::TestDataArray::test_inplace_math_automatic_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_inplace_math_basics\", \"xarray/tests/test_dataarray.py::TestDataArray::test_is_null\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel_drop\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel_fancy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_isel_types\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_assign\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_assign_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_loc_dim_name_collision_with_sel_params\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math_automatic_alignment\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math_name\", \"xarray/tests/test_dataarray.py::TestDataArray::test_math_with_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_matmul\", \"xarray/tests/test_dataarray.py::TestDataArray::test_matmul_align_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_name\", \"xarray/tests/test_dataarray.py::TestDataArray::test_non_overlapping_dataarrays_return_empty_result\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_constant\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[3]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[None]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[end_values2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_linear_ramp[end_values3]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[None-reflect]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[None-symmetric]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[even-reflect]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[even-symmetric]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[odd-reflect]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_reflect[odd-symmetric]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[3-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[None-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length2-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-maximum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-mean]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-median]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pad_stat_length[stat_length3-minimum]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_pickle\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[<lambda>0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[<lambda>1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[abs]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_propagate_attrs[absolute]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_properties\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[0-x-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[None-None-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis2-dim2-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-0.25-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-0.25-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q1-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q1-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q2-False]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_quantile[axis3-dim3-q2-True]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_real_and_imag\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_dtype\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_keep_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_keepdims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reduce_out\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[2.0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[fill_value0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_fill_value[fill_value3]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_like\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_like_no_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_method\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_regressions\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_str_dtype[bytes]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reindex_str_dtype[str]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_rename\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reorder_levels\", \"xarray/tests/test_dataarray.py::TestDataArray::test_repr\", \"xarray/tests/test_dataarray.py::TestDataArray::test_repr_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_repr_multiindex_long\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reset_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reset_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_reset_index_keep_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_roll_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_roll_coords_none\", \"xarray/tests/test_dataarray.py::TestDataArray::test_roll_no_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_dataarray_datetime_slice\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_invalid_slice\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_method\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sel_no_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_selection_multiindex\", \"xarray/tests/test_dataarray.py::TestDataArray::test_selection_multiindex_from_level\", \"xarray/tests/test_dataarray.py::TestDataArray::test_selection_multiindex_remove_unused\", \"xarray/tests/test_dataarray.py::TestDataArray::test_series_categorical_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_set_coords_update_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_set_index\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setattr_raises\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setitem\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setitem_dataarray\", \"xarray/tests/test_dataarray.py::TestDataArray::test_setitem_fancy\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int--5]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int-0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int-1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[2-int-2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float--5]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float-0]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float-1]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_shift[fill_value1-float-2]\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sizes\", \"xarray/tests/test_dataarray.py::TestDataArray::test_sortby\", \"xarray/tests/test_dataarray.py::TestDataArray::test_squeeze\", \"xarray/tests/test_dataarray.py::TestDataArray::test_squeeze_drop\", \"xarray/tests/test_dataarray.py::TestDataArray::test_stack_nonunique_consistency\", \"xarray/tests/test_dataarray.py::TestDataArray::test_stack_unstack_decreasing_coordinate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_struct_array_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_swap_dims\", \"xarray/tests/test_dataarray.py::TestDataArray::test_tail\", \"xarray/tests/test_dataarray.py::TestDataArray::test_thin\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict_with_nan_nat\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_dict_with_time_dim\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_empty_series\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_and_from_series\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dataset_whole\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_dict_with_numpy_attrs\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_masked_array\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_pandas\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_pandas_name_matches_coordinate\", \"xarray/tests/test_dataarray.py::TestDataArray::test_to_unstacked_dataset_raises_value_error\", \"xarray/tests/test_dataarray.py::TestDataArray::test_transpose\", \"xarray/tests/test_dataarray.py::TestDataArray::test_unstack_pandas_consistency\", \"xarray/tests/test_dataarray.py::TestDataArray::test_virtual_default_coords\", \"xarray/tests/test_dataarray.py::TestDataArray::test_virtual_time_components\", \"xarray/tests/test_dataarray.py::TestDataArray::test_where\", \"xarray/tests/test_dataarray.py::TestDataArray::test_where_lambda\", \"xarray/tests/test_dataarray.py::TestDataArray::test_where_string\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[x0-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[x1-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[x2-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[x3-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[x4-nan-nan-0]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax[x5-0-1-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[x0-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[x1-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[x2-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[x3-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[x4-nan-nan-0]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmax_dim[x5-0-1-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[x0-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[x1-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[x2-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[x3-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[x4-nan-nan-0]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin[x5-0-1-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[x0-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[x1-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[x2-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[x3-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[x4-nan-nan-0]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_argmin_dim[x5-0-1-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-x0-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-x1-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-x2-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-x3-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-x4-nan-nan-0]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmax[False-x5-0-1-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-x0-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-x1-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-x2-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-x3-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-x4-nan-nan-0]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_idxmin[False-x5-0-1-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[x0-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[x1-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[x2-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[x3-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[x4-nan-nan-0]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_max[x5-0-1-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[x0-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[x1-5-2-None]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[x2-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[x3-5-2-1]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[x4-nan-nan-0]\", \"xarray/tests/test_dataarray.py::TestReduce1D::test_min[x5-0-1-None]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[x0-minindex0-maxindex0-nanindex0]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[x1-minindex1-maxindex1-nanindex1]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[x2-minindex2-maxindex2-nanindex2]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax[x3-minindex3-maxindex3-nanindex3]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[x0-minindex0-maxindex0-nanindex0]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[x1-minindex1-maxindex1-nanindex1]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[x2-minindex2-maxindex2-nanindex2]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmax_dim[x3-minindex3-maxindex3-nanindex3]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[x0-minindex0-maxindex0-nanindex0]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[x1-minindex1-maxindex1-nanindex1]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[x2-minindex2-maxindex2-nanindex2]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin[x3-minindex3-maxindex3-nanindex3]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[x0-minindex0-maxindex0-nanindex0]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[x1-minindex1-maxindex1-nanindex1]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[x2-minindex2-maxindex2-nanindex2]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_argmin_dim[x3-minindex3-maxindex3-nanindex3]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[False-x0-minindex0-maxindex0-nanindex0]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[False-x1-minindex1-maxindex1-nanindex1]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[False-x2-minindex2-maxindex2-nanindex2]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmax[False-x3-minindex3-maxindex3-nanindex3]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[False-x0-minindex0-maxindex0-nanindex0]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[False-x1-minindex1-maxindex1-nanindex1]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[False-x2-minindex2-maxindex2-nanindex2]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_idxmin[False-x3-minindex3-maxindex3-nanindex3]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[x0-minindex0-maxindex0-nanindex0]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[x1-minindex1-maxindex1-nanindex1]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[x2-minindex2-maxindex2-nanindex2]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_max[x3-minindex3-maxindex3-nanindex3]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[x0-minindex0-maxindex0-nanindex0]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[x1-minindex1-maxindex1-nanindex1]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[x2-minindex2-maxindex2-nanindex2]\", \"xarray/tests/test_dataarray.py::TestReduce2D::test_min[x3-minindex3-maxindex3-nanindex3]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[x0-minindices_x0-minindices_y0-minindices_z0-minindices_xy0-minindices_xz0-minindices_yz0-minindices_xyz0-maxindices_x0-maxindices_y0-maxindices_z0-maxindices_xy0-maxindices_xz0-maxindices_yz0-maxindices_xyz0-nanindices_x0-nanindices_y0-nanindices_z0-nanindices_xy0-nanindices_xz0-nanindices_yz0-nanindices_xyz0]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[x1-minindices_x1-minindices_y1-minindices_z1-minindices_xy1-minindices_xz1-minindices_yz1-minindices_xyz1-maxindices_x1-maxindices_y1-maxindices_z1-maxindices_xy1-maxindices_xz1-maxindices_yz1-maxindices_xyz1-nanindices_x1-nanindices_y1-nanindices_z1-nanindices_xy1-nanindices_xz1-nanindices_yz1-nanindices_xyz1]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[x2-minindices_x2-minindices_y2-minindices_z2-minindices_xy2-minindices_xz2-minindices_yz2-minindices_xyz2-maxindices_x2-maxindices_y2-maxindices_z2-maxindices_xy2-maxindices_xz2-maxindices_yz2-maxindices_xyz2-nanindices_x2-nanindices_y2-nanindices_z2-nanindices_xy2-nanindices_xz2-nanindices_yz2-nanindices_xyz2]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmax_dim[x3-minindices_x3-minindices_y3-minindices_z3-minindices_xy3-minindices_xz3-minindices_yz3-minindices_xyz3-maxindices_x3-maxindices_y3-maxindices_z3-maxindices_xy3-maxindices_xz3-maxindices_yz3-maxindices_xyz3-nanindices_x3-nanindices_y3-nanindices_z3-nanindices_xy3-nanindices_xz3-nanindices_yz3-nanindices_xyz3]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[x0-minindices_x0-minindices_y0-minindices_z0-minindices_xy0-minindices_xz0-minindices_yz0-minindices_xyz0-maxindices_x0-maxindices_y0-maxindices_z0-maxindices_xy0-maxindices_xz0-maxindices_yz0-maxindices_xyz0-nanindices_x0-nanindices_y0-nanindices_z0-nanindices_xy0-nanindices_xz0-nanindices_yz0-nanindices_xyz0]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[x1-minindices_x1-minindices_y1-minindices_z1-minindices_xy1-minindices_xz1-minindices_yz1-minindices_xyz1-maxindices_x1-maxindices_y1-maxindices_z1-maxindices_xy1-maxindices_xz1-maxindices_yz1-maxindices_xyz1-nanindices_x1-nanindices_y1-nanindices_z1-nanindices_xy1-nanindices_xz1-nanindices_yz1-nanindices_xyz1]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[x2-minindices_x2-minindices_y2-minindices_z2-minindices_xy2-minindices_xz2-minindices_yz2-minindices_xyz2-maxindices_x2-maxindices_y2-maxindices_z2-maxindices_xy2-maxindices_xz2-maxindices_yz2-maxindices_xyz2-nanindices_x2-nanindices_y2-nanindices_z2-nanindices_xy2-nanindices_xz2-nanindices_yz2-nanindices_xyz2]\", \"xarray/tests/test_dataarray.py::TestReduce3D::test_argmin_dim[x3-minindices_x3-minindices_y3-minindices_z3-minindices_xy3-minindices_xz3-minindices_yz3-minindices_xyz3-maxindices_x3-maxindices_y3-maxindices_z3-maxindices_xy3-maxindices_xz3-maxindices_yz3-maxindices_xyz3-nanindices_x3-nanindices_y3-nanindices_z3-nanindices_xy3-nanindices_xz3-nanindices_yz3-nanindices_xyz3]\", \"xarray/tests/test_dataarray.py::test_coarsen_keep_attrs\", \"xarray/tests/test_dataarray.py::test_deepcopy_obj_array\", \"xarray/tests/test_dataarray.py::test_delete_coords\", \"xarray/tests/test_dataarray.py::test_isin[repeating_ints]\", \"xarray/tests/test_dataarray.py::test_name_in_masking\", \"xarray/tests/test_dataarray.py::test_ndrolling_construct[0.0-False]\", \"xarray/tests/test_dataarray.py::test_ndrolling_construct[0.0-True]\", \"xarray/tests/test_dataarray.py::test_ndrolling_construct[0.0-center2]\", \"xarray/tests/test_dataarray.py::test_ndrolling_construct[nan-False]\", \"xarray/tests/test_dataarray.py::test_ndrolling_construct[nan-True]\", \"xarray/tests/test_dataarray.py::test_ndrolling_construct[nan-center2]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[max-1-False-1]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[max-1-True-1]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[max-None-False-1]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[max-None-True-1]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[mean-1-False-1]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[mean-1-True-1]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[mean-None-False-1]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[mean-None-True-1]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[sum-1-False-1]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[sum-1-True-1]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[sum-None-False-1]\", \"xarray/tests/test_dataarray.py::test_ndrolling_reduce[sum-None-True-1]\", \"xarray/tests/test_dataarray.py::test_no_dict\", \"xarray/tests/test_dataarray.py::test_no_warning_for_all_nan\", \"xarray/tests/test_dataarray.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_dataarray.py::test_rolling_construct[1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_construct[1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_construct[2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_construct[2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_construct[3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_construct[3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_construct[4-False]\", \"xarray/tests/test_dataarray.py::test_rolling_construct[4-True]\", \"xarray/tests/test_dataarray.py::test_rolling_count_correct\", \"xarray/tests/test_dataarray.py::test_rolling_doc[1]\", \"xarray/tests/test_dataarray.py::test_rolling_iter[1]\", \"xarray/tests/test_dataarray.py::test_rolling_iter[2]\", \"xarray/tests/test_dataarray.py::test_rolling_keep_attrs[construct-argument2]\", \"xarray/tests/test_dataarray.py::test_rolling_keep_attrs[count-argument3]\", \"xarray/tests/test_dataarray.py::test_rolling_keep_attrs[mean-argument1]\", \"xarray/tests/test_dataarray.py::test_rolling_keep_attrs[reduce-argument0]\", \"xarray/tests/test_dataarray.py::test_rolling_keep_attrs_deprecated\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[1-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[1-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[1-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[1-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[1-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[1-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[1-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[1-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[2-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[2-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[2-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[2-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[2-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[2-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[2-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[2-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[3-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[3-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[3-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[3-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[3-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[3-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[3-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[3-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[4-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[4-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[4-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[4-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[4-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[4-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[4-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_pandas_compat[4-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_properties[1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-1-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-2-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-3-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[max-4-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-1-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-2-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-3-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[mean-4-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-1-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-2-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-3-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[std-4-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-1-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-2-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-3-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-1-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-1-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-1-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-1-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-2-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-2-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-2-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-2-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-3-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-3-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-3-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-3-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-None-False-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-None-False-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-None-True-1]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce[sum-4-None-True-2]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-1-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-1-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-1-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-1-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-1-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-1-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-1-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-1-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-2-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-2-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-2-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-2-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-2-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-2-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-2-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-2-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-3-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-3-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-3-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-3-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-3-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-3-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-3-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-3-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-4-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-4-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-4-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-4-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-4-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-4-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-4-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[max-4-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-1-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-1-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-1-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-1-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-1-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-1-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-1-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-1-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-2-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-2-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-2-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-2-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-2-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-2-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-2-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-2-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-3-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-3-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-3-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-3-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-3-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-3-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-3-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-3-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-4-1-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-4-1-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-4-2-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-4-2-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-4-3-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-4-3-True]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-4-None-False]\", \"xarray/tests/test_dataarray.py::test_rolling_reduce_nonnumeric[sum-4-None-True]\", \"xarray/tests/test_dataarray.py::test_rolling_repr[1]\", \"xarray/tests/test_dataarray.py::test_subclass_slots\", \"xarray/tests/test_dataarray.py::test_weakref\", \"xarray/tests/test_dataset.py::TestDataset::test_align\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exact\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_align_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_align_non_unique\", \"xarray/tests/test_dataset.py::TestDataset::test_align_override\", \"xarray/tests/test_dataset.py::TestDataset::test_align_str_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map\", \"xarray/tests/test_dataset.py::TestDataset::test_asarray\", \"xarray/tests/test_dataset.py::TestDataset::test_assign\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_astype_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_attr_access\", \"xarray/tests/test_dataset.py::TestDataset::test_attribute_access\", \"xarray/tests/test_dataset.py::TestDataset::test_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_like\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_index\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_combine_first\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_0d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_1d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_compat\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_deprecated\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_modify\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_set\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_copy\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_count\", \"xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_delitem\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_variables\", \"xarray/tests/test_dataset.py::TestDataset::test_dropna\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_failures\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_fillna\", \"xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_unsorted_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_full_like\", \"xarray/tests/test_dataset.py::TestDataset::test_get_index\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_iter\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_nan\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_order\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_returns_new_type\", \"xarray/tests/test_dataset.py::TestDataset::test_head\", \"xarray/tests/test_dataset.py::TestDataset::test_info\", \"xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion\", \"xarray/tests/test_dataset.py::TestDataset::test_isel\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_lazy_load\", \"xarray/tests/test_dataset.py::TestDataset::test_map\", \"xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_modify_inplace\", \"xarray/tests/test_dataset.py::TestDataset::test_pad\", \"xarray/tests/test_dataset.py::TestDataset::test_pickle\", \"xarray/tests/test_dataset.py::TestDataset::test_polyfit_output\", \"xarray/tests/test_dataset.py::TestDataset::test_polyfit_warnings\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>0]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>1]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[abs]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[absolute]\", \"xarray/tests/test_dataset.py::TestDataset::test_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]\", \"xarray/tests/test_dataset.py::TestDataset::test_real_and_imag\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_strings\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_method\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_warning\", \"xarray/tests/test_dataset.py::TestDataset::test_rename\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_old_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_reorder_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_repr\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_nep18\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_period_index\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_old_api\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords_none\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_multidim\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_set_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setattr_raises\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_sortby\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_stack\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow\", \"xarray/tests/test_dataset.py::TestDataset::test_swap_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_tail\", \"xarray/tests/test_dataset.py::TestDataset::test_thin\", \"xarray/tests/test_dataset.py::TestDataset::test_time_season\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_to_array\", \"xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_unary_ops\", \"xarray/tests/test_dataset.py::TestDataset::test_unicode_data\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value\", \"xarray/tests/test_dataset.py::TestDataset::test_update\", \"xarray/tests/test_dataset.py::TestDataset::test_update_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_update_index\", \"xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_variable_indexing\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time\", \"xarray/tests/test_dataset.py::TestDataset::test_where\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_where_other\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-False]\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-True]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-False]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-True]\", \"xarray/tests/test_dataset.py::test_coarsen_absent_dims_error[1]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-False]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-True]\", \"xarray/tests/test_dataset.py::test_coarsen_keep_attrs\", \"xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_deepcopy_obj_array\", \"xarray/tests/test_dataset.py::test_differentiate[1-False]\", \"xarray/tests/test_dataset.py::test_differentiate[1-True]\", \"xarray/tests/test_dataset.py::test_differentiate[2-False]\", \"xarray/tests/test_dataset.py::test_differentiate[2-True]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[False]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[True]\", \"xarray/tests/test_dataset.py::test_dir_expected_attrs[None]\", \"xarray/tests/test_dataset.py::test_dir_non_string[None]\", \"xarray/tests/test_dataset.py::test_dir_unicode[None]\", \"xarray/tests/test_dataset.py::test_error_message_on_set_supplied\", \"xarray/tests/test_dataset.py::test_integrate[False]\", \"xarray/tests/test_dataset.py::test_integrate[True]\", \"xarray/tests/test_dataset.py::test_isin[test_elements0]\", \"xarray/tests/test_dataset.py::test_isin[test_elements1]\", \"xarray/tests/test_dataset.py::test_isin[test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dataset\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-True-2]\", \"xarray/tests/test_dataset.py::test_no_dict\", \"xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[2]\", \"xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-True]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[construct-argument2]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[count-argument3]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[mean-argument1]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[reduce-argument0]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs_deprecated\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_properties[1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_subclass_slots\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-True]\", \"xarray/tests/test_dataset.py::test_weakref\"]",
  "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1",
  "patch_files": [
    "xarray/core/dataarray.py",
    "xarray/core/dataset.py"
  ],
  "test_patch_files": [
    "xarray/tests/test_dataarray.py",
    "xarray/tests/test_dataset.py"
  ],
  "patch_diff_details": {
    "xarray/core/dataarray.py": {
      "diffs": [
        {
          "start_line_old": 2250,
          "end_line_old": 2250,
          "file_pos": 1,
          "file_context_length": 36496,
          "closest_snippet_id": "/tmp/repos/xarray/xarray/core/dataarray.py_DataArray.drop_DataArray.drop.3.1",
          "closest_snippet_line_distance": 33,
          "pos": 6,
          "context_length": 2581
        }
      ]
    },
    "xarray/core/dataset.py": {
      "diffs": [
        {
          "start_line_old": 4056,
          "end_line_old": 4056,
          "file_pos": 3,
          "file_context_length": 100189,
          "closest_snippet_id": "/tmp/repos/xarray/xarray/core/dataset.py_copy__DATETIMEINDEX_COMPONENTS.1",
          "closest_snippet_line_distance": 3921,
          "pos": 23,
          "context_length": 23048
        }
      ]
    }
  },
  "vectors": 1041,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/xarray/xarray/core/dataarray.py_DataArray.drop_sel_DataArray.drop_sel.4.1",
      "distance": 0.9416773915290833,
      "file_path": "xarray/core/dataarray.py",
      "start_line": 2219,
      "end_line": 2248,
      "tokens": 238,
      "context_length": 238,
      "file_pos": 1
    },
    {
      "position": 2,
      "id": "/tmp/repos/xarray/xarray/core/utils.py_drop_dims_from_indexers_drop_dims_from_indexers.2.6.1",
      "distance": 0.9753623008728027,
      "file_path": "xarray/core/utils.py",
      "start_line": 809,
      "end_line": 854,
      "tokens": 290,
      "context_length": 528
    },
    {
      "position": 3,
      "id": "/tmp/repos/xarray/xarray/core/dataarray.py_DataArray.drop_DataArray.drop.3.1",
      "distance": 0.9883084297180176,
      "file_path": "xarray/core/dataarray.py",
      "start_line": 2199,
      "end_line": 2217,
      "tokens": 133,
      "context_length": 661,
      "file_pos": 2
    },
    {
      "position": 4,
      "id": "/tmp/repos/xarray/xarray/core/utils.py_drop_missing_dims_drop_missing_dims.2.7.1",
      "distance": 1.0302419662475586,
      "file_path": "xarray/core/utils.py",
      "start_line": 857,
      "end_line": 896,
      "tokens": 270,
      "context_length": 931
    },
    {
      "position": 5,
      "id": "/tmp/repos/xarray/xarray/core/dataset.py_Dataset.dropna_Dataset.interpolate_na",
      "distance": 1.046129822731018,
      "file_path": "xarray/core/dataset.py",
      "start_line": 4147,
      "end_line": 4424,
      "tokens": 1453,
      "context_length": 2384,
      "file_pos": 3
    },
    {
      "position": 6,
      "id": "/tmp/repos/xarray/xarray/core/dataarray.py_DataArray.dropna_DataArray.dropna.3.1",
      "distance": 1.0532710552215576,
      "file_path": "xarray/core/dataarray.py",
      "start_line": 2250,
      "end_line": 2272,
      "tokens": 197,
      "context_length": 2581,
      "file_pos": 3
    },
    {
      "position": 7,
      "id": "/tmp/repos/xarray/xarray/core/dataarray.py_DataArray.sel_DataArray.sel.3.1",
      "distance": 1.0602978467941284,
      "file_path": "xarray/core/dataarray.py",
      "start_line": 1125,
      "end_line": 1213,
      "tokens": 811,
      "context_length": 3392,
      "file_pos": 3
    },
    {
      "position": 8,
      "id": "/tmp/repos/xarray/xarray/core/dataset.py_Dataset.isel_Dataset.reindex.2.1",
      "distance": 1.0882408618927002,
      "file_path": "xarray/core/dataset.py",
      "start_line": 2036,
      "end_line": 2689,
      "tokens": 6104,
      "context_length": 9496,
      "file_pos": 3
    },
    {
      "position": 9,
      "id": "/tmp/repos/xarray/xarray/core/coordinates.py_DatasetCoordinates.__delitem___DatasetCoordinates._ipython_key_completions_.2.1",
      "distance": 1.101247787475586,
      "file_path": "xarray/core/coordinates.py",
      "start_line": 247,
      "end_line": 259,
      "tokens": 116,
      "context_length": 9612
    },
    {
      "position": 10,
      "id": "/tmp/repos/xarray/xarray/core/common.py_DataWithCoords.get_index_DataWithCoords._calc_assign_results.1.1",
      "distance": 1.1114925146102905,
      "file_path": "xarray/core/common.py",
      "start_line": 370,
      "end_line": 383,
      "tokens": 149,
      "context_length": 9761
    },
    {
      "position": 11,
      "id": "/tmp/repos/xarray/xarray/core/indexes.py_default_indexes_default_indexes.2.1",
      "distance": 1.1137783527374268,
      "file_path": "xarray/core/indexes.py",
      "start_line": 70,
      "end_line": 87,
      "tokens": 121,
      "context_length": 9882
    },
    {
      "position": 12,
      "id": "/tmp/repos/xarray/xarray/core/common.py_DataWithCoords.resample.2_DataWithCoords.resample.18.1",
      "distance": 1.1293134689331055,
      "file_path": "xarray/core/common.py",
      "start_line": 1095,
      "end_line": 1152,
      "tokens": 580,
      "context_length": 10462
    },
    {
      "position": 13,
      "id": "/tmp/repos/xarray/xarray/core/coordinates.py_DatasetCoordinates._update_coords_DatasetCoordinates._update_coords.self._data._indexes.1",
      "distance": 1.1324397325515747,
      "file_path": "xarray/core/coordinates.py",
      "start_line": 222,
      "end_line": 245,
      "tokens": 198,
      "context_length": 10660
    },
    {
      "position": 14,
      "id": "/tmp/repos/xarray/xarray/core/dataarray.py_DataArray.isel_DataArray.isel.9.1",
      "distance": 1.1327553987503052,
      "file_path": "xarray/core/dataarray.py",
      "start_line": 1062,
      "end_line": 1123,
      "tokens": 544,
      "context_length": 11204,
      "file_pos": 6
    },
    {
      "position": 15,
      "id": "/tmp/repos/xarray/xarray/core/common.py_DataWithCoords.where_DataWithCoords.where.1",
      "distance": 1.1407103538513184,
      "file_path": "xarray/core/common.py",
      "start_line": 1154,
      "end_line": 1230,
      "tokens": 845,
      "context_length": 12049
    },
    {
      "position": 16,
      "id": "/tmp/repos/xarray/xarray/core/common.py_DataWithCoords.where.align_DataWithCoords.close.self._file_obj.1",
      "distance": 1.1470779180526733,
      "file_path": "xarray/core/common.py",
      "start_line": 1231,
      "end_line": 1270,
      "tokens": 328,
      "context_length": 12377
    },
    {
      "position": 17,
      "id": "/tmp/repos/xarray/xarray/core/dataarray.py_DataArray.reset_index_DataArray.reset_index.3.1",
      "distance": 1.1620618104934692,
      "file_path": "xarray/core/dataarray.py",
      "start_line": 1864,
      "end_line": 1893,
      "tokens": 218,
      "context_length": 12595,
      "file_pos": 6
    },
    {
      "position": 18,
      "id": "/tmp/repos/xarray/xarray/core/combine.py_combine_by_coords.1_combine_by_coords.1",
      "distance": 1.1640255451202393,
      "file_path": "xarray/core/combine.py",
      "start_line": 552,
      "end_line": 750,
      "tokens": 2476,
      "context_length": 15071
    },
    {
      "position": 19,
      "id": "/tmp/repos/xarray/xarray/core/coordinates.py_DataArrayCoordinates.variables_DataArrayCoordinates._ipython_key_completions_.2.1",
      "distance": 1.174560785293579,
      "file_path": "xarray/core/coordinates.py",
      "start_line": 305,
      "end_line": 325,
      "tokens": 197,
      "context_length": 15268
    },
    {
      "position": 20,
      "id": "/tmp/repos/xarray/xarray/core/dataarray.py_DataArray.idxmin_DataArray.idxmin.2.1",
      "distance": 1.1852601766586304,
      "file_path": "xarray/core/dataarray.py",
      "start_line": 3858,
      "end_line": 3953,
      "tokens": 934,
      "context_length": 16202,
      "file_pos": 7
    },
    {
      "position": 21,
      "id": "/tmp/repos/xarray/xarray/core/indexing.py__masked_result_drop_slice__masked_result_drop_slice.6.1",
      "distance": 1.1857690811157227,
      "file_path": "xarray/core/indexing.py",
      "start_line": 1132,
      "end_line": 1152,
      "tokens": 146,
      "context_length": 16348
    },
    {
      "position": 22,
      "id": "/tmp/repos/xarray/xarray/core/dataset.py_copy__DATETIMEINDEX_COMPONENTS.1",
      "distance": 1.1873489618301392,
      "file_path": "xarray/core/dataset.py",
      "start_line": 1,
      "end_line": 135,
      "tokens": 643,
      "context_length": 16991,
      "file_pos": 8
    },
    {
      "position": 23,
      "id": "/tmp/repos/xarray/xarray/core/dataset.py_Dataset.set_index_Dataset.transpose.5.1",
      "distance": 1.1889095306396484,
      "file_path": "xarray/core/dataset.py",
      "start_line": 3386,
      "end_line": 4145,
      "tokens": 6057,
      "context_length": 23048,
      "file_pos": 8
    },
    {
      "position": 24,
      "id": "/tmp/repos/xarray/xarray/core/groupby.py_GroupBy._first_or_last_GroupBy.assign_coords.3.1",
      "distance": 1.1892915964126587,
      "file_path": "xarray/core/groupby.py",
      "start_line": 681,
      "end_line": 707,
      "tokens": 265,
      "context_length": 23313
    },
    {
      "position": 25,
      "id": "/tmp/repos/xarray/xarray/core/alignment.py_align.1_align.1",
      "distance": 1.192777156829834,
      "file_path": "xarray/core/alignment.py",
      "start_line": 82,
      "end_line": 271,
      "tokens": 1952,
      "context_length": 25265
    },
    {
      "position": 26,
      "id": "/tmp/repos/xarray/xarray/core/coordinates.py_DataArrayCoordinates._update_coords_DataArrayCoordinates._update_coords.self._data._indexes.1",
      "distance": 1.1950454711914062,
      "file_path": "xarray/core/coordinates.py",
      "start_line": 285,
      "end_line": 303,
      "tokens": 174,
      "context_length": 25439
    },
    {
      "position": 27,
      "id": "/tmp/repos/xarray/xarray/core/duck_array_ops.py_notnull_gradient.2.1",
      "distance": 1.1998686790466309,
      "file_path": "xarray/core/duck_array_ops.py",
      "start_line": 117,
      "end_line": 141,
      "tokens": 275,
      "context_length": 25714
    },
    {
      "position": 28,
      "id": "/tmp/repos/xarray/xarray/core/coordinates.py_Coordinates.to_index_Coordinates.to_index.3.3.4.1",
      "distance": 1.2029545307159424,
      "file_path": "xarray/core/coordinates.py",
      "start_line": 79,
      "end_line": 111,
      "tokens": 301,
      "context_length": 26015
    },
    {
      "position": 29,
      "id": "/tmp/repos/xarray/xarray/core/indexing.py_convert_label_indexer_convert_label_indexer.4.1",
      "distance": 1.2031311988830566,
      "file_path": "xarray/core/indexing.py",
      "start_line": 108,
      "end_line": 203,
      "tokens": 875,
      "context_length": 26890
    },
    {
      "position": 30,
      "id": "/tmp/repos/xarray/xarray/core/variable.py_Variable.isel_Variable.isel.5.1",
      "distance": 1.2044843435287476,
      "file_path": "xarray/core/variable.py",
      "start_line": 1123,
      "end_line": 1156,
      "tokens": 322,
      "context_length": 27212
    },
    {
      "position": 31,
      "id": "/tmp/repos/xarray/xarray/core/coordinates.py_Coordinates_Coordinates.to_dataset.1",
      "distance": 1.2058212757110596,
      "file_path": "xarray/core/coordinates.py",
      "start_line": 33,
      "end_line": 77,
      "tokens": 289,
      "context_length": 27501
    },
    {
      "position": 32,
      "id": "/tmp/repos/xarray/asv_bench/benchmarks/indexing.py_os_vectorized_assignment_values.1",
      "distance": 1.2064528465270996,
      "file_path": "asv_bench/benchmarks/indexing.py",
      "start_line": 1,
      "end_line": 59,
      "tokens": 733,
      "context_length": 28234
    },
    {
      "position": 33,
      "id": "/tmp/repos/xarray/asv_bench/benchmarks/reindexing.py_np_",
      "distance": 1.2067406177520752,
      "file_path": "asv_bench/benchmarks/reindexing.py",
      "start_line": 1,
      "end_line": 49,
      "tokens": 413,
      "context_length": 28647
    },
    {
      "position": 34,
      "id": "/tmp/repos/xarray/xarray/core/utils.py_infix_dims_infix_dims.2.6.3",
      "distance": 1.207632303237915,
      "file_path": "xarray/core/utils.py",
      "start_line": 763,
      "end_line": 788,
      "tokens": 253,
      "context_length": 28900
    },
    {
      "position": 35,
      "id": "/tmp/repos/xarray/xarray/core/dataarray.py_DataArray.T_DataArray.drop_vars.3.1",
      "distance": 1.2123405933380127,
      "file_path": "xarray/core/dataarray.py",
      "start_line": 2173,
      "end_line": 2197,
      "tokens": 208,
      "context_length": 29108,
      "file_pos": 14
    },
    {
      "position": 36,
      "id": "/tmp/repos/xarray/xarray/core/common.py_DataWithCoords.resample_DataWithCoords.resample.1",
      "distance": 1.2190779447555542,
      "file_path": "xarray/core/common.py",
      "start_line": 985,
      "end_line": 1094,
      "tokens": 1167,
      "context_length": 30275
    },
    {
      "position": 37,
      "id": "/tmp/repos/xarray/xarray/plot/utils.py__infer_interval_breaks__infer_interval_breaks.9.1",
      "distance": 1.2198486328125,
      "file_path": "xarray/plot/utils.py",
      "start_line": 749,
      "end_line": 777,
      "tokens": 384,
      "context_length": 30659
    },
    {
      "position": 38,
      "id": "/tmp/repos/xarray/xarray/core/coordinates.py_Coordinates.merge_Coordinates.merge.8.1",
      "distance": 1.2206470966339111,
      "file_path": "xarray/core/coordinates.py",
      "start_line": 146,
      "end_line": 181,
      "tokens": 262,
      "context_length": 30921
    },
    {
      "position": 39,
      "id": "/tmp/repos/xarray/xarray/core/combine.py__infer_concat_order_from_coords__infer_concat_order_from_coords.8.1",
      "distance": 1.2225751876831055,
      "file_path": "xarray/core/combine.py",
      "start_line": 47,
      "end_line": 115,
      "tokens": 536,
      "context_length": 31457
    },
    {
      "position": 40,
      "id": "/tmp/repos/xarray/xarray/plot/dataset_plot.py_functools__infer_meta_data.9.1",
      "distance": 1.2227787971496582,
      "file_path": "xarray/plot/dataset_plot.py",
      "start_line": 1,
      "end_line": 74,
      "tokens": 510,
      "context_length": 31967
    },
    {
      "position": 41,
      "id": "/tmp/repos/xarray/xarray/core/coordinates.py_remap_label_indexers_",
      "distance": 1.2257118225097656,
      "file_path": "xarray/core/coordinates.py",
      "start_line": 348,
      "end_line": 387,
      "tokens": 371,
      "context_length": 32338
    },
    {
      "position": 42,
      "id": "/tmp/repos/xarray/xarray/core/dataarray.py_datetime_23.4.2.iris_Cube.1",
      "distance": 1.2288001775741577,
      "file_path": "xarray/core/dataarray.py",
      "start_line": 1,
      "end_line": 87,
      "tokens": 442,
      "context_length": 32780,
      "file_pos": 16
    },
    {
      "position": 43,
      "id": "/tmp/repos/xarray/xarray/core/concat.py__calc_concat_dim_coord__calc_concat_dim_coord.4.1",
      "distance": 1.2321546077728271,
      "file_path": "xarray/core/concat.py",
      "start_line": 242,
      "end_line": 263,
      "tokens": 163,
      "context_length": 32943
    },
    {
      "position": 44,
      "id": "/tmp/repos/xarray/xarray/core/indexes.py_collections.abc_remove_unused_levels_categories.3.1",
      "distance": 1.2365095615386963,
      "file_path": "xarray/core/indexes.py",
      "start_line": 1,
      "end_line": 36,
      "tokens": 317,
      "context_length": 33260
    },
    {
      "position": 45,
      "id": "/tmp/repos/xarray/xarray/core/coordinates.py_DatasetCoordinates_DatasetCoordinates.to_dataset.3.1",
      "distance": 1.2376612424850464,
      "file_path": "xarray/core/coordinates.py",
      "start_line": 184,
      "end_line": 220,
      "tokens": 268,
      "context_length": 33528
    },
    {
      "position": 46,
      "id": "/tmp/repos/xarray/xarray/core/dataarray.py_DataArray.argmin_DataArray.argmin.3.2.1.1",
      "distance": 1.237675666809082,
      "file_path": "xarray/core/dataarray.py",
      "start_line": 4052,
      "end_line": 4153,
      "tokens": 1061,
      "context_length": 34589,
      "file_pos": 17
    },
    {
      "position": 47,
      "id": "/tmp/repos/xarray/asv_bench/benchmarks/indexing.py_HugeAxisSmallSliceIndexing_",
      "distance": 1.2383486032485962,
      "file_path": "asv_bench/benchmarks/indexing.py",
      "start_line": 145,
      "end_line": 162,
      "tokens": 145,
      "context_length": 34734
    },
    {
      "position": 48,
      "id": "/tmp/repos/xarray/xarray/core/dataset.py_split_indexes_split_indexes.16.1",
      "distance": 1.2393169403076172,
      "file_path": "xarray/core/dataset.py",
      "start_line": 298,
      "end_line": 353,
      "tokens": 452,
      "context_length": 35186,
      "file_pos": 17
    }
  ],
  "files": [
    {
      "file_path": "xarray/core/dataarray.py",
      "position": 1,
      "tokens": 36496,
      "context_length": 36496
    },
    {
      "file_path": "xarray/core/utils.py",
      "position": 2,
      "tokens": 6207,
      "context_length": 42703
    },
    {
      "file_path": "xarray/core/dataset.py",
      "position": 3,
      "tokens": 57486,
      "context_length": 100189
    },
    {
      "file_path": "xarray/core/coordinates.py",
      "position": 4,
      "tokens": 2837,
      "context_length": 103026
    },
    {
      "file_path": "xarray/core/common.py",
      "position": 5,
      "tokens": 15343,
      "context_length": 118369
    },
    {
      "file_path": "xarray/core/indexes.py",
      "position": 6,
      "tokens": 994,
      "context_length": 119363
    },
    {
      "file_path": "xarray/core/combine.py",
      "position": 7,
      "tokens": 7239,
      "context_length": 126602
    },
    {
      "file_path": "xarray/core/indexing.py",
      "position": 8,
      "tokens": 11921,
      "context_length": 138523
    },
    {
      "file_path": "xarray/core/groupby.py",
      "position": 9,
      "tokens": 7864,
      "context_length": 146387
    },
    {
      "file_path": "xarray/core/alignment.py",
      "position": 10,
      "tokens": 6061,
      "context_length": 152448
    },
    {
      "file_path": "xarray/core/duck_array_ops.py",
      "position": 11,
      "tokens": 5232,
      "context_length": 157680
    },
    {
      "file_path": "xarray/core/variable.py",
      "position": 12,
      "tokens": 21997,
      "context_length": 179677
    },
    {
      "file_path": "asv_bench/benchmarks/indexing.py",
      "position": 13,
      "tokens": 1560,
      "context_length": 181237
    },
    {
      "file_path": "asv_bench/benchmarks/reindexing.py",
      "position": 14,
      "tokens": 413,
      "context_length": 181650
    },
    {
      "file_path": "xarray/plot/utils.py",
      "position": 15,
      "tokens": 6638,
      "context_length": 188288
    },
    {
      "file_path": "xarray/plot/dataset_plot.py",
      "position": 16,
      "tokens": 3449,
      "context_length": 191737
    },
    {
      "file_path": "xarray/core/concat.py",
      "position": 17,
      "tokens": 4845,
      "context_length": 196582
    }
  ]
}