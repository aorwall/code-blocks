{
  "instance_id": "scikit-learn__scikit-learn-10774",
  "model_patch": "diff --git a/sklearn/datasets/california_housing.py b/sklearn/datasets/california_housing.py\nindex 84c80f331..bdb3ae233 100644\n--- a/sklearn/datasets/california_housing.py\n+++ b/sklearn/datasets/california_housing.py\n@@ -50,7 +50,8 @@ MODULE_DOCS = __doc__\n logger = logging.getLogger(__name__)\n \n \n-def fetch_california_housing(data_home=None, download_if_missing=True):\n+def fetch_california_housing(data_home=None, download_if_missing=True,\n+                             return_X_y=False):\n     \"\"\"Loader for the California housing dataset from StatLib.\n \n     Read more in the :ref:`User Guide <datasets>`.\n@@ -65,6 +66,9 @@ def fetch_california_housing(data_home=None, download_if_missing=True):\n         If False, raise a IOError if the data is not locally available\n         instead of trying to download the data from the source site.\n \n+    return_X_y : boolean, default=False.\n+        If True, returns (data, target) instead of a Bunch object.\n+\n     Returns\n     -------\n     dataset : dict-like object with the following attributes:\n@@ -81,6 +85,8 @@ def fetch_california_housing(data_home=None, download_if_missing=True):\n     dataset.DESCR : string\n         Description of the California housing dataset.\n \n+    (data, target) : tuple if `return_X_y` is True\n+\n     Notes\n     ------\n \n@@ -132,7 +138,8 @@ def fetch_california_housing(data_home=None, download_if_missing=True):\n     # target in units of 100,000\n     target = target / 100000.0\n \n-    return Bunch(data=data,\n-                 target=target,\n-                 feature_names=feature_names,\n-                 DESCR=MODULE_DOCS)\n+    if return_X_y:\n+        return data, target\n+    else:\n+        return Bunch(data=data, target=target,\n+                     feature_names=feature_names, DESCR=MODULE_DOCS)\ndiff --git a/sklearn/datasets/covtype.py b/sklearn/datasets/covtype.py\nindex c0c8f7899..23b3739ea 100644\n--- a/sklearn/datasets/covtype.py\n+++ b/sklearn/datasets/covtype.py\n@@ -42,7 +42,7 @@ logger = logging.getLogger(__name__)\n \n \n def fetch_covtype(data_home=None, download_if_missing=True,\n-                  random_state=None, shuffle=False):\n+                  random_state=None, shuffle=False, return_X_y=False):\n     \"\"\"Load the covertype dataset, downloading it if necessary.\n \n     Read more in the :ref:`User Guide <datasets>`.\n@@ -67,6 +67,9 @@ def fetch_covtype(data_home=None, download_if_missing=True,\n     shuffle : bool, default=False\n         Whether to shuffle dataset.\n \n+    return_X_y : boolean, default=False\n+        If True, returns (data, target) instead of a Bunch object.\n+\n     Returns\n     -------\n     dataset : dict-like object with the following attributes:\n@@ -81,6 +84,8 @@ def fetch_covtype(data_home=None, download_if_missing=True,\n     dataset.DESCR : string\n         Description of the forest covertype dataset.\n \n+    (data, target) : tuple if `return_X_y` is True\n+\n     \"\"\"\n \n     data_home = get_data_home(data_home=data_home)\n@@ -120,4 +125,7 @@ def fetch_covtype(data_home=None, download_if_missing=True,\n         X = X[ind]\n         y = y[ind]\n \n-    return Bunch(data=X, target=y, DESCR=__doc__)\n+    if return_X_y:\n+        return X, y\n+    else:\n+        return Bunch(data=X, target=y, DESCR=__doc__)\ndiff --git a/sklearn/datasets/kddcup99.py b/sklearn/datasets/kddcup99.py\nindex e946be200..3c8a8dc37 100644\n--- a/sklearn/datasets/kddcup99.py\n+++ b/sklearn/datasets/kddcup99.py\n@@ -14,10 +14,7 @@ from gzip import GzipFile\n import logging\n import os\n from os.path import exists, join\n-\n import numpy as np\n-\n-\n from .base import _fetch_remote\n from .base import get_data_home\n from .base import RemoteFileMetadata\n@@ -46,8 +43,8 @@ logger = logging.getLogger(__name__)\n \n \n def fetch_kddcup99(subset=None, data_home=None, shuffle=False,\n-                   random_state=None,\n-                   percent10=True, download_if_missing=True):\n+                   random_state=None, percent10=True, download_if_missing=True,\n+                   return_X_y=False):\n     \"\"\"Load and return the kddcup 99 dataset (classification).\n \n     The KDD Cup '99 dataset was created by processing the tcpdump portions\n@@ -155,13 +152,16 @@ def fetch_kddcup99(subset=None, data_home=None, shuffle=False,\n         If False, raise a IOError if the data is not locally available\n         instead of trying to download the data from the source site.\n \n+    return_X_y : bool, default=False\n+        If True, returns (data, target) instead of a Bunch object.\n+\n     Returns\n     -------\n     data : Bunch\n         Dictionary-like object, the interesting attributes are:\n         'data', the data to learn and 'target', the regression target for each\n         sample.\n-\n+        If `return_X_y` is True, returns (data, target) instead.\n \n     References\n     ----------\n@@ -230,7 +230,10 @@ def fetch_kddcup99(subset=None, data_home=None, shuffle=False,\n     if shuffle:\n         data, target = shuffle_method(data, target, random_state=random_state)\n \n-    return Bunch(data=data, target=target)\n+    if return_X_y:\n+        return data, target\n+    else:\n+        return Bunch(data=data, target=target)\n \n \n def _fetch_brute_kddcup99(data_home=None,\ndiff --git a/sklearn/datasets/mldata.py b/sklearn/datasets/mldata.py\nindex 141620858..1e971fa47 100644\n--- a/sklearn/datasets/mldata.py\n+++ b/sklearn/datasets/mldata.py\n@@ -47,7 +47,7 @@ def mldata_filename(dataname):\n \n \n def fetch_mldata(dataname, target_name='label', data_name='data',\n-                 transpose_data=True, data_home=None):\n+                 transpose_data=True, data_home=None, return_X_y=False):\n     \"\"\"Fetch an mldata.org data set\n \n     If the file does not exist yet, it is downloaded from mldata.org .\n@@ -91,14 +91,18 @@ def fetch_mldata(dataname, target_name='label', data_name='data',\n         Specify another download and cache folder for the data sets. By default\n         all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n \n+    return_X_y : boolean, default: False.\n+        If True, returns (data, target) instead of a Bunch object.\n+\n     Returns\n     -------\n \n-    data : Bunch\n+    data : Bunch or tuple\n         Dictionary-like object, the interesting attributes are:\n         'data', the data to learn, 'target', the classification labels,\n         'DESCR', the full description of the dataset, and\n         'COL_NAMES', the original names of the dataset columns.\n+        If return_X_y is True, returns (data, target) instead.\n \n     Examples\n     --------\n@@ -154,13 +158,18 @@ def fetch_mldata(dataname, target_name='label', data_name='data',\n             mldata_url = urlopen(urlname)\n         except HTTPError as e:\n             if e.code == 404:\n-                e.msg = \"Dataset '%s' not found on mldata.org.\" % dataname\n-            raise\n+                raise HTTPError(\n+                    urlname, e.code,\n+                    \"Dataset '%s' not found on mldata.org.\" % dataname,\n+                    e.hdrs, e.fp\n+                )\n+            else:\n+                raise\n         # store Matlab file\n         try:\n             with open(filename, 'w+b') as matlab_file:\n                 copyfileobj(mldata_url, matlab_file)\n-        except:\n+        except IOError:\n             os.remove(filename)\n             raise\n         mldata_url.close()\n@@ -170,7 +179,6 @@ def fetch_mldata(dataname, target_name='label', data_name='data',\n         matlab_dict = io.loadmat(matlab_file, struct_as_record=True)\n \n     # -- extract data from matlab_dict\n-\n     # flatten column names\n     col_names = [str(descr[0])\n                  for descr in matlab_dict['mldata_descr_ordering'][0]]\n@@ -224,7 +232,10 @@ def fetch_mldata(dataname, target_name='label', data_name='data',\n         if not sp.sparse.issparse(dataset['target']):\n             dataset['target'] = dataset['target'].squeeze()\n \n-    return Bunch(**dataset)\n+    if return_X_y:\n+        return dataset['data'], dataset['target']\n+    else:\n+        return Bunch(**dataset)\n \n \n # The following is used by test runners to setup the docstring tests fixture\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "sklearn/datasets/california_housing.py",
    "sklearn/datasets/covtype.py",
    "sklearn/datasets/kddcup99.py",
    "sklearn/datasets/mldata.py"
  ],
  "repo": "scikit-learn/scikit-learn",
  "base_commit": "ccbf9975fcf1676f6ac4f311e388529d3a3c4d3f",
  "patch": "diff --git a/sklearn/datasets/california_housing.py b/sklearn/datasets/california_housing.py\n--- a/sklearn/datasets/california_housing.py\n+++ b/sklearn/datasets/california_housing.py\n@@ -50,7 +50,8 @@\n logger = logging.getLogger(__name__)\n \n \n-def fetch_california_housing(data_home=None, download_if_missing=True):\n+def fetch_california_housing(data_home=None, download_if_missing=True,\n+                             return_X_y=False):\n     \"\"\"Loader for the California housing dataset from StatLib.\n \n     Read more in the :ref:`User Guide <datasets>`.\n@@ -65,6 +66,12 @@ def fetch_california_housing(data_home=None, download_if_missing=True):\n         If False, raise a IOError if the data is not locally available\n         instead of trying to download the data from the source site.\n \n+\n+    return_X_y : boolean, default=False. If True, returns ``(data.data,\n+    data.target)`` instead of a Bunch object.\n+\n+        .. versionadded:: 0.20\n+\n     Returns\n     -------\n     dataset : dict-like object with the following attributes:\n@@ -81,6 +88,10 @@ def fetch_california_housing(data_home=None, download_if_missing=True):\n     dataset.DESCR : string\n         Description of the California housing dataset.\n \n+    (data, target) : tuple if ``return_X_y`` is True\n+\n+        .. versionadded:: 0.20\n+\n     Notes\n     ------\n \n@@ -132,6 +143,9 @@ def fetch_california_housing(data_home=None, download_if_missing=True):\n     # target in units of 100,000\n     target = target / 100000.0\n \n+    if return_X_y:\n+        return data, target\n+\n     return Bunch(data=data,\n                  target=target,\n                  feature_names=feature_names,\ndiff --git a/sklearn/datasets/covtype.py b/sklearn/datasets/covtype.py\n--- a/sklearn/datasets/covtype.py\n+++ b/sklearn/datasets/covtype.py\n@@ -42,7 +42,7 @@\n \n \n def fetch_covtype(data_home=None, download_if_missing=True,\n-                  random_state=None, shuffle=False):\n+                  random_state=None, shuffle=False, return_X_y=False):\n     \"\"\"Load the covertype dataset, downloading it if necessary.\n \n     Read more in the :ref:`User Guide <datasets>`.\n@@ -67,6 +67,11 @@ def fetch_covtype(data_home=None, download_if_missing=True,\n     shuffle : bool, default=False\n         Whether to shuffle dataset.\n \n+    return_X_y : boolean, default=False. If True, returns ``(data.data,\n+    data.target)`` instead of a Bunch object.\n+\n+        .. versionadded:: 0.20\n+\n     Returns\n     -------\n     dataset : dict-like object with the following attributes:\n@@ -81,6 +86,9 @@ def fetch_covtype(data_home=None, download_if_missing=True,\n     dataset.DESCR : string\n         Description of the forest covertype dataset.\n \n+    (data, target) : tuple if ``return_X_y`` is True\n+\n+        .. versionadded:: 0.20\n     \"\"\"\n \n     data_home = get_data_home(data_home=data_home)\n@@ -120,4 +128,7 @@ def fetch_covtype(data_home=None, download_if_missing=True,\n         X = X[ind]\n         y = y[ind]\n \n+    if return_X_y:\n+        return X, y\n+\n     return Bunch(data=X, target=y, DESCR=__doc__)\ndiff --git a/sklearn/datasets/kddcup99.py b/sklearn/datasets/kddcup99.py\n--- a/sklearn/datasets/kddcup99.py\n+++ b/sklearn/datasets/kddcup99.py\n@@ -47,7 +47,7 @@\n \n def fetch_kddcup99(subset=None, data_home=None, shuffle=False,\n                    random_state=None,\n-                   percent10=True, download_if_missing=True):\n+                   percent10=True, download_if_missing=True, return_X_y=False):\n     \"\"\"Load and return the kddcup 99 dataset (classification).\n \n     The KDD Cup '99 dataset was created by processing the tcpdump portions\n@@ -155,6 +155,12 @@ def fetch_kddcup99(subset=None, data_home=None, shuffle=False,\n         If False, raise a IOError if the data is not locally available\n         instead of trying to download the data from the source site.\n \n+    return_X_y : boolean, default=False.\n+        If True, returns ``(data, target)`` instead of a Bunch object. See\n+        below for more information about the `data` and `target` object.\n+\n+        .. versionadded:: 0.20\n+\n     Returns\n     -------\n     data : Bunch\n@@ -162,6 +168,9 @@ def fetch_kddcup99(subset=None, data_home=None, shuffle=False,\n         'data', the data to learn and 'target', the regression target for each\n         sample.\n \n+    (data, target) : tuple if ``return_X_y`` is True\n+\n+        .. versionadded:: 0.20\n \n     References\n     ----------\n@@ -230,6 +239,9 @@ def fetch_kddcup99(subset=None, data_home=None, shuffle=False,\n     if shuffle:\n         data, target = shuffle_method(data, target, random_state=random_state)\n \n+    if return_X_y:\n+        return data, target\n+\n     return Bunch(data=data, target=target)\n \n \ndiff --git a/sklearn/datasets/lfw.py b/sklearn/datasets/lfw.py\n--- a/sklearn/datasets/lfw.py\n+++ b/sklearn/datasets/lfw.py\n@@ -238,7 +238,7 @@ def _fetch_lfw_people(data_folder_path, slice_=None, color=False, resize=None,\n def fetch_lfw_people(data_home=None, funneled=True, resize=0.5,\n                      min_faces_per_person=0, color=False,\n                      slice_=(slice(70, 195), slice(78, 172)),\n-                     download_if_missing=True):\n+                     download_if_missing=True, return_X_y=False):\n     \"\"\"Loader for the Labeled Faces in the Wild (LFW) people dataset\n \n     This dataset is a collection of JPEG pictures of famous people\n@@ -287,6 +287,12 @@ def fetch_lfw_people(data_home=None, funneled=True, resize=0.5,\n         If False, raise a IOError if the data is not locally available\n         instead of trying to download the data from the source site.\n \n+    return_X_y : boolean, default=False. If True, returns ``(dataset.data,\n+    dataset.target)`` instead of a Bunch object. See below for more\n+    information about the `dataset.data` and `dataset.target` object.\n+\n+        .. versionadded:: 0.20\n+\n     Returns\n     -------\n     dataset : dict-like object with the following attributes:\n@@ -307,6 +313,11 @@ def fetch_lfw_people(data_home=None, funneled=True, resize=0.5,\n \n     dataset.DESCR : string\n         Description of the Labeled Faces in the Wild (LFW) dataset.\n+\n+    (data, target) : tuple if ``return_X_y`` is True\n+\n+        .. versionadded:: 0.20\n+\n     \"\"\"\n     lfw_home, data_folder_path = check_fetch_lfw(\n         data_home=data_home, funneled=funneled,\n@@ -323,8 +334,13 @@ def fetch_lfw_people(data_home=None, funneled=True, resize=0.5,\n         data_folder_path, resize=resize,\n         min_faces_per_person=min_faces_per_person, color=color, slice_=slice_)\n \n+    X = faces.reshape(len(faces), -1)\n+\n+    if return_X_y:\n+        return X, target\n+\n     # pack the results as a Bunch instance\n-    return Bunch(data=faces.reshape(len(faces), -1), images=faces,\n+    return Bunch(data=X, images=faces,\n                  target=target, target_names=target_names,\n                  DESCR=\"LFW faces dataset\")\n \ndiff --git a/sklearn/datasets/rcv1.py b/sklearn/datasets/rcv1.py\n--- a/sklearn/datasets/rcv1.py\n+++ b/sklearn/datasets/rcv1.py\n@@ -70,7 +70,7 @@\n \n \n def fetch_rcv1(data_home=None, subset='all', download_if_missing=True,\n-               random_state=None, shuffle=False):\n+               random_state=None, shuffle=False, return_X_y=False):\n     \"\"\"Load the RCV1 multilabel dataset, downloading it if necessary.\n \n     Version: RCV1-v2, vectors, full sets, topics multilabels.\n@@ -112,6 +112,12 @@ def fetch_rcv1(data_home=None, subset='all', download_if_missing=True,\n     shuffle : bool, default=False\n         Whether to shuffle dataset.\n \n+    return_X_y : boolean, default=False. If True, returns ``(dataset.data,\n+    dataset.target)`` instead of a Bunch object. See below for more\n+    information about the `dataset.data` and `dataset.target` object.\n+\n+        .. versionadded:: 0.20\n+\n     Returns\n     -------\n     dataset : dict-like object with the following attributes:\n@@ -132,6 +138,10 @@ def fetch_rcv1(data_home=None, subset='all', download_if_missing=True,\n     dataset.DESCR : string\n         Description of the RCV1 dataset.\n \n+    (data, target) : tuple if ``return_X_y`` is True\n+\n+        .. versionadded:: 0.20\n+\n     References\n     ----------\n     Lewis, D. D., Yang, Y., Rose, T. G., & Li, F. (2004). RCV1: A new\n@@ -254,6 +264,9 @@ def fetch_rcv1(data_home=None, subset='all', download_if_missing=True,\n     if shuffle:\n         X, y, sample_id = shuffle_(X, y, sample_id, random_state=random_state)\n \n+    if return_X_y:\n+        return X, y\n+\n     return Bunch(data=X, target=y, sample_id=sample_id,\n                  target_names=categories, DESCR=__doc__)\n \ndiff --git a/sklearn/datasets/twenty_newsgroups.py b/sklearn/datasets/twenty_newsgroups.py\n--- a/sklearn/datasets/twenty_newsgroups.py\n+++ b/sklearn/datasets/twenty_newsgroups.py\n@@ -275,7 +275,7 @@ def fetch_20newsgroups(data_home=None, subset='train', categories=None,\n \n \n def fetch_20newsgroups_vectorized(subset=\"train\", remove=(), data_home=None,\n-                                  download_if_missing=True):\n+                                  download_if_missing=True, return_X_y=False):\n     \"\"\"Load the 20 newsgroups dataset and transform it into tf-idf vectors.\n \n     This is a convenience function; the tf-idf transformation is done using the\n@@ -309,12 +309,21 @@ def fetch_20newsgroups_vectorized(subset=\"train\", remove=(), data_home=None,\n         If False, raise an IOError if the data is not locally available\n         instead of trying to download the data from the source site.\n \n+    return_X_y : boolean, default=False. If True, returns ``(data.data,\n+    data.target)`` instead of a Bunch object.\n+\n+        .. versionadded:: 0.20\n+\n     Returns\n     -------\n     bunch : Bunch object\n         bunch.data: sparse matrix, shape [n_samples, n_features]\n         bunch.target: array, shape [n_samples]\n         bunch.target_names: list, length [n_classes]\n+\n+    (data, target) : tuple if ``return_X_y`` is True\n+\n+        .. versionadded:: 0.20\n     \"\"\"\n     data_home = get_data_home(data_home=data_home)\n     filebase = '20newsgroup_vectorized'\n@@ -369,4 +378,7 @@ def fetch_20newsgroups_vectorized(subset=\"train\", remove=(), data_home=None,\n         raise ValueError(\"%r is not a valid subset: should be one of \"\n                          \"['train', 'test', 'all']\" % subset)\n \n+    if return_X_y:\n+        return data, target\n+\n     return Bunch(data=data, target=target, target_names=target_names)\n",
  "test_patch": "diff --git a/sklearn/datasets/tests/test_20news.py b/sklearn/datasets/tests/test_20news.py\n--- a/sklearn/datasets/tests/test_20news.py\n+++ b/sklearn/datasets/tests/test_20news.py\n@@ -5,6 +5,8 @@\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import SkipTest\n+from sklearn.datasets.tests.test_common import check_return_X_y\n+from functools import partial\n \n from sklearn import datasets\n \n@@ -77,6 +79,10 @@ def test_20news_vectorized():\n     assert_equal(bunch.target.shape[0], 7532)\n     assert_equal(bunch.data.dtype, np.float64)\n \n+    # test return_X_y option\n+    fetch_func = partial(datasets.fetch_20newsgroups_vectorized, subset='test')\n+    check_return_X_y(bunch, fetch_func)\n+\n     # test subset = all\n     bunch = datasets.fetch_20newsgroups_vectorized(subset='all')\n     assert_true(sp.isspmatrix_csr(bunch.data))\ndiff --git a/sklearn/datasets/tests/test_base.py b/sklearn/datasets/tests/test_base.py\n--- a/sklearn/datasets/tests/test_base.py\n+++ b/sklearn/datasets/tests/test_base.py\n@@ -5,6 +5,7 @@\n import numpy\n from pickle import loads\n from pickle import dumps\n+from functools import partial\n \n from sklearn.datasets import get_data_home\n from sklearn.datasets import clear_data_home\n@@ -19,6 +20,7 @@\n from sklearn.datasets import load_boston\n from sklearn.datasets import load_wine\n from sklearn.datasets.base import Bunch\n+from sklearn.datasets.tests.test_common import check_return_X_y\n \n from sklearn.externals.six import b, u\n from sklearn.externals._pilutil import pillow_installed\n@@ -27,7 +29,6 @@\n from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raises\n-from sklearn.utils.testing import assert_array_equal\n \n \n DATA_HOME = tempfile.mkdtemp(prefix=\"scikit_learn_data_home_test_\")\n@@ -139,11 +140,7 @@ def test_load_digits():\n     assert_equal(numpy.unique(digits.target).size, 10)\n \n     # test return_X_y option\n-    X_y_tuple = load_digits(return_X_y=True)\n-    bunch = load_digits()\n-    assert_true(isinstance(X_y_tuple, tuple))\n-    assert_array_equal(X_y_tuple[0], bunch.data)\n-    assert_array_equal(X_y_tuple[1], bunch.target)\n+    check_return_X_y(digits, partial(load_digits))\n \n \n def test_load_digits_n_class_lt_10():\n@@ -177,11 +174,7 @@ def test_load_diabetes():\n     assert_true(res.DESCR)\n \n     # test return_X_y option\n-    X_y_tuple = load_diabetes(return_X_y=True)\n-    bunch = load_diabetes()\n-    assert_true(isinstance(X_y_tuple, tuple))\n-    assert_array_equal(X_y_tuple[0], bunch.data)\n-    assert_array_equal(X_y_tuple[1], bunch.target)\n+    check_return_X_y(res, partial(load_diabetes))\n \n \n def test_load_linnerud():\n@@ -194,11 +187,7 @@ def test_load_linnerud():\n     assert_true(os.path.exists(res.target_filename))\n \n     # test return_X_y option\n-    X_y_tuple = load_linnerud(return_X_y=True)\n-    bunch = load_linnerud()\n-    assert_true(isinstance(X_y_tuple, tuple))\n-    assert_array_equal(X_y_tuple[0], bunch.data)\n-    assert_array_equal(X_y_tuple[1], bunch.target)\n+    check_return_X_y(res, partial(load_linnerud))\n \n \n def test_load_iris():\n@@ -210,11 +199,7 @@ def test_load_iris():\n     assert_true(os.path.exists(res.filename))\n \n     # test return_X_y option\n-    X_y_tuple = load_iris(return_X_y=True)\n-    bunch = load_iris()\n-    assert_true(isinstance(X_y_tuple, tuple))\n-    assert_array_equal(X_y_tuple[0], bunch.data)\n-    assert_array_equal(X_y_tuple[1], bunch.target)\n+    check_return_X_y(res, partial(load_iris))\n \n \n def test_load_wine():\n@@ -225,11 +210,7 @@ def test_load_wine():\n     assert_true(res.DESCR)\n \n     # test return_X_y option\n-    X_y_tuple = load_wine(return_X_y=True)\n-    bunch = load_wine()\n-    assert_true(isinstance(X_y_tuple, tuple))\n-    assert_array_equal(X_y_tuple[0], bunch.data)\n-    assert_array_equal(X_y_tuple[1], bunch.target)\n+    check_return_X_y(res, partial(load_wine))\n \n \n def test_load_breast_cancer():\n@@ -241,11 +222,7 @@ def test_load_breast_cancer():\n     assert_true(os.path.exists(res.filename))\n \n     # test return_X_y option\n-    X_y_tuple = load_breast_cancer(return_X_y=True)\n-    bunch = load_breast_cancer()\n-    assert_true(isinstance(X_y_tuple, tuple))\n-    assert_array_equal(X_y_tuple[0], bunch.data)\n-    assert_array_equal(X_y_tuple[1], bunch.target)\n+    check_return_X_y(res, partial(load_breast_cancer))\n \n \n def test_load_boston():\n@@ -257,11 +234,7 @@ def test_load_boston():\n     assert_true(os.path.exists(res.filename))\n \n     # test return_X_y option\n-    X_y_tuple = load_boston(return_X_y=True)\n-    bunch = load_boston()\n-    assert_true(isinstance(X_y_tuple, tuple))\n-    assert_array_equal(X_y_tuple[0], bunch.data)\n-    assert_array_equal(X_y_tuple[1], bunch.target)\n+    check_return_X_y(res, partial(load_boston))\n \n \n def test_loads_dumps_bunch():\ndiff --git a/sklearn/datasets/tests/test_california_housing.py b/sklearn/datasets/tests/test_california_housing.py\nnew file mode 100644\n--- /dev/null\n+++ b/sklearn/datasets/tests/test_california_housing.py\n@@ -0,0 +1,26 @@\n+\"\"\"Test the california_housing loader.\n+\n+Skipped if california_housing is not already downloaded to data_home.\n+\"\"\"\n+\n+from sklearn.datasets import fetch_california_housing\n+from sklearn.utils.testing import SkipTest\n+from sklearn.datasets.tests.test_common import check_return_X_y\n+from functools import partial\n+\n+\n+def fetch(*args, **kwargs):\n+    return fetch_california_housing(*args, download_if_missing=False, **kwargs)\n+\n+\n+def test_fetch():\n+    try:\n+        data = fetch()\n+    except IOError:\n+        raise SkipTest(\"California housing dataset can not be loaded.\")\n+    assert((20640, 8) == data.data.shape)\n+    assert((20640, ) == data.target.shape)\n+\n+    # test return_X_y option\n+    fetch_func = partial(fetch)\n+    check_return_X_y(data, fetch_func)\ndiff --git a/sklearn/datasets/tests/test_common.py b/sklearn/datasets/tests/test_common.py\nnew file mode 100644\n--- /dev/null\n+++ b/sklearn/datasets/tests/test_common.py\n@@ -0,0 +1,9 @@\n+\"\"\"Test loaders for common functionality.\n+\"\"\"\n+\n+\n+def check_return_X_y(bunch, fetch_func_partial):\n+    X_y_tuple = fetch_func_partial(return_X_y=True)\n+    assert(isinstance(X_y_tuple, tuple))\n+    assert(X_y_tuple[0].shape == bunch.data.shape)\n+    assert(X_y_tuple[1].shape == bunch.target.shape)\ndiff --git a/sklearn/datasets/tests/test_covtype.py b/sklearn/datasets/tests/test_covtype.py\n--- a/sklearn/datasets/tests/test_covtype.py\n+++ b/sklearn/datasets/tests/test_covtype.py\n@@ -5,6 +5,8 @@\n \n from sklearn.datasets import fetch_covtype\n from sklearn.utils.testing import assert_equal, SkipTest\n+from sklearn.datasets.tests.test_common import check_return_X_y\n+from functools import partial\n \n \n def fetch(*args, **kwargs):\n@@ -28,3 +30,7 @@ def test_fetch():\n     y1, y2 = data1['target'], data2['target']\n     assert_equal((X1.shape[0],), y1.shape)\n     assert_equal((X1.shape[0],), y2.shape)\n+\n+    # test return_X_y option\n+    fetch_func = partial(fetch)\n+    check_return_X_y(data1, fetch_func)\ndiff --git a/sklearn/datasets/tests/test_kddcup99.py b/sklearn/datasets/tests/test_kddcup99.py\n--- a/sklearn/datasets/tests/test_kddcup99.py\n+++ b/sklearn/datasets/tests/test_kddcup99.py\n@@ -6,7 +6,10 @@\n \"\"\"\n \n from sklearn.datasets import fetch_kddcup99\n+from sklearn.datasets.tests.test_common import check_return_X_y\n from sklearn.utils.testing import assert_equal, SkipTest\n+from functools import partial\n+\n \n \n def test_percent10():\n@@ -38,6 +41,9 @@ def test_percent10():\n     assert_equal(data.data.shape, (9571, 3))\n     assert_equal(data.target.shape, (9571,))\n \n+    fetch_func = partial(fetch_kddcup99, 'smtp')\n+    check_return_X_y(data, fetch_func)\n+\n \n def test_shuffle():\n     try:\ndiff --git a/sklearn/datasets/tests/test_lfw.py b/sklearn/datasets/tests/test_lfw.py\n--- a/sklearn/datasets/tests/test_lfw.py\n+++ b/sklearn/datasets/tests/test_lfw.py\n@@ -13,6 +13,7 @@\n import shutil\n import tempfile\n import numpy as np\n+from functools import partial\n from sklearn.externals import six\n from sklearn.externals._pilutil import pillow_installed, imsave\n from sklearn.datasets import fetch_lfw_pairs\n@@ -22,6 +23,7 @@\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import SkipTest\n from sklearn.utils.testing import assert_raises\n+from sklearn.datasets.tests.test_common import check_return_X_y\n \n \n SCIKIT_LEARN_DATA = tempfile.mkdtemp(prefix=\"scikit_learn_lfw_test_\")\n@@ -139,6 +141,13 @@ def test_load_fake_lfw_people():\n                        ['Abdelatif Smith', 'Abhati Kepler', 'Camara Alvaro',\n                         'Chen Dupont', 'John Lee', 'Lin Bauman', 'Onur Lopez'])\n \n+    # test return_X_y option\n+    fetch_func = partial(fetch_lfw_people, data_home=SCIKIT_LEARN_DATA,\n+                         resize=None,\n+                         slice_=None, color=True,\n+                         download_if_missing=False)\n+    check_return_X_y(lfw_people, fetch_func)\n+\n \n def test_load_fake_lfw_people_too_restrictive():\n     assert_raises(ValueError, fetch_lfw_people, data_home=SCIKIT_LEARN_DATA,\ndiff --git a/sklearn/datasets/tests/test_rcv1.py b/sklearn/datasets/tests/test_rcv1.py\n--- a/sklearn/datasets/tests/test_rcv1.py\n+++ b/sklearn/datasets/tests/test_rcv1.py\n@@ -6,7 +6,9 @@\n import errno\n import scipy.sparse as sp\n import numpy as np\n+from functools import partial\n from sklearn.datasets import fetch_rcv1\n+from sklearn.datasets.tests.test_common import check_return_X_y\n from sklearn.utils.testing import assert_almost_equal\n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_equal\n@@ -53,6 +55,11 @@ def test_fetch_rcv1():\n     X2, Y2 = data2.data, data2.target\n     s2 = data2.sample_id\n \n+    # test return_X_y option\n+    fetch_func = partial(fetch_rcv1, shuffle=False, subset='train',\n+                         download_if_missing=False)\n+    check_return_X_y(data2, fetch_func)\n+\n     # The first 23149 samples are the training samples\n     assert_array_equal(np.sort(s1[:23149]), np.sort(s2))\n \n",
  "problem_statement": "return_X_y should be available on more dataset loaders/fetchers\nVersion 0.18 added a `return_X_y` option to `load_iris` et al., but not to, for example, `fetch_kddcup99`.\r\n\r\nAll dataset loaders that currently return Bunches should also be able to return (X, y).\n",
  "hints_text": "Looks like a doable first issue - may I take it on?\nSure.\n\nOn 1 March 2018 at 12:59, Chris Catalfo <notifications@github.com> wrote:\n\n> Looks like a doable first issue - may I take it on?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/scikit-learn/scikit-learn/issues/10734#issuecomment-369448829>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEz6wB-I558FOQMikXvOGJLH12xAcD7ks5tZ1XygaJpZM4SXlSa>\n> .\n>\n\nPlease refer to the implementation and testing of load_iris's similar\nfeature.\n\nThanks - will do.",
  "created_at": "2018-03-08T02:48:49Z",
  "version": "0.20",
  "FAIL_TO_PASS": "[\"sklearn/datasets/tests/test_lfw.py::test_load_fake_lfw_people\"]",
  "PASS_TO_PASS": "[\"sklearn/datasets/tests/test_base.py::test_bunch_dir\", \"sklearn/datasets/tests/test_base.py::test_bunch_pickle_generated_with_0_16_and_read_with_0_17\", \"sklearn/datasets/tests/test_base.py::test_data_home\", \"sklearn/datasets/tests/test_base.py::test_default_empty_load_files\", \"sklearn/datasets/tests/test_base.py::test_default_load_files\", \"sklearn/datasets/tests/test_base.py::test_load_boston\", \"sklearn/datasets/tests/test_base.py::test_load_breast_cancer\", \"sklearn/datasets/tests/test_base.py::test_load_diabetes\", \"sklearn/datasets/tests/test_base.py::test_load_digits\", \"sklearn/datasets/tests/test_base.py::test_load_digits_n_class_lt_10\", \"sklearn/datasets/tests/test_base.py::test_load_files_w_categories_desc_and_encoding\", \"sklearn/datasets/tests/test_base.py::test_load_files_wo_load_content\", \"sklearn/datasets/tests/test_base.py::test_load_iris\", \"sklearn/datasets/tests/test_base.py::test_load_linnerud\", \"sklearn/datasets/tests/test_base.py::test_load_missing_sample_image_error\", \"sklearn/datasets/tests/test_base.py::test_load_sample_image\", \"sklearn/datasets/tests/test_base.py::test_load_sample_images\", \"sklearn/datasets/tests/test_base.py::test_load_wine\", \"sklearn/datasets/tests/test_base.py::test_loads_dumps_bunch\", \"sklearn/datasets/tests/test_lfw.py::test_load_empty_lfw_pairs\", \"sklearn/datasets/tests/test_lfw.py::test_load_empty_lfw_people\", \"sklearn/datasets/tests/test_lfw.py::test_load_fake_lfw_pairs\", \"sklearn/datasets/tests/test_lfw.py::test_load_fake_lfw_people_too_restrictive\"]",
  "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1",
  "patch_files": [
    "sklearn/datasets/california_housing.py",
    "sklearn/datasets/covtype.py",
    "sklearn/datasets/kddcup99.py",
    "sklearn/datasets/lfw.py",
    "sklearn/datasets/rcv1.py",
    "sklearn/datasets/twenty_newsgroups.py"
  ],
  "test_patch_files": [
    "sklearn/datasets/tests/test_20news.py",
    "sklearn/datasets/tests/test_base.py",
    "sklearn/datasets/tests/test_california_housing.py",
    "sklearn/datasets/tests/test_common.py",
    "sklearn/datasets/tests/test_covtype.py",
    "sklearn/datasets/tests/test_kddcup99.py",
    "sklearn/datasets/tests/test_lfw.py",
    "sklearn/datasets/tests/test_rcv1.py"
  ],
  "patch_diff_details": {
    "sklearn/datasets/california_housing.py": {
      "diffs": [
        {
          "start_line_old": 53,
          "end_line_old": 53
        },
        {
          "start_line_old": 68,
          "end_line_old": 68
        },
        {
          "start_line_old": 84,
          "end_line_old": 84
        },
        {
          "start_line_old": 135,
          "end_line_old": 135
        }
      ]
    },
    "sklearn/datasets/covtype.py": {
      "diffs": [
        {
          "start_line_old": 45,
          "end_line_old": 45
        },
        {
          "start_line_old": 70,
          "end_line_old": 70
        },
        {
          "start_line_old": 84,
          "end_line_old": 84
        },
        {
          "start_line_old": 123,
          "end_line_old": 123
        }
      ]
    },
    "sklearn/datasets/kddcup99.py": {
      "diffs": [
        {
          "start_line_old": 50,
          "end_line_old": 50,
          "file_pos": 17,
          "file_context_length": 122704,
          "pos": 30,
          "context_length": 12856
        },
        {
          "start_line_old": 158,
          "end_line_old": 158,
          "file_pos": 17,
          "file_context_length": 122704,
          "pos": 30,
          "context_length": 12856
        },
        {
          "start_line_old": 165,
          "end_line_old": 165,
          "file_pos": 17,
          "file_context_length": 122704,
          "pos": 30,
          "context_length": 12856
        },
        {
          "start_line_old": 233,
          "end_line_old": 233,
          "file_pos": 17,
          "file_context_length": 122704,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/datasets/kddcup99.py_fetch_kddcup99_fetch_kddcup99.1",
          "closest_snippet_line_distance": 55,
          "pos": 38,
          "context_length": 16486
        }
      ]
    },
    "sklearn/datasets/lfw.py": {
      "diffs": [
        {
          "start_line_old": 241,
          "end_line_old": 241
        },
        {
          "start_line_old": 290,
          "end_line_old": 290
        },
        {
          "start_line_old": 310,
          "end_line_old": 310
        },
        {
          "start_line_old": 326,
          "end_line_old": 326
        }
      ]
    },
    "sklearn/datasets/rcv1.py": {
      "diffs": [
        {
          "start_line_old": 73,
          "end_line_old": 73,
          "file_pos": 3,
          "file_context_length": 16999,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/datasets/rcv1.py_fetch_rcv1.sample_topics_path_fetch_rcv1.16.26.categories.1",
          "closest_snippet_line_distance": 82
        },
        {
          "start_line_old": 115,
          "end_line_old": 115,
          "file_pos": 3,
          "file_context_length": 16999,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/datasets/rcv1.py_fetch_rcv1.sample_topics_path_fetch_rcv1.16.26.categories.1",
          "closest_snippet_line_distance": 40
        },
        {
          "start_line_old": 135,
          "end_line_old": 135,
          "file_pos": 3,
          "file_context_length": 16999,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/datasets/rcv1.py_fetch_rcv1.sample_topics_path_fetch_rcv1.16.26.categories.1",
          "closest_snippet_line_distance": 20
        },
        {
          "start_line_old": 257,
          "end_line_old": 257,
          "file_pos": 3,
          "file_context_length": 16999,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/datasets/rcv1.py_fetch_rcv1.sample_topics_path_fetch_rcv1.16.26.categories.1",
          "closest_snippet_line_distance": 19
        }
      ]
    },
    "sklearn/datasets/twenty_newsgroups.py": {
      "diffs": [
        {
          "start_line_old": 278,
          "end_line_old": 278,
          "file_pos": 9,
          "file_context_length": 47929,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/datasets/twenty_newsgroups.py_fetch_20newsgroups_vectorized.17_",
          "closest_snippet_line_distance": 81,
          "pos": 44,
          "context_length": 18836
        },
        {
          "start_line_old": 312,
          "end_line_old": 312,
          "file_pos": 9,
          "file_context_length": 47929,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/datasets/twenty_newsgroups.py_fetch_20newsgroups_vectorized.17_",
          "closest_snippet_line_distance": 47,
          "pos": 44,
          "context_length": 18836
        },
        {
          "start_line_old": 372,
          "end_line_old": 372,
          "file_pos": 9,
          "file_context_length": 47929,
          "pos": 16,
          "context_length": 7231
        }
      ]
    }
  },
  "vectors": 2918,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/base.py_load_iris_load_iris.7.1",
      "distance": 0.8988127708435059,
      "file_path": "sklearn/datasets/base.py",
      "start_line": 326,
      "end_line": 391,
      "tokens": 523,
      "context_length": 523
    },
    {
      "position": 2,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/base.py_load_linnerud_load_linnerud.13.1",
      "distance": 1.033600091934204,
      "file_path": "sklearn/datasets/base.py",
      "start_line": 612,
      "end_line": 671,
      "tokens": 495,
      "context_length": 1018
    },
    {
      "position": 3,
      "id": "/tmp/repos/scikit-learn/sklearn/utils/validation.py_check_X_y.X_check_X_y.6.1",
      "distance": 1.0564513206481934,
      "file_path": "sklearn/utils/validation.py",
      "start_line": 663,
      "end_line": 677,
      "tokens": 205,
      "context_length": 1223
    },
    {
      "position": 4,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/base.py_load_boston_load_boston.8.1",
      "distance": 1.059430718421936,
      "file_path": "sklearn/datasets/base.py",
      "start_line": 674,
      "end_line": 741,
      "tokens": 516,
      "context_length": 1739
    },
    {
      "position": 5,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/base.py_load_breast_cancer_load_breast_cancer.8.1",
      "distance": 1.0721039772033691,
      "file_path": "sklearn/datasets/base.py",
      "start_line": 394,
      "end_line": 476,
      "tokens": 709,
      "context_length": 2448
    },
    {
      "position": 6,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/base.py_load_diabetes_load_diabetes.10.1",
      "distance": 1.0788211822509766,
      "file_path": "sklearn/datasets/base.py",
      "start_line": 559,
      "end_line": 609,
      "tokens": 431,
      "context_length": 2879
    },
    {
      "position": 7,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/base.py_load_digits_load_digits.11.1",
      "distance": 1.0984647274017334,
      "file_path": "sklearn/datasets/base.py",
      "start_line": 479,
      "end_line": 556,
      "tokens": 614,
      "context_length": 3493
    },
    {
      "position": 8,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/base.py_load_wine_load_wine.6.1",
      "distance": 1.103980541229248,
      "file_path": "sklearn/datasets/base.py",
      "start_line": 249,
      "end_line": 323,
      "tokens": 579,
      "context_length": 4072
    },
    {
      "position": 9,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/rcv1.py_fetch_rcv1.sample_topics_path_fetch_rcv1.16.26.categories.1",
      "distance": 1.1147363185882568,
      "file_path": "sklearn/datasets/rcv1.py",
      "start_line": 155,
      "end_line": 238,
      "tokens": 797,
      "context_length": 4869,
      "file_pos": 3
    },
    {
      "position": 10,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_split.py__CVIterableWrapper.split__CVIterableWrapper.split.2.1",
      "distance": 1.1459691524505615,
      "file_path": "sklearn/model_selection/_split.py",
      "start_line": 1836,
      "end_line": 1859,
      "tokens": 129,
      "context_length": 4998
    },
    {
      "position": 11,
      "id": "/tmp/repos/scikit-learn/sklearn/feature_extraction/dict_vectorizer.py_DictVectorizer.fit_transform_DictVectorizer.fit_transform.2.1",
      "distance": 1.148444652557373,
      "file_path": "sklearn/feature_extraction/dict_vectorizer.py",
      "start_line": 213,
      "end_line": 231,
      "tokens": 144,
      "context_length": 5142
    },
    {
      "position": 12,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/svmlight_format.py_dump_svmlight_file.7_",
      "distance": 1.1563555002212524,
      "file_path": "sklearn/datasets/svmlight_format.py",
      "start_line": 452,
      "end_line": 482,
      "tokens": 313,
      "context_length": 5455
    },
    {
      "position": 13,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/__init__.py_1_fetch_rcv1",
      "distance": 1.169675588607788,
      "file_path": "sklearn/datasets/__init__.py",
      "start_line": 1,
      "end_line": 52,
      "tokens": 516,
      "context_length": 5971
    },
    {
      "position": 14,
      "id": "/tmp/repos/scikit-learn/sklearn/utils/validation.py_check_X_y_check_X_y.1",
      "distance": 1.171134114265442,
      "file_path": "sklearn/utils/validation.py",
      "start_line": 562,
      "end_line": 662,
      "tokens": 979,
      "context_length": 6950
    },
    {
      "position": 15,
      "id": "/tmp/repos/scikit-learn/sklearn/manifold/isomap.py_Isomap.fit_Isomap.fit.3.1",
      "distance": 1.1743905544281006,
      "file_path": "sklearn/manifold/isomap.py",
      "start_line": 150,
      "end_line": 167,
      "tokens": 122,
      "context_length": 7072
    },
    {
      "position": 16,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/twenty_newsgroups.py_fetch_20newsgroups_vectorized.17_",
      "distance": 1.176426649093628,
      "file_path": "sklearn/datasets/twenty_newsgroups.py",
      "start_line": 359,
      "end_line": 373,
      "tokens": 159,
      "context_length": 7231,
      "file_pos": 9
    },
    {
      "position": 17,
      "id": "/tmp/repos/scikit-learn/sklearn/manifold/isomap.py_Isomap.fit_transform_Isomap.fit_transform.3.1",
      "distance": 1.1768691539764404,
      "file_path": "sklearn/manifold/isomap.py",
      "start_line": 169,
      "end_line": 185,
      "tokens": 118,
      "context_length": 7349
    },
    {
      "position": 18,
      "id": "/tmp/repos/scikit-learn/sklearn/neighbors/base.py_SupervisedFloatMixin_SupervisedFloatMixin.fit.4.1",
      "distance": 1.1869211196899414,
      "file_path": "sklearn/neighbors/base.py",
      "start_line": 728,
      "end_line": 745,
      "tokens": 167,
      "context_length": 7516
    },
    {
      "position": 19,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_validation.py_cross_val_predict.2_cross_val_predict.17.1",
      "distance": 1.1870733499526978,
      "file_path": "sklearn/model_selection/_validation.py",
      "start_line": 699,
      "end_line": 731,
      "tokens": 348,
      "context_length": 7864
    },
    {
      "position": 20,
      "id": "/tmp/repos/scikit-learn/sklearn/isotonic.py_IsotonicRegression.y__IsotonicRegression._check_fit_data.1.1",
      "distance": 1.189060926437378,
      "file_path": "sklearn/isotonic.py",
      "start_line": 234,
      "end_line": 250,
      "tokens": 145,
      "context_length": 8009
    },
    {
      "position": 21,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/birch.py__iterate_sparse_X__iterate_sparse_X.6.5",
      "distance": 1.1901600360870361,
      "file_path": "sklearn/cluster/birch.py",
      "start_line": 22,
      "end_line": 37,
      "tokens": 142,
      "context_length": 8151
    },
    {
      "position": 22,
      "id": "/tmp/repos/scikit-learn/sklearn/cross_validation.py_cross_val_predict.preds_blocks_cross_val_predict.15.1",
      "distance": 1.1925899982452393,
      "file_path": "sklearn/cross_validation.py",
      "start_line": 1381,
      "end_line": 1398,
      "tokens": 214,
      "context_length": 8365
    },
    {
      "position": 23,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/svmlight_format.py_load_svmlight_file_load_svmlight_file.2.1",
      "distance": 1.1932660341262817,
      "file_path": "sklearn/datasets/svmlight_format.py",
      "start_line": 33,
      "end_line": 147,
      "tokens": 1125,
      "context_length": 9490
    },
    {
      "position": 24,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/svmlight_format.py__dump_svmlight__dump_svmlight.9.5",
      "distance": 1.1954631805419922,
      "file_path": "sklearn/datasets/svmlight_format.py",
      "start_line": 319,
      "end_line": 373,
      "tokens": 474,
      "context_length": 9964
    },
    {
      "position": 25,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py_26__return_float_dtype.5.1",
      "distance": 1.1961026191711426,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 33,
      "end_line": 55,
      "tokens": 157,
      "context_length": 10121
    },
    {
      "position": 26,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/svmlight_format.py_dump_svmlight_file_dump_svmlight_file.6.1",
      "distance": 1.2004361152648926,
      "file_path": "sklearn/datasets/svmlight_format.py",
      "start_line": 376,
      "end_line": 450,
      "tokens": 772,
      "context_length": 10893
    },
    {
      "position": 27,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/kernels.py_Matern.__call___Matern.__call__.6.K.2",
      "distance": 1.2064342498779297,
      "file_path": "sklearn/gaussian_process/kernels.py",
      "start_line": 1289,
      "end_line": 1345,
      "tokens": 566,
      "context_length": 11459
    },
    {
      "position": 28,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_split.py_BaseShuffleSplit._iter_indices_BaseShuffleSplit.__repr__.1.1",
      "distance": 1.2066383361816406,
      "file_path": "sklearn/model_selection/_split.py",
      "start_line": 1203,
      "end_line": 1229,
      "tokens": 161,
      "context_length": 11620
    },
    {
      "position": 29,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/birch.py_Birch.transform_Birch.transform.3.1",
      "distance": 1.2094846963882446,
      "file_path": "sklearn/cluster/birch.py",
      "start_line": 578,
      "end_line": 596,
      "tokens": 130,
      "context_length": 11750
    },
    {
      "position": 30,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/kddcup99.py_fetch_kddcup99_fetch_kddcup99.1",
      "distance": 1.2116732597351074,
      "file_path": "sklearn/datasets/kddcup99.py",
      "start_line": 48,
      "end_line": 178,
      "tokens": 1106,
      "context_length": 12856,
      "file_pos": 17
    },
    {
      "position": 31,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/kernels.py_RBF.__call___RBF.__repr__.1.2.2.1",
      "distance": 1.2141344547271729,
      "file_path": "sklearn/gaussian_process/kernels.py",
      "start_line": 1176,
      "end_line": 1242,
      "tokens": 644,
      "context_length": 13500
    },
    {
      "position": 32,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/k_means_.py_KMeans.fit_predict_KMeans.fit_predict.2.1",
      "distance": 1.2147823572158813,
      "file_path": "sklearn/cluster/k_means_.py",
      "start_line": 912,
      "end_line": 930,
      "tokens": 126,
      "context_length": 13626
    },
    {
      "position": 33,
      "id": "/tmp/repos/scikit-learn/sklearn/cross_validation.py__safe_split__safe_split.5.1",
      "distance": 1.2150365114212036,
      "file_path": "sklearn/cross_validation.py",
      "start_line": 1713,
      "end_line": 1743,
      "tokens": 279,
      "context_length": 13905
    },
    {
      "position": 34,
      "id": "/tmp/repos/scikit-learn/sklearn/manifold/mds.py_MDS.fit_transform_",
      "distance": 1.216548204421997,
      "file_path": "sklearn/manifold/mds.py",
      "start_line": 392,
      "end_line": 432,
      "tokens": 400,
      "context_length": 14305
    },
    {
      "position": 35,
      "id": "/tmp/repos/scikit-learn/benchmarks/bench_plot_randomized_svd.py_get_data_get_data.3.1",
      "distance": 1.2185945510864258,
      "file_path": "benchmarks/bench_plot_randomized_svd.py",
      "start_line": 131,
      "end_line": 178,
      "tokens": 522,
      "context_length": 14827
    },
    {
      "position": 36,
      "id": "/tmp/repos/scikit-learn/sklearn/utils/__init__.py_safe_indexing_safe_indexing.2.4.1.1",
      "distance": 1.219369888305664,
      "file_path": "sklearn/utils/__init__.py",
      "start_line": 122,
      "end_line": 164,
      "tokens": 307,
      "context_length": 15134
    },
    {
      "position": 37,
      "id": "/tmp/repos/scikit-learn/sklearn/cross_validation.py_44_cross_val_predict.parallel.1",
      "distance": 1.2205719947814941,
      "file_path": "sklearn/cross_validation.py",
      "start_line": 1283,
      "end_line": 1380,
      "tokens": 807,
      "context_length": 15941
    },
    {
      "position": 38,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/kddcup99.py_fetch_kddcup99.data_home_fetch_kddcup99.9.1",
      "distance": 1.2216145992279053,
      "file_path": "sklearn/datasets/kddcup99.py",
      "start_line": 179,
      "end_line": 233,
      "tokens": 545,
      "context_length": 16486,
      "file_pos": 21
    },
    {
      "position": 39,
      "id": "/tmp/repos/scikit-learn/sklearn/dummy.py_DummyClassifier.predict_DummyClassifier.predict.15.1",
      "distance": 1.2223138809204102,
      "file_path": "sklearn/dummy.py",
      "start_line": 162,
      "end_line": 235,
      "tokens": 595,
      "context_length": 17081
    },
    {
      "position": 40,
      "id": "/tmp/repos/scikit-learn/examples/neural_networks/plot_rbm_logistic_classification.py_13_nudge_dataset.6.1",
      "distance": 1.2244535684585571,
      "file_path": "examples/neural_networks/plot_rbm_logistic_classification.py",
      "start_line": 45,
      "end_line": 76,
      "tokens": 271,
      "context_length": 17352
    },
    {
      "position": 41,
      "id": "/tmp/repos/scikit-learn/sklearn/manifold/t_sne.py_TSNE.fit_transform_TSNE.fit_transform.4.1",
      "distance": 1.2282015085220337,
      "file_path": "sklearn/manifold/t_sne.py",
      "start_line": 862,
      "end_line": 881,
      "tokens": 146,
      "context_length": 17498
    },
    {
      "position": 42,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/k_means_.py_KMeans.fit_transform_KMeans.fit_transform.6.1",
      "distance": 1.2291932106018066,
      "file_path": "sklearn/cluster/k_means_.py",
      "start_line": 932,
      "end_line": 953,
      "tokens": 175,
      "context_length": 17673
    },
    {
      "position": 43,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/kernels.py_PairwiseKernel.__call___PairwiseKernel.__call__.6.2.1.1",
      "distance": 1.2300817966461182,
      "file_path": "sklearn/gaussian_process/kernels.py",
      "start_line": 1791,
      "end_line": 1836,
      "tokens": 418,
      "context_length": 18091
    },
    {
      "position": 44,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/twenty_newsgroups.py_fetch_20newsgroups_vectorized_fetch_20newsgroups_vectorized.target_names.1",
      "distance": 1.2312352657318115,
      "file_path": "sklearn/datasets/twenty_newsgroups.py",
      "start_line": 277,
      "end_line": 357,
      "tokens": 745,
      "context_length": 18836,
      "file_pos": 24
    },
    {
      "position": 45,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/species_distributions.py_fetch_species_distributions.archive_path_",
      "distance": 1.2328076362609863,
      "file_path": "sklearn/datasets/species_distributions.py",
      "start_line": 235,
      "end_line": 273,
      "tokens": 361,
      "context_length": 19197
    },
    {
      "position": 46,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/birch.py_Birch.predict_Birch.predict.7.1",
      "distance": 1.2334754467010498,
      "file_path": "sklearn/cluster/birch.py",
      "start_line": 555,
      "end_line": 576,
      "tokens": 164,
      "context_length": 19361
    },
    {
      "position": 47,
      "id": "/tmp/repos/scikit-learn/sklearn/utils/metaestimators.py__safe_split_",
      "distance": 1.2357795238494873,
      "file_path": "sklearn/utils/metaestimators.py",
      "start_line": 144,
      "end_line": 208,
      "tokens": 524,
      "context_length": 19885
    },
    {
      "position": 48,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_split.py_KFold._iter_test_indices_KFold._iter_test_indices.8.current.1",
      "distance": 1.2369129657745361,
      "file_path": "sklearn/model_selection/_split.py",
      "start_line": 413,
      "end_line": 426,
      "tokens": 137,
      "context_length": 20022
    },
    {
      "position": 49,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_split.py_PredefinedSplit.split_PredefinedSplit.split.3.3",
      "distance": 1.238735556602478,
      "file_path": "sklearn/model_selection/_split.py",
      "start_line": 1752,
      "end_line": 1778,
      "tokens": 161,
      "context_length": 20183
    },
    {
      "position": 50,
      "id": "/tmp/repos/scikit-learn/sklearn/neighbors/base.py_SupervisedIntegerMixin_",
      "distance": 1.2388865947723389,
      "file_path": "sklearn/neighbors/base.py",
      "start_line": 748,
      "end_line": 802,
      "tokens": 457,
      "context_length": 20640
    },
    {
      "position": 51,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/svmlight_format.py_load_svmlight_files.2_load_svmlight_files.10.1",
      "distance": 1.2395601272583008,
      "file_path": "sklearn/datasets/svmlight_format.py",
      "start_line": 279,
      "end_line": 316,
      "tokens": 378,
      "context_length": 21018
    },
    {
      "position": 52,
      "id": "/tmp/repos/scikit-learn/examples/datasets/plot_iris_dataset.py_1_",
      "distance": 1.2400561571121216,
      "file_path": "examples/datasets/plot_iris_dataset.py",
      "start_line": 1,
      "end_line": 69,
      "tokens": 538,
      "context_length": 21556
    },
    {
      "position": 53,
      "id": "/tmp/repos/scikit-learn/sklearn/decomposition/fastica_.py_FastICA.transform_FastICA.transform.6.1",
      "distance": 1.2413091659545898,
      "file_path": "sklearn/decomposition/fastica_.py",
      "start_line": 541,
      "end_line": 570,
      "tokens": 257,
      "context_length": 21813
    },
    {
      "position": 54,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/kernels.py_CompoundKernel.__call___CompoundKernel.__call__.2.5.1.1",
      "distance": 1.242645502090454,
      "file_path": "sklearn/gaussian_process/kernels.py",
      "start_line": 459,
      "end_line": 498,
      "tokens": 346,
      "context_length": 22159
    },
    {
      "position": 55,
      "id": "/tmp/repos/scikit-learn/sklearn/decomposition/fastica_.py_FastICA.fit_transform_FastICA.fit.3.1",
      "distance": 1.2437859773635864,
      "file_path": "sklearn/decomposition/fastica_.py",
      "start_line": 506,
      "end_line": 539,
      "tokens": 203,
      "context_length": 22362
    },
    {
      "position": 56,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_split.py__BaseKFold.split__BaseKFold.split.5.1",
      "distance": 1.245084285736084,
      "file_path": "sklearn/model_selection/_split.py",
      "start_line": 288,
      "end_line": 321,
      "tokens": 274,
      "context_length": 22636
    },
    {
      "position": 57,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_split.py_StratifiedShuffleSplit.split_StratifiedShuffleSplit.split.3.1",
      "distance": 1.245232343673706,
      "file_path": "sklearn/model_selection/_split.py",
      "start_line": 1586,
      "end_line": 1621,
      "tokens": 274,
      "context_length": 22910
    },
    {
      "position": 58,
      "id": "/tmp/repos/scikit-learn/sklearn/manifold/spectral_embedding_.py_SpectralEmbedding.fit_transform_",
      "distance": 1.2455313205718994,
      "file_path": "sklearn/manifold/spectral_embedding_.py",
      "start_line": 518,
      "end_line": 540,
      "tokens": 149,
      "context_length": 23059
    },
    {
      "position": 59,
      "id": "/tmp/repos/scikit-learn/sklearn/svm/base.py_BaseLibSVM.predict_BaseLibSVM.predict.4.1",
      "distance": 1.2456843852996826,
      "file_path": "sklearn/svm/base.py",
      "start_line": 282,
      "end_line": 299,
      "tokens": 156,
      "context_length": 23215
    },
    {
      "position": 60,
      "id": "/tmp/repos/scikit-learn/sklearn/kernel_approximation.py_SkewedChi2Sampler.fit_SkewedChi2Sampler.fit.9.1",
      "distance": 1.2459168434143066,
      "file_path": "sklearn/kernel_approximation.py",
      "start_line": 153,
      "end_line": 179,
      "tokens": 208,
      "context_length": 23423
    },
    {
      "position": 61,
      "id": "/tmp/repos/scikit-learn/sklearn/decomposition/incremental_pca.py_IncrementalPCA.partial_fit_",
      "distance": 1.2463934421539307,
      "file_path": "sklearn/decomposition/incremental_pca.py",
      "start_line": 191,
      "end_line": 283,
      "tokens": 851,
      "context_length": 24274
    },
    {
      "position": 62,
      "id": "/tmp/repos/scikit-learn/sklearn/preprocessing/data.py_Binarizer.transform_Binarizer.transform.4.1",
      "distance": 1.246451497077942,
      "file_path": "sklearn/preprocessing/data.py",
      "start_line": 1670,
      "end_line": 1691,
      "tokens": 210,
      "context_length": 24484
    }
  ],
  "files": [
    {
      "file_path": "sklearn/datasets/base.py",
      "position": 1,
      "tokens": 6979,
      "context_length": 6979
    },
    {
      "file_path": "sklearn/utils/validation.py",
      "position": 2,
      "tokens": 7362,
      "context_length": 14341
    },
    {
      "file_path": "sklearn/datasets/rcv1.py",
      "position": 3,
      "tokens": 2658,
      "context_length": 16999
    },
    {
      "file_path": "sklearn/model_selection/_split.py",
      "position": 4,
      "tokens": 17996,
      "context_length": 34995
    },
    {
      "file_path": "sklearn/feature_extraction/dict_vectorizer.py",
      "position": 5,
      "tokens": 2728,
      "context_length": 37723
    },
    {
      "file_path": "sklearn/datasets/svmlight_format.py",
      "position": 6,
      "tokens": 4511,
      "context_length": 42234
    },
    {
      "file_path": "sklearn/datasets/__init__.py",
      "position": 7,
      "tokens": 858,
      "context_length": 43092
    },
    {
      "file_path": "sklearn/manifold/isomap.py",
      "position": 8,
      "tokens": 1684,
      "context_length": 44776
    },
    {
      "file_path": "sklearn/datasets/twenty_newsgroups.py",
      "position": 9,
      "tokens": 3153,
      "context_length": 47929
    },
    {
      "file_path": "sklearn/neighbors/base.py",
      "position": 10,
      "tokens": 6680,
      "context_length": 54609
    },
    {
      "file_path": "sklearn/model_selection/_validation.py",
      "position": 11,
      "tokens": 11974,
      "context_length": 66583
    },
    {
      "file_path": "sklearn/isotonic.py",
      "position": 12,
      "tokens": 3378,
      "context_length": 69961
    },
    {
      "file_path": "sklearn/cluster/birch.py",
      "position": 13,
      "tokens": 5291,
      "context_length": 75252
    },
    {
      "file_path": "sklearn/cross_validation.py",
      "position": 14,
      "tokens": 17492,
      "context_length": 92744
    },
    {
      "file_path": "sklearn/metrics/pairwise.py",
      "position": 15,
      "tokens": 11532,
      "context_length": 104276
    },
    {
      "file_path": "sklearn/gaussian_process/kernels.py",
      "position": 16,
      "tokens": 15252,
      "context_length": 119528
    },
    {
      "file_path": "sklearn/datasets/kddcup99.py",
      "position": 17,
      "tokens": 3176,
      "context_length": 122704
    },
    {
      "file_path": "sklearn/cluster/k_means_.py",
      "position": 18,
      "tokens": 13725,
      "context_length": 136429
    },
    {
      "file_path": "sklearn/manifold/mds.py",
      "position": 19,
      "tokens": 3827,
      "context_length": 140256
    },
    {
      "file_path": "benchmarks/bench_plot_randomized_svd.py",
      "position": 20,
      "tokens": 4384,
      "context_length": 144640
    },
    {
      "file_path": "sklearn/utils/__init__.py",
      "position": 21,
      "tokens": 3906,
      "context_length": 148546
    },
    {
      "file_path": "sklearn/dummy.py",
      "position": 22,
      "tokens": 3749,
      "context_length": 152295
    },
    {
      "file_path": "examples/neural_networks/plot_rbm_logistic_classification.py",
      "position": 23,
      "tokens": 1091,
      "context_length": 153386
    },
    {
      "file_path": "sklearn/manifold/t_sne.py",
      "position": 24,
      "tokens": 8309,
      "context_length": 161695
    },
    {
      "file_path": "sklearn/datasets/species_distributions.py",
      "position": 25,
      "tokens": 2185,
      "context_length": 163880
    },
    {
      "file_path": "sklearn/utils/metaestimators.py",
      "position": 26,
      "tokens": 1654,
      "context_length": 165534
    },
    {
      "file_path": "examples/datasets/plot_iris_dataset.py",
      "position": 27,
      "tokens": 546,
      "context_length": 166080
    },
    {
      "file_path": "sklearn/decomposition/fastica_.py",
      "position": 28,
      "tokens": 4713,
      "context_length": 170793
    },
    {
      "file_path": "sklearn/manifold/spectral_embedding_.py",
      "position": 29,
      "tokens": 4925,
      "context_length": 175718
    },
    {
      "file_path": "sklearn/svm/base.py",
      "position": 30,
      "tokens": 7758,
      "context_length": 183476
    },
    {
      "file_path": "sklearn/kernel_approximation.py",
      "position": 31,
      "tokens": 4124,
      "context_length": 187600
    },
    {
      "file_path": "sklearn/decomposition/incremental_pca.py",
      "position": 32,
      "tokens": 2549,
      "context_length": 190149
    },
    {
      "file_path": "sklearn/preprocessing/data.py",
      "position": 33,
      "tokens": 25897,
      "context_length": 216046
    }
  ]
}