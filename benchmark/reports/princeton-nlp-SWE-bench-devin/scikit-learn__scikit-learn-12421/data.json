{
  "instance_id": "scikit-learn__scikit-learn-12421",
  "model_patch": "diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py\nindex 9814a4815..e174daac2 100755\n--- a/sklearn/cluster/optics_.py\n+++ b/sklearn/cluster/optics_.py\n@@ -394,7 +394,7 @@ class OPTICS(BaseEstimator, ClusterMixin):\n         self : instance of OPTICS\n             The instance.\n         \"\"\"\n-        X = check_array(X, dtype=np.float)\n+        X = check_array(X, dtype='float64')\n \n         n_samples = len(X)\n \n@@ -478,8 +478,10 @@ class OPTICS(BaseEstimator, ClusterMixin):\n                                         working_memory=working_memory)\n         slices = gen_batches(n_samples, chunk_n_rows)\n         for sl in slices:\n-            core_distances[sl] = neighbors.kneighbors(\n-                X[sl], self.min_samples)[0][:, -1]\n+            distances = neighbors.kneighbors(X[sl], self.min_samples)[0][:, -1]\n+            mask = distances > self.max_eps\n+            distances[mask] = np.inf\n+            core_distances[sl] = distances\n         return core_distances\n \n     def _calculate_optics_order(self, X, nbrs):\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "sklearn/cluster/optics_.py"
  ],
  "repo": "scikit-learn/scikit-learn",
  "base_commit": "013d295a13721ffade7ac321437c6d4458a64c7d",
  "patch": "diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py\n--- a/sklearn/cluster/optics_.py\n+++ b/sklearn/cluster/optics_.py\n@@ -39,9 +39,8 @@ def optics(X, min_samples=5, max_eps=np.inf, metric='minkowski',\n     This implementation deviates from the original OPTICS by first performing\n     k-nearest-neighborhood searches on all points to identify core sizes, then\n     computing only the distances to unprocessed points when constructing the\n-    cluster order. It also does not employ a heap to manage the expansion\n-    candiates, but rather uses numpy masked arrays. This can be potentially\n-    slower with some parameters (at the benefit from using fast numpy code).\n+    cluster order. Note that we do not employ a heap to manage the expansion\n+    candidates, so the time complexity will be O(n^2).\n \n     Read more in the :ref:`User Guide <optics>`.\n \n@@ -199,7 +198,8 @@ class OPTICS(BaseEstimator, ClusterMixin):\n     This implementation deviates from the original OPTICS by first performing\n     k-nearest-neighborhood searches on all points to identify core sizes, then\n     computing only the distances to unprocessed points when constructing the\n-    cluster order.\n+    cluster order. Note that we do not employ a heap to manage the expansion\n+    candidates, so the time complexity will be O(n^2).\n \n     Read more in the :ref:`User Guide <optics>`.\n \n@@ -430,7 +430,11 @@ def fit(self, X, y=None):\n                                 n_jobs=self.n_jobs)\n \n         nbrs.fit(X)\n+        # Here we first do a kNN query for each point, this differs from\n+        # the original OPTICS that only used epsilon range queries.\n         self.core_distances_ = self._compute_core_distances_(X, nbrs)\n+        # OPTICS puts an upper limit on these, use inf for undefined.\n+        self.core_distances_[self.core_distances_ > self.max_eps] = np.inf\n         self.ordering_ = self._calculate_optics_order(X, nbrs)\n \n         indices_, self.labels_ = _extract_optics(self.ordering_,\n@@ -445,7 +449,6 @@ def fit(self, X, y=None):\n         return self\n \n     # OPTICS helper functions\n-\n     def _compute_core_distances_(self, X, neighbors, working_memory=None):\n         \"\"\"Compute the k-th nearest neighbor of each sample\n \n@@ -485,37 +488,38 @@ def _compute_core_distances_(self, X, neighbors, working_memory=None):\n     def _calculate_optics_order(self, X, nbrs):\n         # Main OPTICS loop. Not parallelizable. The order that entries are\n         # written to the 'ordering_' list is important!\n+        # Note that this implementation is O(n^2) theoretically, but\n+        # supposedly with very low constant factors.\n         processed = np.zeros(X.shape[0], dtype=bool)\n         ordering = np.zeros(X.shape[0], dtype=int)\n-        ordering_idx = 0\n-        for point in range(X.shape[0]):\n-            if processed[point]:\n-                continue\n-            if self.core_distances_[point] <= self.max_eps:\n-                while not processed[point]:\n-                    processed[point] = True\n-                    ordering[ordering_idx] = point\n-                    ordering_idx += 1\n-                    point = self._set_reach_dist(point, processed, X, nbrs)\n-            else:  # For very noisy points\n-                ordering[ordering_idx] = point\n-                ordering_idx += 1\n-                processed[point] = True\n+        for ordering_idx in range(X.shape[0]):\n+            # Choose next based on smallest reachability distance\n+            # (And prefer smaller ids on ties, possibly np.inf!)\n+            index = np.where(processed == 0)[0]\n+            point = index[np.argmin(self.reachability_[index])]\n+\n+            processed[point] = True\n+            ordering[ordering_idx] = point\n+            if self.core_distances_[point] != np.inf:\n+                self._set_reach_dist(point, processed, X, nbrs)\n         return ordering\n \n     def _set_reach_dist(self, point_index, processed, X, nbrs):\n         P = X[point_index:point_index + 1]\n+        # Assume that radius_neighbors is faster without distances\n+        # and we don't need all distances, nevertheless, this means\n+        # we may be doing some work twice.\n         indices = nbrs.radius_neighbors(P, radius=self.max_eps,\n                                         return_distance=False)[0]\n \n         # Getting indices of neighbors that have not been processed\n         unproc = np.compress((~np.take(processed, indices)).ravel(),\n                              indices, axis=0)\n-        # Keep n_jobs = 1 in the following lines...please\n+        # Neighbors of current point are already processed.\n         if not unproc.size:\n-            # Everything is already processed. Return to main loop\n-            return point_index\n+            return\n \n+        # Only compute distances to unprocessed neighbors:\n         if self.metric == 'precomputed':\n             dists = X[point_index, unproc]\n         else:\n@@ -527,12 +531,6 @@ def _set_reach_dist(self, point_index, processed, X, nbrs):\n         self.reachability_[unproc[improved]] = rdists[improved]\n         self.predecessor_[unproc[improved]] = point_index\n \n-        # Choose next based on smallest reachability distance\n-        # (And prefer smaller ids on ties).\n-        # All unprocessed points qualify, not just new neighbors (\"unproc\")\n-        return (np.ma.array(self.reachability_, mask=processed)\n-                .argmin(fill_value=np.inf))\n-\n     def extract_dbscan(self, eps):\n         \"\"\"Performs DBSCAN extraction for an arbitrary epsilon.\n \n",
  "test_patch": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -22,7 +22,7 @@\n \n \n rng = np.random.RandomState(0)\n-n_points_per_cluster = 50\n+n_points_per_cluster = 10\n C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n@@ -155,16 +155,10 @@ def test_dbscan_optics_parity(eps, min_samples):\n     assert percent_mismatch <= 0.05\n \n \n-def test_auto_extract_hier():\n-    # Tests auto extraction gets correct # of clusters with varying density\n-    clust = OPTICS(min_samples=9).fit(X)\n-    assert_equal(len(set(clust.labels_)), 6)\n-\n-\n # try arbitrary minimum sizes\n @pytest.mark.parametrize('min_cluster_size', range(2, X.shape[0] // 10, 23))\n def test_min_cluster_size(min_cluster_size):\n-    redX = X[::10]  # reduce for speed\n+    redX = X[::2]  # reduce for speed\n     clust = OPTICS(min_samples=9, min_cluster_size=min_cluster_size).fit(redX)\n     cluster_sizes = np.bincount(clust.labels_[clust.labels_ != -1])\n     if cluster_sizes.size:\n@@ -215,171 +209,100 @@ def test_cluster_sigmin_pruning(reach, n_child, members):\n     assert_array_equal(members, root.children[0].points)\n \n \n+def test_processing_order():\n+    # Ensure that we consider all unprocessed points,\n+    # not only direct neighbors. when picking the next point.\n+    Y = [[0], [10], [-10], [25]]\n+    clust = OPTICS(min_samples=3, max_eps=15).fit(Y)\n+    assert_array_equal(clust.reachability_, [np.inf, 10, 10, 15])\n+    assert_array_equal(clust.core_distances_, [10, 15, np.inf, np.inf])\n+    assert_array_equal(clust.ordering_, [0, 1, 2, 3])\n+\n+\n def test_compare_to_ELKI():\n     # Expected values, computed with (future) ELKI 0.7.5 using:\n     # java -jar elki.jar cli -dbc.in csv -dbc.filter FixedDBIDsFilter\n     #   -algorithm clustering.optics.OPTICSHeap -optics.minpts 5\n     # where the FixedDBIDsFilter gives 0-indexed ids.\n-    r = [np.inf, 0.7865694338710508, 0.4373157299595305, 0.4121908069391695,\n-         0.302907091394212, 0.20815674060999778, 0.20815674060999778,\n-         0.15190193459676368, 0.15190193459676368, 0.28229645104833345,\n-         0.302907091394212, 0.30507239477026865, 0.30820580778767087,\n-         0.3289019667317037, 0.3458462228589966, 0.3458462228589966,\n-         0.2931114364132193, 0.2931114364132193, 0.2562790168458507,\n-         0.23654635530592025, 0.37903448688824876, 0.3920764620583683,\n-         0.4121908069391695, 0.4364542226186831, 0.45523658462146793,\n-         0.458757846268185, 0.458757846268185, 0.4752907412198826,\n-         0.42350366820623375, 0.42350366820623375, 0.42350366820623375,\n-         0.47758738570352993, 0.47758738570352993, 0.4776963110272057,\n-         0.5272079288923731, 0.5591861752070968, 0.5592057084987357,\n-         0.5609913790596295, 0.5909117211348757, 0.5940470220777727,\n-         0.5940470220777727, 0.6861627576116127, 0.687795873252133,\n-         0.7538541412862811, 0.7865694338710508, 0.8038180561910464,\n-         0.8038180561910464, 0.8242451615289921, 0.8548361202185057,\n-         0.8790098789921685, 2.9281214555815764, 1.3256656984284734,\n-         0.19590944671099267, 0.1339924636672767, 0.1137384200258616,\n-         0.061455005237474075, 0.061455005237474075, 0.061455005237474075,\n-         0.045627777293497276, 0.045627777293497276, 0.045627777293497276,\n-         0.04900902556283447, 0.061455005237474075, 0.06225461602815799,\n-         0.06835750467748272, 0.07882900172724974, 0.07882900172724974,\n-         0.07650735397943846, 0.07650735397943846, 0.07650735397943846,\n-         0.07650735397943846, 0.07650735397943846, 0.07113275489288699,\n-         0.07890196345324527, 0.07052683707634783, 0.07052683707634783,\n-         0.07052683707634783, 0.08284027053523288, 0.08725436842020087,\n-         0.08725436842020087, 0.09010229261951723, 0.09128578974358925,\n-         0.09154172670176584, 0.0968576383038391, 0.12007572768323092,\n-         0.12024155806196564, 0.12141990481584404, 0.1339924636672767,\n-         0.13694322786307633, 0.14275793459246572, 0.15093125027309579,\n-         0.17927454395170142, 0.18151803569400365, 0.1906028449191095,\n-         0.1906028449191095, 0.19604486784973194, 0.2096539172540186,\n-         0.2096539172540186, 0.21614333983312325, 0.22036454909290296,\n-         0.23610322103910933, 0.26028003932256766, 0.2607126030060721,\n-         0.2891824876072483, 0.3258089271514364, 0.35968687619960743,\n-         0.4512973330510512, 0.4746141313843085, 0.5958585488429471,\n-         0.6468718886525733, 0.6878453052524358, 0.6911582799500199,\n-         0.7172169499815705, 0.7209874999572031, 0.6326884657912096,\n-         0.5755681293026617, 0.5755681293026617, 0.5755681293026617,\n-         0.6015042225447333, 0.6756244556376542, 0.4722384908959966,\n-         0.08775739179493615, 0.06665303472021758, 0.056308477780164796,\n-         0.056308477780164796, 0.05507767260835565, 0.05368146914586802,\n-         0.05163427719303039, 0.05163427719303039, 0.05163427719303039,\n-         0.04918757627098621, 0.04918757627098621, 0.05368146914586802,\n-         0.05473720349424546, 0.05473720349424546, 0.048442038421760626,\n-         0.048442038421760626, 0.04598840269934622, 0.03984301937835033,\n-         0.04598840269934622, 0.04598840269934622, 0.04303884892957088,\n-         0.04303884892957088, 0.04303884892957088, 0.0431802780806032,\n-         0.0520412490141781, 0.056308477780164796, 0.05080724020124642,\n-         0.05080724020124642, 0.05080724020124642, 0.06385565101399236,\n-         0.05840878369200427, 0.0474472391259039, 0.0474472391259039,\n-         0.04232512684465669, 0.04232512684465669, 0.04232512684465669,\n-         0.0474472391259039, 0.051802632822946656, 0.051802632822946656,\n-         0.05316405104684577, 0.05316405104684577, 0.05840878369200427,\n-         0.06385565101399236, 0.08025248922898705, 0.08775739179493615,\n-         0.08993337040710143, 0.08993337040710143, 0.08993337040710143,\n-         0.08993337040710143, 0.297457175321605, 0.29763608186278934,\n-         0.3415255849656254, 0.34713336941105105, 0.44108940848708167,\n-         0.35942962652965604, 0.35942962652965604, 0.33609522256535296,\n-         0.5008111387107295, 0.5333587622018111, 0.6223243743872802,\n-         0.6793840035409552, 0.7445032492109848, 0.7445032492109848,\n-         0.6556432627279256, 0.6556432627279256, 0.6556432627279256,\n-         0.8196566935960162, 0.8724089149982351, 0.9352758042365477,\n-         0.9352758042365477, 1.0581847953137133, 1.0684332509194163,\n-         1.0887817699873303, 1.2552604310322708, 1.3993856001769436,\n-         1.4869615658197606, 1.6588098267326852, 1.679969559453028,\n-         1.679969559453028, 1.6860509219163458, 1.6860509219163458,\n-         1.1465697826627317, 0.992866533434785, 0.7691908270707519,\n-         0.578131499171622, 0.578131499171622, 0.578131499171622,\n-         0.5754243919945694, 0.8416199360035114, 0.8722493727270406,\n-         0.9156549976203665, 0.9156549976203665, 0.7472322844356064,\n-         0.715219324518981, 0.715219324518981, 0.715219324518981,\n-         0.7472322844356064, 0.820988298336316, 0.908958489674247,\n-         0.9234036745782839, 0.9519521817942455, 0.992866533434785,\n-         0.992866533434785, 0.9995692674695029, 1.0727415198904493,\n-         1.1395519941203158, 1.1395519941203158, 1.1741737271442092,\n-         1.212860115632712, 0.8724097897372123, 0.8724097897372123,\n-         0.8724097897372123, 1.2439272570611581, 1.2439272570611581,\n-         1.3524538390109015, 1.3524538390109015, 1.2982303284415664,\n-         1.3610655849680207, 1.3802783392089437, 1.3802783392089437,\n-         1.4540636953090629, 1.5879329500533819, 1.5909193228826986,\n-         1.72931779186001, 1.9619075944592093, 2.1994355761906257,\n-         2.2508672067362165, 2.274436122235927, 2.417635732260135,\n-         3.014235905390584, 0.30616929141177107, 0.16449675872754976,\n-         0.09071681523805683, 0.09071681523805683, 0.09071681523805683,\n-         0.08727060912039632, 0.09151721189581336, 0.12277953408786725,\n-         0.14285575406641507, 0.16449675872754976, 0.16321992344119793,\n-         0.1330971730344373, 0.11429891993167259, 0.11429891993167259,\n-         0.11429891993167259, 0.11429891993167259, 0.11429891993167259,\n-         0.0945498340011516, 0.11410457435712089, 0.1196414019798306,\n-         0.12925682285016715, 0.12925682285016715, 0.12925682285016715,\n-         0.12864887158869853, 0.12864887158869853, 0.12864887158869853,\n-         0.13369634918690246, 0.14330826543275352, 0.14877705862323184,\n-         0.15203263952428328, 0.15696350160889708, 0.1585326700393211,\n-         0.1585326700393211, 0.16034306786654595, 0.16034306786654595,\n-         0.15053328296567992, 0.16396729418886688, 0.16763548009617293,\n-         0.1732029325454474, 0.21163390061029352, 0.21497664171864372,\n-         0.22125889949299, 0.240251070192081, 0.240251070192081,\n-         0.2413620965310808, 0.26319419022234064, 0.26319419022234064,\n-         0.27989712380504483, 0.2909782800714374]\n-    o = [0, 3, 6, 7, 15, 4, 27, 28, 49, 17, 35, 47, 46, 39, 13, 19,\n-         22, 29, 30, 38, 34, 32, 43, 8, 25, 9, 37, 23, 33, 40, 44, 11, 36, 5,\n-         45, 48, 41, 26, 24, 20, 31, 2, 16, 10, 18, 14, 42, 12, 1, 21, 234,\n-         132, 112, 115, 107, 110, 120, 114, 100, 131, 137, 145, 130, 121, 134,\n-         116, 149, 108, 111, 113, 142, 148, 119, 104, 126, 133, 138, 127, 101,\n-         105, 103, 106, 125, 140, 123, 147, 144, 129, 141, 117, 143, 136, 128,\n-         122, 124, 102, 109, 249, 146, 118, 135, 245, 139, 224, 241, 217, 202,\n-         248, 233, 214, 236, 211, 206, 231, 212, 221, 229, 244, 208, 226, 83,\n-         76, 53, 77, 88, 62, 66, 65, 89, 93, 79, 95, 74, 70, 82, 51, 73, 87,\n-         67, 94, 56, 52, 63, 80, 75, 57, 96, 60, 69, 90, 86, 58, 68, 81, 64,\n-         84, 85, 97, 59, 98, 61, 71, 78, 92, 50, 91, 55, 54, 72, 99, 210, 201,\n-         216, 239, 203, 218, 219, 222, 240, 294, 243, 246, 204, 220, 200, 215,\n-         230, 225, 205, 207, 237, 223, 235, 209, 228, 238, 227, 285, 232, 256,\n-         281, 270, 260, 252, 272, 268, 292, 298, 269, 275, 257, 250, 284, 283,\n-         286, 295, 297, 293, 289, 258, 299, 282, 262, 296, 287, 267, 255, 263,\n-         288, 276, 251, 266, 274, 271, 277, 261, 279, 290, 253, 254, 291, 259,\n-         280, 278, 273, 247, 265, 242, 264, 213, 199, 174, 154, 152, 180, 186,\n-         195, 170, 181, 176, 187, 173, 157, 159, 158, 172, 182, 183, 151, 197,\n-         177, 160, 156, 171, 175, 184, 193, 161, 179, 196, 185, 192, 165, 166,\n-         164, 189, 155, 162, 188, 153, 178, 169, 194, 150, 163, 198, 190, 191,\n-         168, 167]\n-    p = [-1, 0, 3, 6, 7, 15, 15, 27, 27, 4, 7, 49, 47, 4, 39, 39,\n-         19, 19, 29, 30, 30, 13, 6, 43, 34, 32, 32, 25, 23, 23, 23, 3, 11, 46,\n-         46, 45, 9, 38, 33, 26, 26, 8, 20, 33, 0, 18, 18, 2, 18, 44, 0, 234,\n-         132, 112, 115, 107, 107, 120, 114, 114, 114, 114, 107, 100, 100, 134,\n-         134, 149, 149, 108, 108, 108, 148, 113, 104, 104, 104, 142, 127, 127,\n-         126, 138, 126, 148, 127, 148, 127, 112, 147, 116, 117, 101, 145, 128,\n-         128, 122, 136, 136, 249, 102, 102, 118, 143, 146, 245, 123, 139, 241,\n-         241, 217, 248, 202, 248, 224, 231, 212, 212, 212, 229, 229, 226, 83,\n-         76, 53, 53, 88, 62, 66, 66, 66, 93, 93, 79, 93, 70, 82, 82, 73, 87,\n-         73, 94, 56, 56, 56, 63, 67, 53, 96, 96, 96, 69, 86, 58, 58, 81, 81,\n-         81, 58, 64, 64, 59, 59, 86, 69, 78, 83, 84, 55, 55, 55, 72, 50, 201,\n-         210, 216, 203, 203, 219, 54, 240, 239, 240, 236, 236, 220, 220, 220,\n-         217, 139, 243, 243, 204, 211, 246, 215, 223, 294, 209, 227, 227, 209,\n-         281, 270, 260, 252, 272, 272, 272, 298, 269, 298, 275, 275, 284, 283,\n-         283, 283, 284, 286, 283, 298, 299, 260, 260, 250, 299, 258, 258, 296,\n-         250, 276, 276, 276, 289, 289, 267, 267, 279, 261, 277, 277, 258, 266,\n-         290, 209, 207, 290, 228, 278, 228, 290, 199, 174, 154, 154, 154, 186,\n-         186, 180, 170, 174, 187, 173, 157, 159, 157, 157, 159, 183, 183, 172,\n-         197, 160, 160, 171, 171, 171, 151, 173, 184, 151, 196, 185, 185, 179,\n-         179, 189, 177, 165, 175, 162, 164, 181, 169, 169, 181, 178, 178, 178,\n-         168]\n+    r1 = [np.inf, 1.0574896366427478, 0.7587934993548423, 0.7290174038973836,\n+          0.7290174038973836, 0.7290174038973836, 0.6861627576116127,\n+          0.7587934993548423, 0.9280118450166668, 1.1748022534146194,\n+          3.3355455741292257, 0.49618389254482587, 0.2552805046961355,\n+          0.2552805046961355, 0.24944622248445714, 0.24944622248445714,\n+          0.24944622248445714, 0.2552805046961355, 0.2552805046961355,\n+          0.3086779122185853, 4.163024452756142, 1.623152630340929,\n+          0.45315840475822655, 0.25468325192031926, 0.2254004358159971,\n+          0.18765711877083036, 0.1821471333893275, 0.1821471333893275,\n+          0.18765711877083036, 0.18765711877083036, 0.2240202988740153,\n+          1.154337614548715, 1.342604473837069, 1.323308536402633,\n+          0.8607514948648837, 0.27219111215810565, 0.13260875220533205,\n+          0.13260875220533205, 0.09890587675958984, 0.09890587675958984,\n+          0.13548790801634494, 0.1575483940837384, 0.17515137170530226,\n+          0.17575920159442388, 0.27219111215810565, 0.6101447895405373,\n+          1.3189208094864302, 1.323308536402633, 2.2509184159764577,\n+          2.4517810628594527, 3.675977064404973, 3.8264795626020365,\n+          2.9130735341510614, 2.9130735341510614, 2.9130735341510614,\n+          2.9130735341510614, 2.8459300127258036, 2.8459300127258036,\n+          2.8459300127258036, 3.0321982337972537]\n+    o1 = [0, 3, 6, 4, 7, 8, 2, 9, 5, 1, 31, 30, 32, 34, 33, 38, 39, 35, 37, 36,\n+          44, 21, 23, 24, 22, 25, 27, 29, 26, 28, 20, 40, 45, 46, 10, 15, 11,\n+          13, 17, 19, 18, 12, 16, 14, 47, 49, 43, 48, 42, 41, 53, 57, 51, 52,\n+          56, 59, 54, 55, 58, 50]\n+    p1 = [-1, 0, 3, 6, 6, 6, 8, 3, 7, 5, 1, 31, 30, 30, 34, 34, 34, 32, 32, 37,\n+          36, 44, 21, 23, 24, 22, 25, 25, 22, 22, 22, 21, 40, 45, 46, 10, 15,\n+          15, 13, 13, 15, 11, 19, 15, 10, 47, 12, 45, 14, 43, 42, 53, 57, 57,\n+          57, 57, 59, 59, 59, 58]\n \n     # Tests against known extraction array\n     # Does NOT work with metric='euclidean', because sklearn euclidean has\n     # worse numeric precision. 'minkowski' is slower but more accurate.\n-    clust = OPTICS(min_samples=5).fit(X)\n+    clust1 = OPTICS(min_samples=5).fit(X)\n \n-    assert_array_equal(clust.ordering_, np.array(o))\n-    assert_array_equal(clust.predecessor_[clust.ordering_], np.array(p))\n-    assert_allclose(clust.reachability_[clust.ordering_], np.array(r))\n+    assert_array_equal(clust1.ordering_, np.array(o1))\n+    assert_array_equal(clust1.predecessor_[clust1.ordering_], np.array(p1))\n+    assert_allclose(clust1.reachability_[clust1.ordering_], np.array(r1))\n     # ELKI currently does not print the core distances (which are not used much\n     # in literature, but we can at least ensure to have this consistency:\n-    for i in clust.ordering_[1:]:\n-        assert (clust.reachability_[i] >=\n-                clust.core_distances_[clust.predecessor_[i]])\n+    for i in clust1.ordering_[1:]:\n+        assert (clust1.reachability_[i] >=\n+                clust1.core_distances_[clust1.predecessor_[i]])\n+\n+    # Expected values, computed with (future) ELKI 0.7.5 using\n+    r2 = [np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf,\n+          np.inf, np.inf, np.inf, 0.27219111215810565, 0.13260875220533205,\n+          0.13260875220533205, 0.09890587675958984, 0.09890587675958984,\n+          0.13548790801634494, 0.1575483940837384, 0.17515137170530226,\n+          0.17575920159442388, 0.27219111215810565, 0.4928068613197889,\n+          np.inf, 0.2666183922512113, 0.18765711877083036, 0.1821471333893275,\n+          0.1821471333893275, 0.1821471333893275, 0.18715928772277457,\n+          0.18765711877083036, 0.18765711877083036, 0.25468325192031926,\n+          np.inf, 0.2552805046961355, 0.2552805046961355, 0.24944622248445714,\n+          0.24944622248445714, 0.24944622248445714, 0.2552805046961355,\n+          0.2552805046961355, 0.3086779122185853, 0.34466409325984865,\n+          np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf,\n+          np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf,\n+          np.inf, np.inf]\n+    o2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 11, 13, 17, 19, 18, 12, 16, 14,\n+          47, 46, 20, 22, 25, 23, 27, 29, 24, 26, 28, 21, 30, 32, 34, 33, 38,\n+          39, 35, 37, 36, 31, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53,\n+          54, 55, 56, 57, 58, 59]\n+    p2 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 15, 15, 13, 13, 15,\n+          11, 19, 15, 10, 47, -1, 20, 22, 25, 25, 25, 25, 22, 22, 23, -1, 30,\n+          30, 34, 34, 34, 32, 32, 37, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+          -1, -1, -1, -1, -1, -1, -1, -1, -1]\n+    clust2 = OPTICS(min_samples=5, max_eps=0.5).fit(X)\n+\n+    assert_array_equal(clust2.ordering_, np.array(o2))\n+    assert_array_equal(clust2.predecessor_[clust2.ordering_], np.array(p2))\n+    assert_allclose(clust2.reachability_[clust2.ordering_], np.array(r2))\n+\n+    index = np.where(clust1.core_distances_ <= 0.5)[0]\n+    assert_allclose(clust1.core_distances_[index],\n+                    clust2.core_distances_[index])\n \n \n def test_precomputed_dists():\n-    redX = X[::10]\n+    redX = X[::2]\n     dists = pairwise_distances(redX, metric='euclidean')\n     clust1 = OPTICS(min_samples=10, algorithm='brute',\n                     metric='precomputed').fit(dists)\n@@ -388,13 +311,3 @@ def test_precomputed_dists():\n \n     assert_allclose(clust1.reachability_, clust2.reachability_)\n     assert_array_equal(clust1.labels_, clust2.labels_)\n-\n-\n-def test_processing_order():\n-    \"\"\"Early dev version of OPTICS would not consider all unprocessed points,\n-    but only direct neighbors. This tests against this mistake.\"\"\"\n-    Y = [[0], [10], [-10], [25]]\n-    clust = OPTICS(min_samples=3, max_eps=15).fit(Y)\n-    assert_array_equal(clust.reachability_, [np.inf, 10, 10, 15])\n-    assert_array_equal(clust.core_distances_, [10, 15, 20, 25])\n-    assert_array_equal(clust.ordering_, [0, 1, 2, 3])\n",
  "problem_statement": "OPTICS: self.core_distances_ inconsistent with documentation&R implementation\nIn the doc, we state that ``Points which will never be core have a distance of inf.``, but it's not the case.\r\nResult from scikit-learn:\r\n```\r\nimport numpy as np\r\nfrom sklearn.cluster import OPTICS\r\nX = np.array([-5, -2, -4.8, -1.8, -5.2, -2.2, 100, 200, 4, 2, 3.8, 1.8, 4.2, 2.2])\r\nX = X.reshape(-1, 2)\r\nclust = OPTICS(min_samples=3, max_bound=1)\r\nclust.fit(X)\r\nclust.core_distances_\r\n```\r\n```\r\narray([  0.28284271,   0.56568542,   0.56568542, 220.04544985, \r\n         0.28284271,   0.56568542,   0.56568542])\r\n```\r\nResult from R:\r\n```\r\nx <- matrix(c(-5, -2, -4.8, -1.8, -5.2, -2.2, 100, 200,\r\n              4, 2, 3.8, 1.8, 4.2, 2.2), ncol=2, byrow=TRUE)\r\nresult <- optics(x, eps=1, minPts=3)\r\nresult$coredist\r\n```\r\n```\r\n[1] 0.2828427 0.5656854 0.5656854       Inf 0.2828427 0.5656854 0.5656854\r\n```\n",
  "hints_text": "Does this have an impact on the clustering? I assume it doesn't. But yes, I\nsuppose we can mask those out as inf.\n\n> Does this have an impact on the clustering?\r\n\r\nAFAIK, no. So maybe it's not an urgent one. (I'll try to debug other urgent issues these days). My point here is that we should ensure the correctness of public attributes (at least consistent with our doc).\nI agree\n",
  "created_at": "2018-10-19T09:32:51Z",
  "version": "0.21",
  "FAIL_TO_PASS": "[\"sklearn/cluster/tests/test_optics.py::test_compare_to_ELKI\", \"sklearn/cluster/tests/test_optics.py::test_processing_order\"]",
  "PASS_TO_PASS": "[\"sklearn/cluster/tests/test_optics.py::test_bad_extract\", \"sklearn/cluster/tests/test_optics.py::test_bad_reachability\", \"sklearn/cluster/tests/test_optics.py::test_close_extract\", \"sklearn/cluster/tests/test_optics.py::test_cluster_sigmin_pruning[reach0-2-members0]\", \"sklearn/cluster/tests/test_optics.py::test_cluster_sigmin_pruning[reach1-1-members1]\", \"sklearn/cluster/tests/test_optics.py::test_correct_number_of_clusters\", \"sklearn/cluster/tests/test_optics.py::test_dbscan_optics_parity[10-0.1]\", \"sklearn/cluster/tests/test_optics.py::test_dbscan_optics_parity[10-0.3]\", \"sklearn/cluster/tests/test_optics.py::test_dbscan_optics_parity[10-0.5]\", \"sklearn/cluster/tests/test_optics.py::test_dbscan_optics_parity[20-0.1]\", \"sklearn/cluster/tests/test_optics.py::test_dbscan_optics_parity[20-0.3]\", \"sklearn/cluster/tests/test_optics.py::test_dbscan_optics_parity[20-0.5]\", \"sklearn/cluster/tests/test_optics.py::test_dbscan_optics_parity[3-0.1]\", \"sklearn/cluster/tests/test_optics.py::test_dbscan_optics_parity[3-0.3]\", \"sklearn/cluster/tests/test_optics.py::test_dbscan_optics_parity[3-0.5]\", \"sklearn/cluster/tests/test_optics.py::test_empty_extract\", \"sklearn/cluster/tests/test_optics.py::test_min_cluster_size[2]\", \"sklearn/cluster/tests/test_optics.py::test_min_cluster_size_invalid2\", \"sklearn/cluster/tests/test_optics.py::test_min_cluster_size_invalid[-1]\", \"sklearn/cluster/tests/test_optics.py::test_min_cluster_size_invalid[0]\", \"sklearn/cluster/tests/test_optics.py::test_min_cluster_size_invalid[1.1]\", \"sklearn/cluster/tests/test_optics.py::test_min_cluster_size_invalid[2.2]\", \"sklearn/cluster/tests/test_optics.py::test_minimum_number_of_sample_check\", \"sklearn/cluster/tests/test_optics.py::test_precomputed_dists\"]",
  "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6",
  "patch_files": [
    "sklearn/cluster/optics_.py"
  ],
  "test_patch_files": [
    "sklearn/cluster/tests/test_optics.py"
  ],
  "patch_diff_details": {
    "sklearn/cluster/optics_.py": {
      "diffs": [
        {
          "start_line_old": 42,
          "end_line_old": 44,
          "file_pos": 1,
          "file_context_length": 8247,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS.fit_OPTICS.fit.19.1",
          "closest_snippet_line_distance": 336,
          "pos": 8,
          "context_length": 5659
        },
        {
          "start_line_old": 202,
          "end_line_old": 202,
          "file_pos": 1,
          "file_context_length": 8247,
          "pos": 4,
          "context_length": 4253
        },
        {
          "start_line_old": 433,
          "end_line_old": 433,
          "file_pos": 1,
          "file_context_length": 8247,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS._set_reach_dist_OPTICS._set_reach_dist.15.1",
          "closest_snippet_line_distance": 73,
          "pos": 4,
          "context_length": 4253
        },
        {
          "start_line_old": 448,
          "end_line_old": 448,
          "file_pos": 1,
          "file_context_length": 8247,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS.fit_OPTICS.fit.19.1",
          "closest_snippet_line_distance": 3,
          "pos": 7,
          "context_length": 5491
        },
        {
          "start_line_old": 488,
          "end_line_old": 515,
          "file_pos": 1,
          "file_context_length": 8247,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS.fit_OPTICS.fit.19.1",
          "closest_snippet_line_distance": 70,
          "pos": 4,
          "context_length": 4253
        },
        {
          "start_line_old": 530,
          "end_line_old": 535,
          "file_pos": 1,
          "file_context_length": 8247,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS.fit_OPTICS.fit.19.1",
          "closest_snippet_line_distance": 90,
          "pos": 4,
          "context_length": 4253
        }
      ]
    }
  },
  "vectors": 3143,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS.1_OPTICS.1",
      "distance": 0.6572710275650024,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 191,
      "end_line": 354,
      "tokens": 1703,
      "context_length": 1703,
      "file_pos": 1
    },
    {
      "position": 2,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS._set_reach_dist_OPTICS._set_reach_dist.15.1",
      "distance": 0.6581372022628784,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 506,
      "end_line": 534,
      "tokens": 324,
      "context_length": 2027,
      "file_pos": 1
    },
    {
      "position": 3,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS.fit_OPTICS.fit.19.1",
      "distance": 0.6805098056793213,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 378,
      "end_line": 445,
      "tokens": 536,
      "context_length": 2563,
      "file_pos": 1
    },
    {
      "position": 4,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_optics.1_OPTICS",
      "distance": 0.6812731027603149,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 31,
      "end_line": 573,
      "tokens": 1690,
      "context_length": 4253,
      "file_pos": 1
    },
    {
      "position": 5,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_optics.py_1_43.2",
      "distance": 0.7095471620559692,
      "file_path": "examples/cluster/plot_optics.py",
      "start_line": 1,
      "end_line": 80,
      "tokens": 738,
      "context_length": 4991
    },
    {
      "position": 6,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS._calculate_optics_order_OPTICS._calculate_optics_order.processed.5.1",
      "distance": 0.7360261082649231,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 485,
      "end_line": 504,
      "tokens": 204,
      "context_length": 5195,
      "file_pos": 2
    },
    {
      "position": 7,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS.4_OPTICS._compute_core_distances_.8.1",
      "distance": 0.7543895244598389,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 447,
      "end_line": 483,
      "tokens": 296,
      "context_length": 5491,
      "file_pos": 2
    },
    {
      "position": 8,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_1_optics",
      "distance": 0.7700831294059753,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 1,
      "end_line": 187,
      "tokens": 168,
      "context_length": 5659,
      "file_pos": 2
    },
    {
      "position": 9,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py__extract_optics__extract_optics.18.1",
      "distance": 0.8511723279953003,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 611,
      "end_line": 693,
      "tokens": 808,
      "context_length": 6467,
      "file_pos": 2
    },
    {
      "position": 10,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS.__init___OPTICS.__init__.self.n_jobs.1",
      "distance": 0.8833840489387512,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 356,
      "end_line": 376,
      "tokens": 215,
      "context_length": 6682,
      "file_pos": 2
    },
    {
      "position": 11,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py__extract_dbscan__extract_dbscan.10.1",
      "distance": 0.906213641166687,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 576,
      "end_line": 608,
      "tokens": 277,
      "context_length": 6959,
      "file_pos": 2
    },
    {
      "position": 12,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py_OPTICS.extract_dbscan_OPTICS.extract_dbscan.6.1",
      "distance": 0.923306941986084,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 536,
      "end_line": 573,
      "tokens": 358,
      "context_length": 7317,
      "file_pos": 2
    },
    {
      "position": 13,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_optics.py_44_",
      "distance": 0.9334392547607422,
      "file_path": "examples/cluster/plot_optics.py",
      "start_line": 81,
      "end_line": 102,
      "tokens": 325,
      "context_length": 7642
    },
    {
      "position": 14,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py__TreeNode__is_local_maxima.3.1",
      "distance": 0.9707373380661011,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 730,
      "end_line": 745,
      "tokens": 157,
      "context_length": 7799,
      "file_pos": 2
    },
    {
      "position": 15,
      "id": "/tmp/repos/scikit-learn/examples/covariance/plot_mahalanobis_distances.py_emp_cov_55",
      "distance": 1.0077893733978271,
      "file_path": "examples/covariance/plot_mahalanobis_distances.py",
      "start_line": 79,
      "end_line": 134,
      "tokens": 726,
      "context_length": 8525
    },
    {
      "position": 16,
      "id": "/tmp/repos/scikit-learn/sklearn/manifold/mds.py__smacof_single.10__smacof_single.11.1",
      "distance": 1.019355297088623,
      "file_path": "sklearn/manifold/mds.py",
      "start_line": 92,
      "end_line": 132,
      "tokens": 424,
      "context_length": 8949
    },
    {
      "position": 17,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py_63_PAIRWISE_KERNEL_FUNCTIONS.1",
      "distance": 1.0310395956039429,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 1402,
      "end_line": 1428,
      "tokens": 192,
      "context_length": 9141
    },
    {
      "position": 18,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_kmeans_assumptions.py_1_",
      "distance": 1.0359523296356201,
      "file_path": "examples/cluster/plot_kmeans_assumptions.py",
      "start_line": 1,
      "end_line": 65,
      "tokens": 511,
      "context_length": 9652
    },
    {
      "position": 19,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py__find_local_maxima__find_local_maxima.5.1",
      "distance": 1.0441235303878784,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 748,
      "end_line": 763,
      "tokens": 193,
      "context_length": 9845,
      "file_pos": 6
    },
    {
      "position": 20,
      "id": "/tmp/repos/scikit-learn/sklearn/manifold/mds.py_smacof.dissimilarities_smacof.7.2.1.1",
      "distance": 1.0493965148925781,
      "file_path": "sklearn/manifold/mds.py",
      "start_line": 234,
      "end_line": 276,
      "tokens": 436,
      "context_length": 10281
    },
    {
      "position": 21,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_agglomerative_clustering_metrics.py_29_",
      "distance": 1.0548126697540283,
      "file_path": "examples/cluster/plot_agglomerative_clustering_metrics.py",
      "start_line": 92,
      "end_line": 130,
      "tokens": 363,
      "context_length": 10644
    },
    {
      "position": 22,
      "id": "/tmp/repos/scikit-learn/examples/covariance/plot_mahalanobis_distances.py_56_",
      "distance": 1.0578997135162354,
      "file_path": "examples/covariance/plot_mahalanobis_distances.py",
      "start_line": 135,
      "end_line": 145,
      "tokens": 147,
      "context_length": 10791
    },
    {
      "position": 23,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py__cluster_tree.28_",
      "distance": 1.0601732730865479,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 845,
      "end_line": 886,
      "tokens": 392,
      "context_length": 11183,
      "file_pos": 7
    },
    {
      "position": 24,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py__argmin_min_reduce_pairwise_distances_argmin_min.10.1",
      "distance": 1.0621705055236816,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 262,
      "end_line": 363,
      "tokens": 855,
      "context_length": 12038
    },
    {
      "position": 25,
      "id": "/tmp/repos/scikit-learn/examples/covariance/plot_mahalanobis_distances.py_1_19",
      "distance": 1.0622894763946533,
      "file_path": "examples/covariance/plot_mahalanobis_distances.py",
      "start_line": 1,
      "end_line": 78,
      "tokens": 789,
      "context_length": 12827
    },
    {
      "position": 26,
      "id": "/tmp/repos/scikit-learn/sklearn/neighbors/base.py_RadiusNeighborsMixin.radius_neighbors.5_RadiusNeighborsMixin.radius_neighbors.6.2.4.5.1",
      "distance": 1.062340497970581,
      "file_path": "sklearn/neighbors/base.py",
      "start_line": 680,
      "end_line": 759,
      "tokens": 685,
      "context_length": 13512
    },
    {
      "position": 27,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py_pairwise_distances_argmin_pairwise_distances_argmin.3.1",
      "distance": 1.0674028396606445,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 366,
      "end_line": 443,
      "tokens": 637,
      "context_length": 14149
    },
    {
      "position": 28,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py_pairwise_distances.2_pairwise_distances.4.1",
      "distance": 1.0781664848327637,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 1369,
      "end_line": 1399,
      "tokens": 322,
      "context_length": 14471
    },
    {
      "position": 29,
      "id": "/tmp/repos/scikit-learn/examples/covariance/plot_robust_vs_empirical_covariance.py_err_loc_emp_pure_34",
      "distance": 1.0818150043487549,
      "file_path": "examples/covariance/plot_robust_vs_empirical_covariance.py",
      "start_line": 77,
      "end_line": 141,
      "tokens": 785,
      "context_length": 15256
    },
    {
      "position": 30,
      "id": "/tmp/repos/scikit-learn/examples/plot_johnson_lindenstrauss_bound.py_47_",
      "distance": 1.0909137725830078,
      "file_path": "examples/plot_johnson_lindenstrauss_bound.py",
      "start_line": 162,
      "end_line": 200,
      "tokens": 376,
      "context_length": 15632
    },
    {
      "position": 31,
      "id": "/tmp/repos/scikit-learn/examples/neighbors/plot_lof_outlier_detection.py_1_",
      "distance": 1.092217206954956,
      "file_path": "examples/neighbors/plot_lof_outlier_detection.py",
      "start_line": 1,
      "end_line": 69,
      "tokens": 667,
      "context_length": 16299
    },
    {
      "position": 32,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_cluster_comparison.py_1_datasets.1",
      "distance": 1.0930016040802002,
      "file_path": "examples/cluster/plot_cluster_comparison.py",
      "start_line": 1,
      "end_line": 86,
      "tokens": 698,
      "context_length": 16997
    },
    {
      "position": 33,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/cluster/unsupervised.py_silhouette_samples.denom_silhouette_samples.19.1",
      "distance": 1.0953335762023926,
      "file_path": "sklearn/metrics/cluster/unsupervised.py",
      "start_line": 228,
      "end_line": 236,
      "tokens": 140,
      "context_length": 17137
    },
    {
      "position": 34,
      "id": "/tmp/repos/scikit-learn/sklearn/utils/estimator_checks.py_check_clustering_check_clustering.39",
      "distance": 1.0985794067382812,
      "file_path": "sklearn/utils/estimator_checks.py",
      "start_line": 1269,
      "end_line": 1327,
      "tokens": 600,
      "context_length": 17737
    },
    {
      "position": 35,
      "id": "/tmp/repos/scikit-learn/examples/manifold/plot_mds.py_1_",
      "distance": 1.0990124940872192,
      "file_path": "examples/manifold/plot_mds.py",
      "start_line": 1,
      "end_line": 89,
      "tokens": 743,
      "context_length": 18480
    },
    {
      "position": 36,
      "id": "/tmp/repos/scikit-learn/examples/covariance/plot_lw_vs_oas.py_1_",
      "distance": 1.1001708507537842,
      "file_path": "examples/covariance/plot_lw_vs_oas.py",
      "start_line": 1,
      "end_line": 84,
      "tokens": 786,
      "context_length": 19266
    },
    {
      "position": 37,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/dbscan_.py_dbscan.2_dbscan.15.1",
      "distance": 1.1032507419586182,
      "file_path": "sklearn/cluster/dbscan_.py",
      "start_line": 132,
      "end_line": 182,
      "tokens": 523,
      "context_length": 19789
    },
    {
      "position": 38,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py_32_euclidean_distances.11.1",
      "distance": 1.108812928199768,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 164,
      "end_line": 259,
      "tokens": 849,
      "context_length": 20638
    },
    {
      "position": 39,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_cluster_iris.py_1_",
      "distance": 1.109661340713501,
      "file_path": "examples/cluster/plot_cluster_iris.py",
      "start_line": 1,
      "end_line": 93,
      "tokens": 751,
      "context_length": 21389
    },
    {
      "position": 40,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py_54_PAIRWISE_DISTANCE_FUNCTIONS.1",
      "distance": 1.1104037761688232,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 1014,
      "end_line": 1025,
      "tokens": 110,
      "context_length": 21499
    },
    {
      "position": 41,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_cluster_comparison.py_37_",
      "distance": 1.1133580207824707,
      "file_path": "examples/cluster/plot_cluster_comparison.py",
      "start_line": 88,
      "end_line": 189,
      "tokens": 887,
      "context_length": 22386
    },
    {
      "position": 42,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py_paired_cosine_distances_PAIRED_DISTANCES.1",
      "distance": 1.113403558731079,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 601,
      "end_line": 632,
      "tokens": 219,
      "context_length": 22605
    },
    {
      "position": 43,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/k_means_.py__labels_inertia_precompute_dense__labels_inertia_precompute_dense.11.1",
      "distance": 1.1143896579742432,
      "file_path": "sklearn/cluster/k_means_.py",
      "start_line": 583,
      "end_line": 628,
      "tokens": 365,
      "context_length": 22970
    },
    {
      "position": 44,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/omp.py_orthogonal_mp.X_orthogonal_mp.17.2.1.1",
      "distance": 1.1178152561187744,
      "file_path": "sklearn/linear_model/omp.py",
      "start_line": 346,
      "end_line": 404,
      "tokens": 625,
      "context_length": 23595
    },
    {
      "position": 45,
      "id": "/tmp/repos/scikit-learn/examples/applications/plot_outlier_detection_housing.py_1_23",
      "distance": 1.118573546409607,
      "file_path": "examples/applications/plot_outlier_detection_housing.py",
      "start_line": 1,
      "end_line": 78,
      "tokens": 739,
      "context_length": 24334
    },
    {
      "position": 46,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/dbscan_.py_DBSCAN_DBSCAN.1",
      "distance": 1.1218289136886597,
      "file_path": "sklearn/cluster/dbscan_.py",
      "start_line": 185,
      "end_line": 302,
      "tokens": 1117,
      "context_length": 25451
    },
    {
      "position": 47,
      "id": "/tmp/repos/scikit-learn/sklearn/neighbors/base.py_RadiusNeighborsMixin.radius_neighbors_RadiusNeighborsMixin.radius_neighbors.4.radius.1",
      "distance": 1.1234204769134521,
      "file_path": "sklearn/neighbors/base.py",
      "start_line": 602,
      "end_line": 678,
      "tokens": 714,
      "context_length": 26165
    },
    {
      "position": 48,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py_manhattan_distances_manhattan_distances.7.1",
      "distance": 1.1236425638198853,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 446,
      "end_line": 516,
      "tokens": 629,
      "context_length": 26794
    },
    {
      "position": 49,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_dbscan.py_1_",
      "distance": 1.1247016191482544,
      "file_path": "examples/cluster/plot_dbscan.py",
      "start_line": 1,
      "end_line": 76,
      "tokens": 625,
      "context_length": 27419
    },
    {
      "position": 50,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/optics_.py__automatic_cluster__automatic_cluster.10.1",
      "distance": 1.1253423690795898,
      "file_path": "sklearn/cluster/optics_.py",
      "start_line": 696,
      "end_line": 727,
      "tokens": 246,
      "context_length": 27665,
      "file_pos": 22
    },
    {
      "position": 51,
      "id": "/tmp/repos/scikit-learn/examples/linear_model/plot_ols_ridge_variance.py_1_",
      "distance": 1.1255533695220947,
      "file_path": "examples/linear_model/plot_ols_ridge_variance.py",
      "start_line": 1,
      "end_line": 68,
      "tokens": 484,
      "context_length": 28149
    },
    {
      "position": 52,
      "id": "/tmp/repos/scikit-learn/examples/plot_anomaly_comparison.py_anomaly_algorithms_",
      "distance": 1.126328706741333,
      "file_path": "examples/plot_anomaly_comparison.py",
      "start_line": 79,
      "end_line": 151,
      "tokens": 763,
      "context_length": 28912
    },
    {
      "position": 53,
      "id": "/tmp/repos/scikit-learn/benchmarks/bench_plot_omp_lars.py_1_compute_bench.11.1",
      "distance": 1.1272815465927124,
      "file_path": "benchmarks/bench_plot_omp_lars.py",
      "start_line": 1,
      "end_line": 101,
      "tokens": 858,
      "context_length": 29770
    },
    {
      "position": 54,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py_1__sparse_manhattan",
      "distance": 1.1274101734161377,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 1,
      "end_line": 32,
      "tokens": 146,
      "context_length": 29916
    },
    {
      "position": 55,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/omp.py__cholesky_omp.15__cholesky_omp.16.2.1.1",
      "distance": 1.1274381875991821,
      "file_path": "sklearn/linear_model/omp.py",
      "start_line": 92,
      "end_line": 136,
      "tokens": 508,
      "context_length": 30424
    },
    {
      "position": 56,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/omp.py_1_premature.1",
      "distance": 1.1295571327209473,
      "file_path": "sklearn/linear_model/omp.py",
      "start_line": 1,
      "end_line": 23,
      "tokens": 121,
      "context_length": 30545
    },
    {
      "position": 57,
      "id": "/tmp/repos/scikit-learn/examples/plot_johnson_lindenstrauss_bound.py_sys_dists_46.1",
      "distance": 1.1321966648101807,
      "file_path": "examples/plot_johnson_lindenstrauss_bound.py",
      "start_line": 94,
      "end_line": 160,
      "tokens": 646,
      "context_length": 31191
    },
    {
      "position": 58,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/omp.py_orthogonal_mp_orthogonal_mp.1",
      "distance": 1.1340036392211914,
      "file_path": "sklearn/linear_model/omp.py",
      "start_line": 265,
      "end_line": 345,
      "tokens": 755,
      "context_length": 31946
    },
    {
      "position": 59,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/birch.py_5_AgglomerativeClustering",
      "distance": 1.1347429752349854,
      "file_path": "sklearn/cluster/birch.py",
      "start_line": 5,
      "end_line": 19,
      "tokens": 113,
      "context_length": 32059
    },
    {
      "position": 60,
      "id": "/tmp/repos/scikit-learn/sklearn/covariance/robust_covariance.py_fast_mcd.9_fast_mcd.11",
      "distance": 1.1369140148162842,
      "file_path": "sklearn/covariance/robust_covariance.py",
      "start_line": 387,
      "end_line": 413,
      "tokens": 365,
      "context_length": 32424
    },
    {
      "position": 61,
      "id": "/tmp/repos/scikit-learn/examples/neighbors/plot_kde_1d.py_33_",
      "distance": 1.1398788690567017,
      "file_path": "examples/neighbors/plot_kde_1d.py",
      "start_line": 69,
      "end_line": 145,
      "tokens": 741,
      "context_length": 33165
    },
    {
      "position": 62,
      "id": "/tmp/repos/scikit-learn/sklearn/covariance/graph_lasso_.py_graphical_lasso.19_graphical_lasso.20.2.1.2.1.1",
      "distance": 1.143129825592041,
      "file_path": "sklearn/covariance/graph_lasso_.py",
      "start_line": 202,
      "end_line": 277,
      "tokens": 858,
      "context_length": 34023
    },
    {
      "position": 63,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/omp.py_OrthogonalMatchingPursuit_OrthogonalMatchingPursuit.1",
      "distance": 1.1437673568725586,
      "file_path": "sklearn/linear_model/omp.py",
      "start_line": 542,
      "end_line": 618,
      "tokens": 716,
      "context_length": 34739
    },
    {
      "position": 64,
      "id": "/tmp/repos/scikit-learn/examples/neighbors/plot_lof_novelty_detection.py_b2_",
      "distance": 1.1444040536880493,
      "file_path": "examples/neighbors/plot_lof_novelty_detection.py",
      "start_line": 68,
      "end_line": 84,
      "tokens": 177,
      "context_length": 34916
    },
    {
      "position": 65,
      "id": "/tmp/repos/scikit-learn/examples/applications/wikipedia_principal_eigenvector.py_centrality_scores_",
      "distance": 1.1445872783660889,
      "file_path": "examples/applications/wikipedia_principal_eigenvector.py",
      "start_line": 189,
      "end_line": 232,
      "tokens": 376,
      "context_length": 35292
    },
    {
      "position": 66,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_agglomerative_clustering_metrics.py_1_28",
      "distance": 1.146226406097412,
      "file_path": "examples/cluster/plot_agglomerative_clustering_metrics.py",
      "start_line": 1,
      "end_line": 91,
      "tokens": 733,
      "context_length": 36025
    },
    {
      "position": 67,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/bicluster.py_SpectralCoclustering.__init___SpectralCoclustering._fit.self.columns_.1",
      "distance": 1.1476552486419678,
      "file_path": "sklearn/cluster/bicluster.py",
      "start_line": 283,
      "end_line": 311,
      "tokens": 285,
      "context_length": 36310
    },
    {
      "position": 68,
      "id": "/tmp/repos/scikit-learn/examples/applications/plot_outlier_detection_housing.py_24_",
      "distance": 1.151445746421814,
      "file_path": "examples/applications/plot_outlier_detection_housing.py",
      "start_line": 79,
      "end_line": 134,
      "tokens": 633,
      "context_length": 36943
    },
    {
      "position": 69,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py__pairwise_callable__pairwise_callable.4.1",
      "distance": 1.1538952589035034,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 1073,
      "end_line": 1102,
      "tokens": 273,
      "context_length": 37216
    },
    {
      "position": 70,
      "id": "/tmp/repos/scikit-learn/benchmarks/bench_plot_randomized_svd.py_bench_a_bench_a.8",
      "distance": 1.153900146484375,
      "file_path": "benchmarks/bench_plot_randomized_svd.py",
      "start_line": 297,
      "end_line": 340,
      "tokens": 517,
      "context_length": 37733
    },
    {
      "position": 71,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_linkage_comparison.py_35_",
      "distance": 1.1547051668167114,
      "file_path": "examples/cluster/plot_linkage_comparison.py",
      "start_line": 82,
      "end_line": 150,
      "tokens": 559,
      "context_length": 38292
    },
    {
      "position": 72,
      "id": "/tmp/repos/scikit-learn/sklearn/neighbors/lof.py_LocalOutlierFactor._local_reachability_density_",
      "distance": 1.155527114868164,
      "file_path": "sklearn/neighbors/lof.py",
      "start_line": 478,
      "end_line": 505,
      "tokens": 274,
      "context_length": 38566
    },
    {
      "position": 73,
      "id": "/tmp/repos/scikit-learn/benchmarks/bench_plot_randomized_svd.py_scatter_time_vs_s_scatter_time_vs_s.7",
      "distance": 1.1581003665924072,
      "file_path": "benchmarks/bench_plot_randomized_svd.py",
      "start_line": 199,
      "end_line": 223,
      "tokens": 284,
      "context_length": 38850
    },
    {
      "position": 74,
      "id": "/tmp/repos/scikit-learn/sklearn/covariance/robust_covariance.py_fast_mcd.12_fast_mcd.13.1",
      "distance": 1.1589287519454956,
      "file_path": "sklearn/covariance/robust_covariance.py",
      "start_line": 414,
      "end_line": 510,
      "tokens": 1054,
      "context_length": 39904
    },
    {
      "position": 75,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_affinity_propagation.py_1_",
      "distance": 1.1601641178131104,
      "file_path": "examples/cluster/plot_affinity_propagation.py",
      "start_line": 1,
      "end_line": 63,
      "tokens": 526,
      "context_length": 40430
    },
    {
      "position": 76,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_linkage_comparison.py_1_datasets.1",
      "distance": 1.1602287292480469,
      "file_path": "examples/cluster/plot_linkage_comparison.py",
      "start_line": 1,
      "end_line": 80,
      "tokens": 576,
      "context_length": 41006
    },
    {
      "position": 77,
      "id": "/tmp/repos/scikit-learn/sklearn/manifold/mds.py_1__smacof_single.ir.1",
      "distance": 1.1606991291046143,
      "file_path": "sklearn/manifold/mds.py",
      "start_line": 1,
      "end_line": 91,
      "tokens": 727,
      "context_length": 41733
    },
    {
      "position": 78,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_kmeans_digits.py_1_20",
      "distance": 1.1614872217178345,
      "file_path": "examples/cluster/plot_kmeans_digits.py",
      "start_line": 1,
      "end_line": 56,
      "tokens": 319,
      "context_length": 42052
    },
    {
      "position": 79,
      "id": "/tmp/repos/scikit-learn/sklearn/neighbors/classification.py_RadiusNeighborsClassifier.__init___RadiusNeighborsClassifier.__init__.self.outlier_label.1",
      "distance": 1.1624901294708252,
      "file_path": "sklearn/neighbors/classification.py",
      "start_line": 325,
      "end_line": 336,
      "tokens": 144,
      "context_length": 42196
    },
    {
      "position": 80,
      "id": "/tmp/repos/scikit-learn/sklearn/covariance/elliptic_envelope.py_EllipticEnvelope.score_samples_EllipticEnvelope.predict.6.1",
      "distance": 1.1627943515777588,
      "file_path": "sklearn/covariance/elliptic_envelope.py",
      "start_line": 153,
      "end_line": 187,
      "tokens": 247,
      "context_length": 42443
    },
    {
      "position": 81,
      "id": "/tmp/repos/scikit-learn/benchmarks/bench_plot_parallel_pairwise.py_time_",
      "distance": 1.1628661155700684,
      "file_path": "benchmarks/bench_plot_parallel_pairwise.py",
      "start_line": 3,
      "end_line": 47,
      "tokens": 299,
      "context_length": 42742
    },
    {
      "position": 82,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/coordinate_descent.py__path_residuals.26__path_residuals.30.1",
      "distance": 1.1634846925735474,
      "file_path": "sklearn/linear_model/coordinate_descent.py",
      "start_line": 1035,
      "end_line": 1048,
      "tokens": 226,
      "context_length": 42968
    },
    {
      "position": 83,
      "id": "/tmp/repos/scikit-learn/examples/covariance/plot_covariance_estimation.py_1_cv.1",
      "distance": 1.1638317108154297,
      "file_path": "examples/covariance/plot_covariance_estimation.py",
      "start_line": 1,
      "end_line": 86,
      "tokens": 761,
      "context_length": 43729
    },
    {
      "position": 84,
      "id": "/tmp/repos/scikit-learn/sklearn/manifold/t_sne.py_trustworthiness_TSNE",
      "distance": 1.1646416187286377,
      "file_path": "sklearn/manifold/t_sne.py",
      "start_line": 397,
      "end_line": 905,
      "tokens": 791,
      "context_length": 44520
    },
    {
      "position": 85,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_kmeans_stability_low_dim_dense.py_25_",
      "distance": 1.1647632122039795,
      "file_path": "examples/cluster/plot_kmeans_stability_low_dim_dense.py",
      "start_line": 70,
      "end_line": 120,
      "tokens": 506,
      "context_length": 45026
    },
    {
      "position": 86,
      "id": "/tmp/repos/scikit-learn/examples/text/plot_document_clustering.py_60_",
      "distance": 1.1651564836502075,
      "file_path": "examples/text/plot_document_clustering.py",
      "start_line": 191,
      "end_line": 230,
      "tokens": 379,
      "context_length": 45405
    },
    {
      "position": 87,
      "id": "/tmp/repos/scikit-learn/examples/linear_model/plot_omp.py_1_",
      "distance": 1.1651579141616821,
      "file_path": "examples/linear_model/plot_omp.py",
      "start_line": 1,
      "end_line": 83,
      "tokens": 560,
      "context_length": 45965
    },
    {
      "position": 88,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/pairwise.py__VALID_METRICS__VALID_METRICS.1",
      "distance": 1.165285587310791,
      "file_path": "sklearn/metrics/pairwise.py",
      "start_line": 1105,
      "end_line": 1110,
      "tokens": 131,
      "context_length": 46096
    },
    {
      "position": 89,
      "id": "/tmp/repos/scikit-learn/examples/cross_decomposition/plot_compare_cross_decomposition.py_49_",
      "distance": 1.169447898864746,
      "file_path": "examples/cross_decomposition/plot_compare_cross_decomposition.py",
      "start_line": 83,
      "end_line": 156,
      "tokens": 759,
      "context_length": 46855
    },
    {
      "position": 90,
      "id": "/tmp/repos/scikit-learn/sklearn/cluster/spectral.py_SpectralClustering.fit_",
      "distance": 1.171050786972046,
      "file_path": "sklearn/cluster/spectral.py",
      "start_line": 446,
      "end_line": 499,
      "tokens": 462,
      "context_length": 47317
    },
    {
      "position": 91,
      "id": "/tmp/repos/scikit-learn/examples/linear_model/plot_ridge_path.py_1_",
      "distance": 1.1712031364440918,
      "file_path": "examples/linear_model/plot_ridge_path.py",
      "start_line": 1,
      "end_line": 67,
      "tokens": 434,
      "context_length": 47751
    },
    {
      "position": 92,
      "id": "/tmp/repos/scikit-learn/sklearn/decomposition/online_lda.py__update_doc_distribution.11__update_doc_distribution.12.1",
      "distance": 1.171904444694519,
      "file_path": "sklearn/decomposition/online_lda.py",
      "start_line": 96,
      "end_line": 133,
      "tokens": 445,
      "context_length": 48196
    },
    {
      "position": 93,
      "id": "/tmp/repos/scikit-learn/sklearn/manifold/mds.py_MDS.fit_MDS.fit.3.1",
      "distance": 1.1723347902297974,
      "file_path": "sklearn/manifold/mds.py",
      "start_line": 382,
      "end_line": 400,
      "tokens": 155,
      "context_length": 48351
    },
    {
      "position": 94,
      "id": "/tmp/repos/scikit-learn/sklearn/neighbors/lof.py_LocalOutlierFactor.fit_predict_LocalOutlierFactor.fit_predict.5.1",
      "distance": 1.1724416017532349,
      "file_path": "sklearn/neighbors/lof.py",
      "start_line": 161,
      "end_line": 191,
      "tokens": 254,
      "context_length": 48605
    },
    {
      "position": 95,
      "id": "/tmp/repos/scikit-learn/examples/linear_model/plot_huber_vs_ridge.py_1_",
      "distance": 1.1729475259780884,
      "file_path": "examples/linear_model/plot_huber_vs_ridge.py",
      "start_line": 1,
      "end_line": 66,
      "tokens": 592,
      "context_length": 49197
    },
    {
      "position": 96,
      "id": "/tmp/repos/scikit-learn/examples/cluster/plot_digits_linkage.py_17_plot_clustering.9",
      "distance": 1.1755695343017578,
      "file_path": "examples/cluster/plot_digits_linkage.py",
      "start_line": 57,
      "end_line": 74,
      "tokens": 189,
      "context_length": 49386
    },
    {
      "position": 97,
      "id": "/tmp/repos/scikit-learn/sklearn/neighbors/lof.py_LocalOutlierFactor.__init___LocalOutlierFactor.__init__.self.novelty.1",
      "distance": 1.1756796836853027,
      "file_path": "sklearn/neighbors/lof.py",
      "start_line": 150,
      "end_line": 159,
      "tokens": 134,
      "context_length": 49520
    },
    {
      "position": 98,
      "id": "/tmp/repos/scikit-learn/examples/covariance/plot_robust_vs_empirical_covariance.py_1_err_cov_emp_full.1",
      "distance": 1.1764674186706543,
      "file_path": "examples/covariance/plot_robust_vs_empirical_covariance.py",
      "start_line": 1,
      "end_line": 76,
      "tokens": 747,
      "context_length": 50267
    },
    {
      "position": 99,
      "id": "/tmp/repos/scikit-learn/benchmarks/bench_plot_fastkmeans.py_10_",
      "distance": 1.1765239238739014,
      "file_path": "benchmarks/bench_plot_fastkmeans.py",
      "start_line": 96,
      "end_line": 141,
      "tokens": 499,
      "context_length": 50766
    },
    {
      "position": 100,
      "id": "/tmp/repos/scikit-learn/examples/neighbors/plot_lof_novelty_detection.py_1_b1.1",
      "distance": 1.1782755851745605,
      "file_path": "examples/neighbors/plot_lof_novelty_detection.py",
      "start_line": 1,
      "end_line": 67,
      "tokens": 753,
      "context_length": 51519
    },
    {
      "position": 101,
      "id": "/tmp/repos/scikit-learn/sklearn/neighbors/nearest_centroid.py_NearestCentroid.fit.20_NearestCentroid.fit.21.1",
      "distance": 1.1793208122253418,
      "file_path": "sklearn/neighbors/nearest_centroid.py",
      "start_line": 147,
      "end_line": 169,
      "tokens": 290,
      "context_length": 51809
    }
  ],
  "files": [
    {
      "file_path": "sklearn/cluster/optics_.py",
      "position": 1,
      "tokens": 8247,
      "context_length": 8247
    },
    {
      "file_path": "examples/cluster/plot_optics.py",
      "position": 2,
      "tokens": 1100,
      "context_length": 9347
    },
    {
      "file_path": "examples/covariance/plot_mahalanobis_distances.py",
      "position": 3,
      "tokens": 1663,
      "context_length": 11010
    },
    {
      "file_path": "sklearn/manifold/mds.py",
      "position": 4,
      "tokens": 3861,
      "context_length": 14871
    },
    {
      "file_path": "sklearn/metrics/pairwise.py",
      "position": 5,
      "tokens": 13016,
      "context_length": 27887
    },
    {
      "file_path": "examples/cluster/plot_kmeans_assumptions.py",
      "position": 6,
      "tokens": 533,
      "context_length": 28420
    },
    {
      "file_path": "examples/cluster/plot_agglomerative_clustering_metrics.py",
      "position": 7,
      "tokens": 1118,
      "context_length": 29538
    },
    {
      "file_path": "sklearn/neighbors/base.py",
      "position": 8,
      "tokens": 7572,
      "context_length": 37110
    },
    {
      "file_path": "examples/covariance/plot_robust_vs_empirical_covariance.py",
      "position": 9,
      "tokens": 1672,
      "context_length": 38782
    },
    {
      "file_path": "examples/plot_johnson_lindenstrauss_bound.py",
      "position": 10,
      "tokens": 1780,
      "context_length": 40562
    },
    {
      "file_path": "examples/neighbors/plot_lof_outlier_detection.py",
      "position": 11,
      "tokens": 667,
      "context_length": 41229
    },
    {
      "file_path": "examples/cluster/plot_cluster_comparison.py",
      "position": 12,
      "tokens": 1585,
      "context_length": 42814
    },
    {
      "file_path": "sklearn/metrics/cluster/unsupervised.py",
      "position": 13,
      "tokens": 3126,
      "context_length": 45940
    },
    {
      "file_path": "sklearn/utils/estimator_checks.py",
      "position": 14,
      "tokens": 20993,
      "context_length": 66933
    },
    {
      "file_path": "examples/manifold/plot_mds.py",
      "position": 15,
      "tokens": 766,
      "context_length": 67699
    },
    {
      "file_path": "examples/covariance/plot_lw_vs_oas.py",
      "position": 16,
      "tokens": 786,
      "context_length": 68485
    },
    {
      "file_path": "sklearn/cluster/dbscan_.py",
      "position": 17,
      "tokens": 3320,
      "context_length": 71805
    },
    {
      "file_path": "examples/cluster/plot_cluster_iris.py",
      "position": 18,
      "tokens": 759,
      "context_length": 72564
    },
    {
      "file_path": "sklearn/cluster/k_means_.py",
      "position": 19,
      "tokens": 15077,
      "context_length": 87641
    },
    {
      "file_path": "sklearn/linear_model/omp.py",
      "position": 20,
      "tokens": 8075,
      "context_length": 95716
    },
    {
      "file_path": "examples/applications/plot_outlier_detection_housing.py",
      "position": 21,
      "tokens": 1401,
      "context_length": 97117
    },
    {
      "file_path": "examples/cluster/plot_dbscan.py",
      "position": 22,
      "tokens": 625,
      "context_length": 97742
    },
    {
      "file_path": "examples/linear_model/plot_ols_ridge_variance.py",
      "position": 23,
      "tokens": 492,
      "context_length": 98234
    },
    {
      "file_path": "examples/plot_anomaly_comparison.py",
      "position": 24,
      "tokens": 1505,
      "context_length": 99739
    },
    {
      "file_path": "benchmarks/bench_plot_omp_lars.py",
      "position": 25,
      "tokens": 1166,
      "context_length": 100905
    },
    {
      "file_path": "sklearn/cluster/birch.py",
      "position": 26,
      "tokens": 5303,
      "context_length": 106208
    },
    {
      "file_path": "sklearn/covariance/robust_covariance.py",
      "position": 27,
      "tokens": 7086,
      "context_length": 113294
    },
    {
      "file_path": "examples/neighbors/plot_kde_1d.py",
      "position": 28,
      "tokens": 1505,
      "context_length": 114799
    },
    {
      "file_path": "sklearn/covariance/graph_lasso_.py",
      "position": 29,
      "tokens": 8352,
      "context_length": 123151
    },
    {
      "file_path": "examples/neighbors/plot_lof_novelty_detection.py",
      "position": 30,
      "tokens": 930,
      "context_length": 124081
    },
    {
      "file_path": "examples/applications/wikipedia_principal_eigenvector.py",
      "position": 31,
      "tokens": 1925,
      "context_length": 126006
    },
    {
      "file_path": "sklearn/cluster/bicluster.py",
      "position": 32,
      "tokens": 4932,
      "context_length": 130938
    },
    {
      "file_path": "benchmarks/bench_plot_randomized_svd.py",
      "position": 33,
      "tokens": 4380,
      "context_length": 135318
    },
    {
      "file_path": "examples/cluster/plot_linkage_comparison.py",
      "position": 34,
      "tokens": 1135,
      "context_length": 136453
    },
    {
      "file_path": "sklearn/neighbors/lof.py",
      "position": 35,
      "tokens": 4514,
      "context_length": 140967
    },
    {
      "file_path": "examples/cluster/plot_affinity_propagation.py",
      "position": 36,
      "tokens": 526,
      "context_length": 141493
    },
    {
      "file_path": "examples/cluster/plot_kmeans_digits.py",
      "position": 37,
      "tokens": 1044,
      "context_length": 142537
    },
    {
      "file_path": "sklearn/neighbors/classification.py",
      "position": 38,
      "tokens": 3399,
      "context_length": 145936
    },
    {
      "file_path": "sklearn/covariance/elliptic_envelope.py",
      "position": 39,
      "tokens": 1666,
      "context_length": 147602
    },
    {
      "file_path": "benchmarks/bench_plot_parallel_pairwise.py",
      "position": 40,
      "tokens": 323,
      "context_length": 147925
    },
    {
      "file_path": "sklearn/linear_model/coordinate_descent.py",
      "position": 41,
      "tokens": 21103,
      "context_length": 169028
    },
    {
      "file_path": "examples/covariance/plot_covariance_estimation.py",
      "position": 42,
      "tokens": 1145,
      "context_length": 170173
    },
    {
      "file_path": "sklearn/manifold/t_sne.py",
      "position": 43,
      "tokens": 8421,
      "context_length": 178594
    },
    {
      "file_path": "examples/cluster/plot_kmeans_stability_low_dim_dense.py",
      "position": 44,
      "tokens": 1059,
      "context_length": 179653
    },
    {
      "file_path": "examples/text/plot_document_clustering.py",
      "position": 45,
      "tokens": 1886,
      "context_length": 181539
    },
    {
      "file_path": "examples/linear_model/plot_omp.py",
      "position": 46,
      "tokens": 560,
      "context_length": 182099
    },
    {
      "file_path": "examples/cross_decomposition/plot_compare_cross_decomposition.py",
      "position": 47,
      "tokens": 1483,
      "context_length": 183582
    },
    {
      "file_path": "sklearn/cluster/spectral.py",
      "position": 48,
      "tokens": 4509,
      "context_length": 188091
    },
    {
      "file_path": "examples/linear_model/plot_ridge_path.py",
      "position": 49,
      "tokens": 463,
      "context_length": 188554
    },
    {
      "file_path": "sklearn/decomposition/online_lda.py",
      "position": 50,
      "tokens": 6565,
      "context_length": 195119
    },
    {
      "file_path": "examples/linear_model/plot_huber_vs_ridge.py",
      "position": 51,
      "tokens": 614,
      "context_length": 195733
    },
    {
      "file_path": "examples/cluster/plot_digits_linkage.py",
      "position": 52,
      "tokens": 729,
      "context_length": 196462
    },
    {
      "file_path": "benchmarks/bench_plot_fastkmeans.py",
      "position": 53,
      "tokens": 1226,
      "context_length": 197688
    },
    {
      "file_path": "sklearn/neighbors/nearest_centroid.py",
      "position": 54,
      "tokens": 1688,
      "context_length": 199376
    }
  ]
}