{
  "instance_id": "scikit-learn__scikit-learn-23099",
  "model_patch": "diff --git a/sklearn/gaussian_process/_gpr.py b/sklearn/gaussian_process/_gpr.py\nindex 3a657c4bf..94c5a53c2 100644\n--- a/sklearn/gaussian_process/_gpr.py\n+++ b/sklearn/gaussian_process/_gpr.py\n@@ -463,7 +463,7 @@ class GaussianProcessRegressor(MultiOutputMixin, RegressorMixin, BaseEstimator):\n             else:\n                 return y_mean\n \n-    def sample_y(self, X, n_samples=1, random_state=0):\n+    def sample_y(self, X, n_samples=1, random_state=0, n_targets=None):\n         \"\"\"Draw samples from Gaussian process and evaluate at X.\n \n         Parameters\n@@ -480,6 +480,10 @@ class GaussianProcessRegressor(MultiOutputMixin, RegressorMixin, BaseEstimator):\n             calls.\n             See :term:`Glossary <random_state>`.\n \n+        n_targets : int or None, default=None\n+            Number of target values. If None, the number of targets is\n+            inferred from the fitted model if available, otherwise it is set to 1.\n+\n         Returns\n         -------\n         y_samples : ndarray of shape (n_samples_X, n_samples), or \\\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "sklearn/gaussian_process/_gpr.py"
  ],
  "repo": "scikit-learn/scikit-learn",
  "base_commit": "42d235924efa64987a19e945035c85414c53d4f0",
  "patch": "diff --git a/sklearn/gaussian_process/_gpr.py b/sklearn/gaussian_process/_gpr.py\n--- a/sklearn/gaussian_process/_gpr.py\n+++ b/sklearn/gaussian_process/_gpr.py\n@@ -110,6 +110,14 @@ def optimizer(obj_func, initial_theta, bounds):\n         which might cause predictions to change if the data is modified\n         externally.\n \n+    n_targets : int, default=None\n+        The number of dimensions of the target values. Used to decide the number\n+        of outputs when sampling from the prior distributions (i.e. calling\n+        :meth:`sample_y` before :meth:`fit`). This parameter is ignored once\n+        :meth:`fit` has been called.\n+\n+        .. versionadded:: 1.3\n+\n     random_state : int, RandomState instance or None, default=None\n         Determines random number generation used to initialize the centers.\n         Pass an int for reproducible results across multiple function calls.\n@@ -181,6 +189,7 @@ def optimizer(obj_func, initial_theta, bounds):\n         \"n_restarts_optimizer\": [Interval(Integral, 0, None, closed=\"left\")],\n         \"normalize_y\": [\"boolean\"],\n         \"copy_X_train\": [\"boolean\"],\n+        \"n_targets\": [Interval(Integral, 1, None, closed=\"left\"), None],\n         \"random_state\": [\"random_state\"],\n     }\n \n@@ -193,6 +202,7 @@ def __init__(\n         n_restarts_optimizer=0,\n         normalize_y=False,\n         copy_X_train=True,\n+        n_targets=None,\n         random_state=None,\n     ):\n         self.kernel = kernel\n@@ -201,6 +211,7 @@ def __init__(\n         self.n_restarts_optimizer = n_restarts_optimizer\n         self.normalize_y = normalize_y\n         self.copy_X_train = copy_X_train\n+        self.n_targets = n_targets\n         self.random_state = random_state\n \n     def fit(self, X, y):\n@@ -243,6 +254,13 @@ def fit(self, X, y):\n             dtype=dtype,\n         )\n \n+        n_targets_seen = y.shape[1] if y.ndim > 1 else 1\n+        if self.n_targets is not None and n_targets_seen != self.n_targets:\n+            raise ValueError(\n+                \"The number of targets seen in `y` is different from the parameter \"\n+                f\"`n_targets`. Got {n_targets_seen} != {self.n_targets}.\"\n+            )\n+\n         # Normalize target value\n         if self.normalize_y:\n             self._y_train_mean = np.mean(y, axis=0)\n@@ -393,12 +411,23 @@ def predict(self, X, return_std=False, return_cov=False):\n                 )\n             else:\n                 kernel = self.kernel\n-            y_mean = np.zeros(X.shape[0])\n+\n+            n_targets = self.n_targets if self.n_targets is not None else 1\n+            y_mean = np.zeros(shape=(X.shape[0], n_targets)).squeeze()\n+\n             if return_cov:\n                 y_cov = kernel(X)\n+                if n_targets > 1:\n+                    y_cov = np.repeat(\n+                        np.expand_dims(y_cov, -1), repeats=n_targets, axis=-1\n+                    )\n                 return y_mean, y_cov\n             elif return_std:\n                 y_var = kernel.diag(X)\n+                if n_targets > 1:\n+                    y_var = np.repeat(\n+                        np.expand_dims(y_var, -1), repeats=n_targets, axis=-1\n+                    )\n                 return y_mean, np.sqrt(y_var)\n             else:\n                 return y_mean\n",
  "test_patch": "diff --git a/sklearn/gaussian_process/tests/test_gpr.py b/sklearn/gaussian_process/tests/test_gpr.py\n--- a/sklearn/gaussian_process/tests/test_gpr.py\n+++ b/sklearn/gaussian_process/tests/test_gpr.py\n@@ -773,6 +773,57 @@ def test_sample_y_shapes(normalize_y, n_targets):\n     assert y_samples.shape == y_test_shape\n \n \n+@pytest.mark.parametrize(\"n_targets\", [None, 1, 2, 3])\n+@pytest.mark.parametrize(\"n_samples\", [1, 5])\n+def test_sample_y_shape_with_prior(n_targets, n_samples):\n+    \"\"\"Check the output shape of `sample_y` is consistent before and after `fit`.\"\"\"\n+    rng = np.random.RandomState(1024)\n+\n+    X = rng.randn(10, 3)\n+    y = rng.randn(10, n_targets if n_targets is not None else 1)\n+\n+    model = GaussianProcessRegressor(n_targets=n_targets)\n+    shape_before_fit = model.sample_y(X, n_samples=n_samples).shape\n+    model.fit(X, y)\n+    shape_after_fit = model.sample_y(X, n_samples=n_samples).shape\n+    assert shape_before_fit == shape_after_fit\n+\n+\n+@pytest.mark.parametrize(\"n_targets\", [None, 1, 2, 3])\n+def test_predict_shape_with_prior(n_targets):\n+    \"\"\"Check the output shape of `predict` with prior distribution.\"\"\"\n+    rng = np.random.RandomState(1024)\n+\n+    n_sample = 10\n+    X = rng.randn(n_sample, 3)\n+    y = rng.randn(n_sample, n_targets if n_targets is not None else 1)\n+\n+    model = GaussianProcessRegressor(n_targets=n_targets)\n+    mean_prior, cov_prior = model.predict(X, return_cov=True)\n+    _, std_prior = model.predict(X, return_std=True)\n+\n+    model.fit(X, y)\n+    mean_post, cov_post = model.predict(X, return_cov=True)\n+    _, std_post = model.predict(X, return_std=True)\n+\n+    assert mean_prior.shape == mean_post.shape\n+    assert cov_prior.shape == cov_post.shape\n+    assert std_prior.shape == std_post.shape\n+\n+\n+def test_n_targets_error():\n+    \"\"\"Check that an error is raised when the number of targets seen at fit is\n+    inconsistent with n_targets.\n+    \"\"\"\n+    rng = np.random.RandomState(0)\n+    X = rng.randn(10, 3)\n+    y = rng.randn(10, 2)\n+\n+    model = GaussianProcessRegressor(n_targets=1)\n+    with pytest.raises(ValueError, match=\"The number of targets seen in `y`\"):\n+        model.fit(X, y)\n+\n+\n class CustomKernel(C):\n     \"\"\"\n     A custom kernel that has a diag method that returns the first column of the\n",
  "problem_statement": "GPR `sample_y` enforce `n_targets=1` before calling `fit`\nIn `GaussianProcessRegressor`, sampling in the prior before calling `fit` via `sample_y` will assume that `y` is made of a single target. However, this is not necessarily the case. Therefore, the shape of the output of `sample_y` before and after `fit` is different.\r\n\r\nIn order to solve this inconsistency, we need to introduce a new parameter `n_targets=None`. Before calling `fit` this parameter should be explicitly set by the user. After `fit`, we can use the information of the target seen during `fit` without explicitly setting the parameter.\n",
  "hints_text": "I see that we have the same issue with `predict` indeed.",
  "created_at": "2022-04-10T13:13:15Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"sklearn/gaussian_process/tests/test_gpr.py::test_n_targets_error\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_shape_with_prior[1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_shape_with_prior[2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_shape_with_prior[3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_shape_with_prior[None]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shape_with_prior[1-1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shape_with_prior[1-2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shape_with_prior[1-3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shape_with_prior[1-None]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shape_with_prior[5-1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shape_with_prior[5-2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shape_with_prior[5-3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shape_with_prior[5-None]\"]",
  "PASS_TO_PASS": "[\"sklearn/gaussian_process/tests/test_gpr.py::test_anisotropic_kernel\", \"sklearn/gaussian_process/tests/test_gpr.py::test_bound_check_fixed_hyperparameter\", \"sklearn/gaussian_process/tests/test_gpr.py::test_constant_target[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_constant_target[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_constant_target[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_constant_target[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_constant_target[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_constant_target[kernel5]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_converged_to_local_maximum[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_converged_to_local_maximum[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_converged_to_local_maximum[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_converged_to_local_maximum[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_converged_to_local_maximum[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_custom_optimizer[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_custom_optimizer[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_custom_optimizer[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_custom_optimizer[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_custom_optimizer[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_duplicate_input[kernel5]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_consistency_std_cov_non_invertible_kernel\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_correct_error_message\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_fit_error[params0-ValueError-alpha\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_fit_error[params1-ValueError-requires\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_interpolation[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_interpolation[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_interpolation[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_interpolation[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_interpolation[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_interpolation[kernel5]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_interpolation_structured\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_lml_error\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_predict_error\", \"sklearn/gaussian_process/tests/test_gpr.py::test_gpr_predict_input_not_modified\", \"sklearn/gaussian_process/tests/test_gpr.py::test_large_variance_y\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_gradient[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_gradient[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_gradient[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_gradient[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_gradient[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_gradient[kernel5]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_improving[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_improving[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_improving[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_improving[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_improving[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_precomputed[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_precomputed[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_precomputed[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_precomputed[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_precomputed[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_precomputed[kernel5]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_without_cloning_kernel[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_without_cloning_kernel[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_without_cloning_kernel[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_without_cloning_kernel[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_without_cloning_kernel[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_lml_without_cloning_kernel[kernel5]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_no_fit_default_predict\", \"sklearn/gaussian_process/tests/test_gpr.py::test_no_optimizer\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target0-kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target0-kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target0-kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target0-kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target0-kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target0-kernel5]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target1-kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target1-kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target1-kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target1-kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target1-kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_cov_vs_std[target1-kernel5]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_shapes[1-False]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_shapes[1-True]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_shapes[10-False]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_shapes[10-True]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_shapes[None-False]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_predict_shapes[None-True]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_prior[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_prior[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_prior[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_prior[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_prior[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_prior[kernel5]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_random_starts\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_statistics[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_statistics[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_statistics[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_statistics[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_statistics[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_statistics[kernel5]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shapes[1-False]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shapes[1-True]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shapes[10-False]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shapes[10-True]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shapes[None-False]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_sample_y_shapes[None-True]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_solution_inside_bounds[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_solution_inside_bounds[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_solution_inside_bounds[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_solution_inside_bounds[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_solution_inside_bounds[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_warning_bounds\", \"sklearn/gaussian_process/tests/test_gpr.py::test_y_multioutput\", \"sklearn/gaussian_process/tests/test_gpr.py::test_y_normalization[kernel0]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_y_normalization[kernel1]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_y_normalization[kernel2]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_y_normalization[kernel3]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_y_normalization[kernel4]\", \"sklearn/gaussian_process/tests/test_gpr.py::test_y_normalization[kernel5]\"]",
  "environment_setup_commit": "1e8a5b833d1b58f3ab84099c4582239af854b23a",
  "patch_files": [
    "sklearn/gaussian_process/_gpr.py"
  ],
  "test_patch_files": [
    "sklearn/gaussian_process/tests/test_gpr.py"
  ],
  "patch_diff_details": {
    "sklearn/gaussian_process/_gpr.py": {
      "diffs": [
        {
          "start_line_old": 113,
          "end_line_old": 113,
          "file_pos": 1,
          "file_context_length": 5927,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor.fit_GaussianProcessRegressor.fit.self.y_train_.1",
          "closest_snippet_line_distance": 93,
          "pos": 5,
          "context_length": 3461
        },
        {
          "start_line_old": 184,
          "end_line_old": 184,
          "file_pos": 1,
          "file_context_length": 5927,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor.predict.5_GaussianProcessRegressor.predict.5.3.K_trans.9.4.1.1",
          "closest_snippet_line_distance": 205,
          "pos": 31,
          "context_length": 15694
        },
        {
          "start_line_old": 196,
          "end_line_old": 196,
          "file_pos": 1,
          "file_context_length": 5927,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor.predict.5_GaussianProcessRegressor.predict.5.3.K_trans.9.4.1.1",
          "closest_snippet_line_distance": 193,
          "pos": 31,
          "context_length": 15694
        },
        {
          "start_line_old": 204,
          "end_line_old": 204,
          "file_pos": 1,
          "file_context_length": 5927,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor.predict.5_GaussianProcessRegressor.predict.5.3.K_trans.9.4.1.1",
          "closest_snippet_line_distance": 185,
          "pos": 31,
          "context_length": 15694
        },
        {
          "start_line_old": 246,
          "end_line_old": 246,
          "file_pos": 1,
          "file_context_length": 5927,
          "pos": 1,
          "context_length": 536
        },
        {
          "start_line_old": 396,
          "end_line_old": 396,
          "file_pos": 1,
          "file_context_length": 5927,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor.sample_y_GaussianProcessRegressor.sample_y.5.1",
          "closest_snippet_line_distance": 70,
          "pos": 22,
          "context_length": 10955
        }
      ]
    }
  },
  "vectors": 3963,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor.fit_GaussianProcessRegressor.fit.self.y_train_.1",
      "distance": 0.8781037926673889,
      "file_path": "sklearn/gaussian_process/_gpr.py",
      "start_line": 206,
      "end_line": 269,
      "tokens": 536,
      "context_length": 536,
      "file_pos": 1
    },
    {
      "position": 2,
      "id": "/tmp/repos/scikit-learn/sklearn/naive_bayes.py_GaussianNB.fit_GaussianNB._check_X.2.1",
      "distance": 0.9420260190963745,
      "file_path": "sklearn/naive_bayes.py",
      "start_line": 242,
      "end_line": 273,
      "tokens": 243,
      "context_length": 779
    },
    {
      "position": 3,
      "id": "/tmp/repos/scikit-learn/examples/gaussian_process/plot_gpr_noisy_targets.py_y_train_noisy_",
      "distance": 0.943646252155304,
      "file_path": "examples/gaussian_process/plot_gpr_noisy_targets.py",
      "start_line": 110,
      "end_line": 154,
      "tokens": 353,
      "context_length": 1132
    },
    {
      "position": 4,
      "id": "/tmp/repos/scikit-learn/examples/gaussian_process/plot_gpr_noisy_targets.py_1_noise_std.1",
      "distance": 0.9728623032569885,
      "file_path": "examples/gaussian_process/plot_gpr_noisy_targets.py",
      "start_line": 1,
      "end_line": 109,
      "tokens": 792,
      "context_length": 1924
    },
    {
      "position": 5,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor.1_GaussianProcessRegressor.1",
      "distance": 0.9847518801689148,
      "file_path": "sklearn/gaussian_process/_gpr.py",
      "start_line": 27,
      "end_line": 175,
      "tokens": 1537,
      "context_length": 3461,
      "file_pos": 3
    },
    {
      "position": 6,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor.fit.12_GaussianProcessRegressor.fit.21.1",
      "distance": 0.9879696369171143,
      "file_path": "sklearn/gaussian_process/_gpr.py",
      "start_line": 271,
      "end_line": 340,
      "tokens": 658,
      "context_length": 4119,
      "file_pos": 3
    },
    {
      "position": 7,
      "id": "/tmp/repos/scikit-learn/sklearn/multioutput.py_RegressorChain.fit_",
      "distance": 1.0040433406829834,
      "file_path": "sklearn/multioutput.py",
      "start_line": 985,
      "end_line": 1014,
      "tokens": 191,
      "context_length": 4310
    },
    {
      "position": 8,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor.sample_y_GaussianProcessRegressor.sample_y.5.1",
      "distance": 1.0068559646606445,
      "file_path": "sklearn/gaussian_process/_gpr.py",
      "start_line": 466,
      "end_line": 503,
      "tokens": 326,
      "context_length": 4636,
      "file_pos": 4
    },
    {
      "position": 9,
      "id": "/tmp/repos/scikit-learn/sklearn/utils/multiclass.py_check_classification_targets_check_classification_targets.3.1",
      "distance": 1.0089319944381714,
      "file_path": "sklearn/utils/multiclass.py",
      "start_line": 198,
      "end_line": 222,
      "tokens": 184,
      "context_length": 4820
    },
    {
      "position": 10,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpc.py_GaussianProcessClassifier.fit_GaussianProcessClassifier.fit.12.1",
      "distance": 1.0169508457183838,
      "file_path": "sklearn/gaussian_process/_gpc.py",
      "start_line": 682,
      "end_line": 756,
      "tokens": 542,
      "context_length": 5362
    },
    {
      "position": 11,
      "id": "/tmp/repos/scikit-learn/sklearn/multioutput.py_MultiOutputClassifier.fit_MultiOutputClassifier._check_predict_proba.5.1",
      "distance": 1.0244022607803345,
      "file_path": "sklearn/multioutput.py",
      "start_line": 427,
      "end_line": 466,
      "tokens": 319,
      "context_length": 5681
    },
    {
      "position": 12,
      "id": "/tmp/repos/scikit-learn/sklearn/multioutput.py__BaseChain.fit__BaseChain.fit.11.1",
      "distance": 1.02451491355896,
      "file_path": "sklearn/multioutput.py",
      "start_line": 569,
      "end_line": 645,
      "tokens": 662,
      "context_length": 6343
    },
    {
      "position": 13,
      "id": "/tmp/repos/scikit-learn/sklearn/kernel_approximation.py_RBFSampler.fit_RBFSampler.fit.12.1",
      "distance": 1.036569356918335,
      "file_path": "sklearn/kernel_approximation.py",
      "start_line": 341,
      "end_line": 386,
      "tokens": 428,
      "context_length": 6771
    },
    {
      "position": 14,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpc.py__BinaryGaussianProcessClassifierLaplace.fit__BinaryGaussianProcessClassifierLaplace.fit.16.1",
      "distance": 1.0389903783798218,
      "file_path": "sklearn/gaussian_process/_gpc.py",
      "start_line": 172,
      "end_line": 268,
      "tokens": 788,
      "context_length": 7559
    },
    {
      "position": 15,
      "id": "/tmp/repos/scikit-learn/sklearn/compose/_target.py_TransformedTargetRegressor.fit_TransformedTargetRegressor.fit.21.1",
      "distance": 1.04148268699646,
      "file_path": "sklearn/compose/_target.py",
      "start_line": 200,
      "end_line": 269,
      "tokens": 523,
      "context_length": 8082
    },
    {
      "position": 16,
      "id": "/tmp/repos/scikit-learn/sklearn/naive_bayes.py_GaussianNB._partial_fit_GaussianNB._partial_fit.15.1",
      "distance": 1.042551875114441,
      "file_path": "sklearn/naive_bayes.py",
      "start_line": 395,
      "end_line": 481,
      "tokens": 798,
      "context_length": 8880
    },
    {
      "position": 17,
      "id": "/tmp/repos/scikit-learn/sklearn/cross_decomposition/_pls.py__PLS.predict__PLS.predict.8.1",
      "distance": 1.0434775352478027,
      "file_path": "sklearn/cross_decomposition/_pls.py",
      "start_line": 443,
      "end_line": 471,
      "tokens": 245,
      "context_length": 9125
    },
    {
      "position": 18,
      "id": "/tmp/repos/scikit-learn/sklearn/preprocessing/_target_encoder.py_TargetEncoder.fit_TargetEncoder.fit.4.1",
      "distance": 1.0485832691192627,
      "file_path": "sklearn/preprocessing/_target_encoder.py",
      "start_line": 179,
      "end_line": 197,
      "tokens": 125,
      "context_length": 9250
    },
    {
      "position": 19,
      "id": "/tmp/repos/scikit-learn/sklearn/naive_bayes.py__BaseDiscreteNB.fit__BaseDiscreteNB._more_tags.1.1",
      "distance": 1.0497796535491943,
      "file_path": "sklearn/naive_bayes.py",
      "start_line": 731,
      "end_line": 790,
      "tokens": 522,
      "context_length": 9772
    },
    {
      "position": 20,
      "id": "/tmp/repos/scikit-learn/sklearn/compose/_target.py_TransformedTargetRegressor._more_tags_",
      "distance": 1.0519025325775146,
      "file_path": "sklearn/compose/_target.py",
      "start_line": 306,
      "end_line": 333,
      "tokens": 195,
      "context_length": 9967
    },
    {
      "position": 21,
      "id": "/tmp/repos/scikit-learn/examples/gaussian_process/plot_gpr_prior_posterior.py_128_",
      "distance": 1.0576742887496948,
      "file_path": "examples/gaussian_process/plot_gpr_prior_posterior.py",
      "start_line": 240,
      "end_line": 259,
      "tokens": 208,
      "context_length": 10175
    },
    {
      "position": 22,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor.predict.5_GaussianProcessRegressor.predict.5.3.K_trans.9.4.1.1",
      "distance": 1.059528112411499,
      "file_path": "sklearn/gaussian_process/_gpr.py",
      "start_line": 389,
      "end_line": 464,
      "tokens": 780,
      "context_length": 10955,
      "file_pos": 11
    },
    {
      "position": 23,
      "id": "/tmp/repos/scikit-learn/sklearn/multioutput.py_MultiOutputRegressor_MultiOutputRegressor.__init__.1",
      "distance": 1.0616735219955444,
      "file_path": "sklearn/multioutput.py",
      "start_line": 261,
      "end_line": 328,
      "tokens": 558,
      "context_length": 11513
    },
    {
      "position": 24,
      "id": "/tmp/repos/scikit-learn/examples/gaussian_process/plot_gpr_prior_posterior.py_21_80",
      "distance": 1.063289999961853,
      "file_path": "examples/gaussian_process/plot_gpr_prior_posterior.py",
      "start_line": 82,
      "end_line": 162,
      "tokens": 767,
      "context_length": 12280
    },
    {
      "position": 25,
      "id": "/tmp/repos/scikit-learn/examples/gaussian_process/plot_gpr_prior_posterior.py_81_127",
      "distance": 1.0697565078735352,
      "file_path": "examples/gaussian_process/plot_gpr_prior_posterior.py",
      "start_line": 163,
      "end_line": 239,
      "tokens": 755,
      "context_length": 13035
    },
    {
      "position": 26,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_glm/glm.py__GeneralizedLinearRegressor.fit__GeneralizedLinearRegressor.fit.31",
      "distance": 1.072542667388916,
      "file_path": "sklearn/linear_model/_glm/glm.py",
      "start_line": 171,
      "end_line": 262,
      "tokens": 781,
      "context_length": 13816
    },
    {
      "position": 27,
      "id": "/tmp/repos/scikit-learn/sklearn/neighbors/_regression.py_KNeighborsRegressor.predict_KNeighborsRegressor.predict.8.1",
      "distance": 1.0726280212402344,
      "file_path": "sklearn/neighbors/_regression.py",
      "start_line": 219,
      "end_line": 260,
      "tokens": 350,
      "context_length": 14166
    },
    {
      "position": 28,
      "id": "/tmp/repos/scikit-learn/examples/gaussian_process/plot_gpr_prior_posterior.py_plot_gpr_samples_plot_gpr_samples.11",
      "distance": 1.0739411115646362,
      "file_path": "examples/gaussian_process/plot_gpr_prior_posterior.py",
      "start_line": 37,
      "end_line": 79,
      "tokens": 337,
      "context_length": 14503
    },
    {
      "position": 29,
      "id": "/tmp/repos/scikit-learn/examples/gaussian_process/plot_gpr_noisy.py_1_67",
      "distance": 1.0748240947723389,
      "file_path": "examples/gaussian_process/plot_gpr_noisy.py",
      "start_line": 1,
      "end_line": 102,
      "tokens": 768,
      "context_length": 15271
    },
    {
      "position": 30,
      "id": "/tmp/repos/scikit-learn/sklearn/multioutput.py_MultiOutputRegressor.partial_fit_MultiOutputRegressor.partial_fit.2",
      "distance": 1.0753496885299683,
      "file_path": "sklearn/multioutput.py",
      "start_line": 330,
      "end_line": 352,
      "tokens": 182,
      "context_length": 15453
    },
    {
      "position": 31,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor._parameter_constraints_GaussianProcessRegressor.__init__.self.random_state.1",
      "distance": 1.0772099494934082,
      "file_path": "sklearn/gaussian_process/_gpr.py",
      "start_line": 177,
      "end_line": 204,
      "tokens": 241,
      "context_length": 15694,
      "file_pos": 14
    },
    {
      "position": 32,
      "id": "/tmp/repos/scikit-learn/sklearn/neural_network/_multilayer_perceptron.py_BaseMultilayerPerceptron.fit_MLPClassifier",
      "distance": 1.0772106647491455,
      "file_path": "sklearn/neural_network/_multilayer_perceptron.py",
      "start_line": 730,
      "end_line": 1253,
      "tokens": 216,
      "context_length": 15910
    },
    {
      "position": 33,
      "id": "/tmp/repos/scikit-learn/sklearn/naive_bayes.py_CategoricalNB.fit_CategoricalNB.fit.2.1",
      "distance": 1.0789545774459839,
      "file_path": "sklearn/naive_bayes.py",
      "start_line": 1373,
      "end_line": 1398,
      "tokens": 244,
      "context_length": 16154
    },
    {
      "position": 34,
      "id": "/tmp/repos/scikit-learn/sklearn/neighbors/_regression.py_RadiusNeighborsRegressor.predict_",
      "distance": 1.0912246704101562,
      "file_path": "sklearn/neighbors/_regression.py",
      "start_line": 446,
      "end_line": 502,
      "tokens": 363,
      "context_length": 16517
    },
    {
      "position": 35,
      "id": "/tmp/repos/scikit-learn/sklearn/ensemble/_bagging.py_BaggingRegressor.predict_BaggingRegressor.predict.10.1",
      "distance": 1.0921709537506104,
      "file_path": "sklearn/ensemble/_bagging.py",
      "start_line": 1198,
      "end_line": 1240,
      "tokens": 285,
      "context_length": 16802
    },
    {
      "position": 36,
      "id": "/tmp/repos/scikit-learn/sklearn/ensemble/_gb.py_GradientBoostingRegressor.predict_GradientBoostingRegressor.predict.4.1",
      "distance": 1.0953092575073242,
      "file_path": "sklearn/ensemble/_gb.py",
      "start_line": 1772,
      "end_line": 1791,
      "tokens": 168,
      "context_length": 16970
    },
    {
      "position": 37,
      "id": "/tmp/repos/scikit-learn/sklearn/multioutput.py_ClassifierChain.fit_ClassifierChain.fit.5.1",
      "distance": 1.098789095878601,
      "file_path": "sklearn/multioutput.py",
      "start_line": 797,
      "end_line": 819,
      "tokens": 142,
      "context_length": 17112
    },
    {
      "position": 38,
      "id": "/tmp/repos/scikit-learn/sklearn/compose/_target.py_warnings_TransformedTargetRegressor.1",
      "distance": 1.0996642112731934,
      "file_path": "sklearn/compose/_target.py",
      "start_line": 5,
      "end_line": 129,
      "tokens": 1016,
      "context_length": 18128
    },
    {
      "position": 39,
      "id": "/tmp/repos/scikit-learn/sklearn/multioutput.py__MultiOutputEstimator.fit__MultiOutputEstimator.fit.12.1",
      "distance": 1.1015554666519165,
      "file_path": "sklearn/multioutput.py",
      "start_line": 169,
      "end_line": 231,
      "tokens": 484,
      "context_length": 18612
    },
    {
      "position": 40,
      "id": "/tmp/repos/scikit-learn/sklearn/datasets/_samples_generator.py_make_regression.n_informative_make_regression.16.2.1.1",
      "distance": 1.1035869121551514,
      "file_path": "sklearn/datasets/_samples_generator.py",
      "start_line": 647,
      "end_line": 693,
      "tokens": 608,
      "context_length": 19220
    },
    {
      "position": 41,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_ransac.py_RANSACRegressor.fit_RANSACRegressor.fit.random_state.1",
      "distance": 1.1035869121551514,
      "file_path": "sklearn/linear_model/_ransac.py",
      "start_line": 300,
      "end_line": 398,
      "tokens": 797,
      "context_length": 20017
    },
    {
      "position": 42,
      "id": "/tmp/repos/scikit-learn/sklearn/naive_bayes.py_GaussianNB._partial_fit.16_GaussianNB._partial_fit.20.1",
      "distance": 1.1083673238754272,
      "file_path": "sklearn/naive_bayes.py",
      "start_line": 483,
      "end_line": 509,
      "tokens": 246,
      "context_length": 20263
    },
    {
      "position": 43,
      "id": "/tmp/repos/scikit-learn/sklearn/ensemble/_gb.py_GradientBoostingClassifier._validate_y_GradientBoostingClassifier._validate_y.8.1",
      "distance": 1.10865318775177,
      "file_path": "sklearn/ensemble/_gb.py",
      "start_line": 1213,
      "end_line": 1226,
      "tokens": 147,
      "context_length": 20410
    },
    {
      "position": 44,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor._constrained_optimization_",
      "distance": 1.1103919744491577,
      "file_path": "sklearn/gaussian_process/_gpr.py",
      "start_line": 622,
      "end_line": 642,
      "tokens": 178,
      "context_length": 20588,
      "file_pos": 19
    },
    {
      "position": 45,
      "id": "/tmp/repos/scikit-learn/examples/gaussian_process/plot_compare_gpr_krr.py_kernel_206_",
      "distance": 1.1128978729248047,
      "file_path": "examples/gaussian_process/plot_compare_gpr_krr.py",
      "start_line": 344,
      "end_line": 396,
      "tokens": 373,
      "context_length": 20961
    },
    {
      "position": 46,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_quantile.py_QuantileRegressor.fit_QuantileRegressor.fit.28",
      "distance": 1.113620638847351,
      "file_path": "sklearn/linear_model/_quantile.py",
      "start_line": 144,
      "end_line": 235,
      "tokens": 814,
      "context_length": 21775
    },
    {
      "position": 47,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_omp.py_OrthogonalMatchingPursuit.fit_OrthogonalMatchingPursuit.fit.12.1",
      "distance": 1.1150826215744019,
      "file_path": "sklearn/linear_model/_omp.py",
      "start_line": 728,
      "end_line": 792,
      "tokens": 507,
      "context_length": 22282
    },
    {
      "position": 48,
      "id": "/tmp/repos/scikit-learn/sklearn/kernel_approximation.py_SkewedChi2Sampler.__init___SkewedChi2Sampler.fit.12.1",
      "distance": 1.1160781383514404,
      "file_path": "sklearn/kernel_approximation.py",
      "start_line": 496,
      "end_line": 537,
      "tokens": 390,
      "context_length": 22672
    },
    {
      "position": 49,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_ransac.py_RANSACRegressor.fit.36_RANSACRegressor.fit.37",
      "distance": 1.1163586378097534,
      "file_path": "sklearn/linear_model/_ransac.py",
      "start_line": 432,
      "end_line": 516,
      "tokens": 683,
      "context_length": 23355
    },
    {
      "position": 50,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_least_angle.py_Lars.fit_LassoLars",
      "distance": 1.1174273490905762,
      "file_path": "sklearn/linear_model/_least_angle.py",
      "start_line": 1100,
      "end_line": 1347,
      "tokens": 375,
      "context_length": 23730
    },
    {
      "position": 51,
      "id": "/tmp/repos/scikit-learn/examples/compose/plot_transformed_target.py_1_y_pred_ridge_with_trans_target.1",
      "distance": 1.1238644123077393,
      "file_path": "examples/compose/plot_transformed_target.py",
      "start_line": 1,
      "end_line": 95,
      "tokens": 740,
      "context_length": 24470
    },
    {
      "position": 52,
      "id": "/tmp/repos/scikit-learn/sklearn/gaussian_process/_gpr.py_GaussianProcessRegressor.predict_GaussianProcessRegressor.predict.X.1",
      "distance": 1.1258666515350342,
      "file_path": "sklearn/gaussian_process/_gpr.py",
      "start_line": 342,
      "end_line": 387,
      "tokens": 434,
      "context_length": 24904,
      "file_pos": 24
    },
    {
      "position": 53,
      "id": "/tmp/repos/scikit-learn/examples/gaussian_process/plot_gpr_noisy.py_68_",
      "distance": 1.1324043273925781,
      "file_path": "examples/gaussian_process/plot_gpr_noisy.py",
      "start_line": 103,
      "end_line": 193,
      "tokens": 833,
      "context_length": 25737
    },
    {
      "position": 54,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_glm/glm.py__GeneralizedLinearRegressor.fit.32__GeneralizedLinearRegressor.fit.34.1",
      "distance": 1.1334257125854492,
      "file_path": "sklearn/linear_model/_glm/glm.py",
      "start_line": 263,
      "end_line": 319,
      "tokens": 499,
      "context_length": 26236
    },
    {
      "position": 55,
      "id": "/tmp/repos/scikit-learn/sklearn/ensemble/_gb.py_BaseGradientBoosting_BaseGradientBoosting._validate_y.1",
      "distance": 1.1353967189788818,
      "file_path": "sklearn/ensemble/_gb.py",
      "start_line": 134,
      "end_line": 201,
      "tokens": 554,
      "context_length": 26790
    },
    {
      "position": 56,
      "id": "/tmp/repos/scikit-learn/sklearn/multioutput.py_MultiOutputClassifier_MultiOutputClassifier.__init__.1",
      "distance": 1.1357003450393677,
      "file_path": "sklearn/multioutput.py",
      "start_line": 355,
      "end_line": 425,
      "tokens": 591,
      "context_length": 27381
    },
    {
      "position": 57,
      "id": "/tmp/repos/scikit-learn/sklearn/metrics/_classification.py__check_targets__weighted_sum.1.3.1.1",
      "distance": 1.1369950771331787,
      "file_path": "sklearn/metrics/_classification.py",
      "start_line": 58,
      "end_line": 142,
      "tokens": 720,
      "context_length": 28101
    }
  ],
  "files": [
    {
      "file_path": "sklearn/gaussian_process/_gpr.py",
      "position": 1,
      "tokens": 5927,
      "context_length": 5927
    },
    {
      "file_path": "sklearn/naive_bayes.py",
      "position": 2,
      "tokens": 13062,
      "context_length": 18989
    },
    {
      "file_path": "examples/gaussian_process/plot_gpr_noisy_targets.py",
      "position": 3,
      "tokens": 1265,
      "context_length": 20254
    },
    {
      "file_path": "sklearn/multioutput.py",
      "position": 4,
      "tokens": 7836,
      "context_length": 28090
    },
    {
      "file_path": "sklearn/utils/multiclass.py",
      "position": 5,
      "tokens": 4719,
      "context_length": 32809
    },
    {
      "file_path": "sklearn/gaussian_process/_gpc.py",
      "position": 6,
      "tokens": 8024,
      "context_length": 40833
    },
    {
      "file_path": "sklearn/kernel_approximation.py",
      "position": 7,
      "tokens": 9368,
      "context_length": 50201
    },
    {
      "file_path": "sklearn/compose/_target.py",
      "position": 8,
      "tokens": 2512,
      "context_length": 52713
    },
    {
      "file_path": "sklearn/cross_decomposition/_pls.py",
      "position": 9,
      "tokens": 9083,
      "context_length": 61796
    },
    {
      "file_path": "sklearn/preprocessing/_target_encoder.py",
      "position": 10,
      "tokens": 3050,
      "context_length": 64846
    },
    {
      "file_path": "examples/gaussian_process/plot_gpr_prior_posterior.py",
      "position": 11,
      "tokens": 2328,
      "context_length": 67174
    },
    {
      "file_path": "sklearn/linear_model/_glm/glm.py",
      "position": 12,
      "tokens": 7535,
      "context_length": 74709
    },
    {
      "file_path": "sklearn/neighbors/_regression.py",
      "position": 13,
      "tokens": 3989,
      "context_length": 78698
    },
    {
      "file_path": "examples/gaussian_process/plot_gpr_noisy.py",
      "position": 14,
      "tokens": 1706,
      "context_length": 80404
    },
    {
      "file_path": "sklearn/neural_network/_multilayer_perceptron.py",
      "position": 15,
      "tokens": 13505,
      "context_length": 93909
    },
    {
      "file_path": "sklearn/ensemble/_bagging.py",
      "position": 16,
      "tokens": 9476,
      "context_length": 103385
    },
    {
      "file_path": "sklearn/ensemble/_gb.py",
      "position": 17,
      "tokens": 15780,
      "context_length": 119165
    },
    {
      "file_path": "sklearn/datasets/_samples_generator.py",
      "position": 18,
      "tokens": 17341,
      "context_length": 136506
    },
    {
      "file_path": "sklearn/linear_model/_ransac.py",
      "position": 19,
      "tokens": 4908,
      "context_length": 141414
    },
    {
      "file_path": "examples/gaussian_process/plot_compare_gpr_krr.py",
      "position": 20,
      "tokens": 3081,
      "context_length": 144495
    },
    {
      "file_path": "sklearn/linear_model/_quantile.py",
      "position": 21,
      "tokens": 2683,
      "context_length": 147178
    },
    {
      "file_path": "sklearn/linear_model/_omp.py",
      "position": 22,
      "tokens": 9364,
      "context_length": 156542
    },
    {
      "file_path": "sklearn/linear_model/_least_angle.py",
      "position": 23,
      "tokens": 19871,
      "context_length": 176413
    },
    {
      "file_path": "examples/compose/plot_transformed_target.py",
      "position": 24,
      "tokens": 1943,
      "context_length": 178356
    },
    {
      "file_path": "sklearn/metrics/_classification.py",
      "position": 25,
      "tokens": 28883,
      "context_length": 207239
    }
  ]
}