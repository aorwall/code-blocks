{
  "instance_id": "scikit-learn__scikit-learn-25805",
  "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..1ec6df9bd 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -308,42 +308,97 @@ class CalibratedClassifierCV(ClassifierMixin, MetaEstimatorMixin, BaseEstimator)\n         if sample_weight is not None:\n             sample_weight = _check_sample_weight(sample_weight, X)\n \n-        for sample_aligned_params in fit_params.values():\n-            check_consistent_length(y, sample_aligned_params)\n+        for key, value in fit_params.items():\n+            if key == 'eval_set':\n+                # Special handling for eval_set to avoid length check\n+                continue\n+            check_consistent_length(y, value)\n+\n+        # Set `classes_` using all `y`\n+        label_encoder_ = LabelEncoder().fit(y)\n+        self.classes_ = label_encoder_.classes_\n+        n_classes = len(self.classes_)\n+\n+        # sample_weight checks\n+        fit_parameters = signature(estimator.fit).parameters\n+        supports_sw = \"sample_weight\" in fit_parameters\n+        if sample_weight is not None and not supports_sw:\n+            estimator_name = type(estimator).__name__\n+            warnings.warn(\n+                f\"Since {estimator_name} does not appear to accept sample_weight, \"\n+                \"sample weights will only be used for the calibration itself. This \"\n+                \"can be caused by a limitation of the current scikit-learn API. \"\n+                \"See the following issue for more details: \"\n+                \"https://github.com/scikit-learn/scikit-learn/issues/21134. Be \"\n+                \"warned that the result of the calibration is likely to be \"\n+                \"incorrect.\"\n+            )\n \n-        # TODO(1.4): Remove when base_estimator is removed\n-        if self.base_estimator != \"deprecated\":\n-            if self.estimator is not None:\n-                raise ValueError(\n-                    \"Both `base_estimator` and `estimator` are set. Only set \"\n-                    \"`estimator` since `base_estimator` is deprecated.\"\n+        # Check that each cross-validation fold can have at least one\n+        # example per class\n+        if isinstance(self.cv, int):\n+            n_folds = self.cv\n+        elif hasattr(self.cv, \"n_splits\"):\n+            n_folds = self.cv.n_splits\n+        else:\n+            n_folds = None\n+        if n_folds and np.any(\n+            [np.sum(y == class_) < n_folds for class_ in self.classes_]\n+        ):\n+            raise ValueError(\n+                f\"Requesting {n_folds}-fold \"\n+                \"cross-validation but provided less than \"\n+                f\"{n_folds} examples for at least one class.\"\n+            )\n+        cv = check_cv(self.cv, y, classifier=True)\n+\n+        if self.ensemble:\n+            parallel = Parallel(n_jobs=self.n_jobs)\n+            self.calibrated_classifiers_ = parallel(\n+                delayed(_fit_classifier_calibrator_pair)(\n+                    clone(estimator),\n+                    X,\n+                    y,\n+                    train=train,\n+                    test=test,\n+                    method=self.method,\n+                    classes=self.classes_,\n+                    supports_sw=supports_sw,\n+                    sample_weight=sample_weight,\n+                    **fit_params,\n                 )\n-            warnings.warn(\n-                \"`base_estimator` was renamed to `estimator` in version 1.2 and \"\n-                \"will be removed in 1.4.\",\n-                FutureWarning,\n+                for train, test in cv.split(X, y)\n             )\n-            estimator = self.base_estimator\n         else:\n-            estimator = self.estimator\n-\n-        if estimator is None:\n-            # we want all classifiers that don't expose a random_state\n-            # to be deterministic (and we don't want to expose this one).\n-            estimator = LinearSVC(random_state=0)\n-\n-        self.calibrated_classifiers_ = []\n-        if self.cv == \"prefit\":\n-            # `classes_` should be consistent with that of estimator\n-            check_is_fitted(self.estimator, attributes=[\"classes_\"])\n-            self.classes_ = self.estimator.classes_\n-\n-            pred_method, method_name = _get_prediction_method(estimator)\n-            n_classes = len(self.classes_)\n-            predictions = _compute_predictions(pred_method, method_name, X, n_classes)\n+            this_estimator = clone(estimator)\n+            _, method_name = _get_prediction_method(this_estimator)\n+            fit_params = (\n+                {\"sample_weight\": sample_weight}\n+                if sample_weight is not None and supports_sw\n+                else None\n+            )\n+            pred_method = partial(\n+                cross_val_predict,\n+                estimator=this_estimator,\n+                X=X,\n+                y=y,\n+                cv=cv,\n+                method=method_name,\n+                n_jobs=self.n_jobs,\n+                fit_params=fit_params,\n+            )\n+            predictions = _compute_predictions(\n+                pred_method, method_name, X, n_classes\n+            )\n \n+            if sample_weight is not None and supports_sw:\n+                this_estimator.fit(X, y, sample_weight=sample_weight)\n+            else:\n+                this_estimator.fit(X, y)\n+            # Note: Here we don't pass on fit_params because the supported\n+            # calibrators don't support fit_params anyway\n             calibrated_classifier = _fit_calibrator(\n-                estimator,\n+                this_estimator,\n                 predictions,\n                 y,\n                 self.classes_,\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "sklearn/calibration.py"
  ],
  "repo": "scikit-learn/scikit-learn",
  "base_commit": "67ea7206bc052eb752f7881eb6043a00fe27c800",
  "patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -308,9 +308,6 @@ def fit(self, X, y, sample_weight=None, **fit_params):\n         if sample_weight is not None:\n             sample_weight = _check_sample_weight(sample_weight, X)\n \n-        for sample_aligned_params in fit_params.values():\n-            check_consistent_length(y, sample_aligned_params)\n-\n         # TODO(1.4): Remove when base_estimator is removed\n         if self.base_estimator != \"deprecated\":\n             if self.estimator is not None:\n",
  "test_patch": "diff --git a/sklearn/tests/test_calibration.py b/sklearn/tests/test_calibration.py\n--- a/sklearn/tests/test_calibration.py\n+++ b/sklearn/tests/test_calibration.py\n@@ -974,23 +974,6 @@ def fit(self, X, y, **fit_params):\n         pc_clf.fit(X, y, sample_weight=sample_weight)\n \n \n-def test_calibration_with_fit_params_inconsistent_length(data):\n-    \"\"\"fit_params having different length than data should raise the\n-    correct error message.\n-    \"\"\"\n-    X, y = data\n-    fit_params = {\"a\": y[:5]}\n-    clf = CheckingClassifier(expected_fit_params=fit_params)\n-    pc_clf = CalibratedClassifierCV(clf)\n-\n-    msg = (\n-        r\"Found input variables with inconsistent numbers of \"\n-        r\"samples: \\[\" + str(N_SAMPLES) + r\", 5\\]\"\n-    )\n-    with pytest.raises(ValueError, match=msg):\n-        pc_clf.fit(X, y, **fit_params)\n-\n-\n @pytest.mark.parametrize(\"method\", [\"sigmoid\", \"isotonic\"])\n @pytest.mark.parametrize(\"ensemble\", [True, False])\n def test_calibrated_classifier_cv_zeros_sample_weights_equivalence(method, ensemble):\n@@ -1054,3 +1037,17 @@ def test_calibrated_classifier_deprecation_base_estimator(data):\n     warn_msg = \"`base_estimator` was renamed to `estimator`\"\n     with pytest.warns(FutureWarning, match=warn_msg):\n         calibrated_classifier.fit(*data)\n+\n+\n+def test_calibration_with_non_sample_aligned_fit_param(data):\n+    \"\"\"Check that CalibratedClassifierCV does not enforce sample alignment\n+    for fit parameters.\"\"\"\n+\n+    class TestClassifier(LogisticRegression):\n+        def fit(self, X, y, sample_weight=None, fit_param=None):\n+            assert fit_param is not None\n+            return super().fit(X, y, sample_weight=sample_weight)\n+\n+    CalibratedClassifierCV(estimator=TestClassifier()).fit(\n+        *data, fit_param=np.ones(len(data[1]) + 1)\n+    )\n",
  "problem_statement": "CalibratedClassifierCV fails on lgbm fit_params\nHi,\r\n\r\nI'm trying to use CalibratedClassifierCV to calibrate the probabilities from a LGBM model. The issue is that when I try CalibratedClassifierCV with eval_set, I get an error ValueError: Found input variables with inconsistent numbers of samples: [43364, 1] which is caused by check_consistent_length function in validation.py The input to eval set is [X_valid,Y_valid] where both X_valid,Y_valid are arrays with different shape. Since this format is a requirement for LGBM eval set https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.LGBMClassifier.html, I am not sure how will I make the check_consistent_length pass in my scenario. Full code is given below:\r\n\r\n```python\r\nimport lightgbm as lgbm\r\nfrom sklearn.calibration import CalibratedClassifierCV\r\n\r\ndef _train_lgbm_model():\r\n    model = lgbm.LGBMClassifier(**parameters.lgbm_params)\r\n    fit_params = {\r\n        \"eval_set\": [(X_valid, Y_valid)],\r\n        \"eval_names\": [\"train\", \"valid\"],\r\n        \"verbose\": 0,\r\n    }\r\n    return model, fit_params\r\n\r\nmodel = CalibratedClassifierCV(model, method='isotonic')\r\ntrained_model = model.fit(X_train, Y_train, **fit_param)\r\n\r\nError: ValueError: Found input variables with inconsistent numbers of samples: [43364, 1]\r\n\r\n``` \r\nX_train.shape = (43364, 152)\r\nX_valid.shape = (43364,)\r\nY_train.shape = (43364, 152)\r\nY_valid.shape = (43364,)\r\n\n",
  "hints_text": "Once we have metadata routing with would have an explicit way to tell how to broadcast such parameters to the base estimators. However as far as I know, the current state of SLEP6 does not have a way to tell whether or not we want to apply cross-validation indexing and therefore disable the length consistency check for the things that are not meant to be the sample-aligned fit params.\r\n\r\nMaybe @adrinjalali knows if this topic was already addressed in SLEP6 or not.\nI think this is orthogonal to SLEP006, and a bug in `CalibratedClassifierCV`, which has these lines:\r\n\r\nhttps://github.com/scikit-learn/scikit-learn/blob/c991e30c96ace1565604b429de22e36ed6b1e7bd/sklearn/calibration.py#L311-L312\r\n\r\nI'm not sure why this check is there. IMO the logic should be like `GridSearchCV`, where we split the data where the length is the same as `y`, otherwise pass unchanged.\r\n\r\ncc @glemaitre \n@adrinjalali - Thanks for your response Adrin, this was my conclusion as well. What would be the path forward to resolve this bug?\nI'll open a PR to propose a fix @Sidshroff \nI looked at other estimators and indeed we never check that `fit_params` are sample-aligned but only propagate. I could not find the reasoning in the original PR, we were a bit sloppy regarding this aspect. I think a PR removing this check is fine.",
  "created_at": "2023-03-10T12:37:03Z",
  "version": "1.3",
  "FAIL_TO_PASS": "[\"sklearn/tests/test_calibration.py::test_calibration_with_non_sample_aligned_fit_param\"]",
  "PASS_TO_PASS": "[\"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_double_sample_weights_equivalence[False-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_double_sample_weights_equivalence[False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_double_sample_weights_equivalence[True-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_double_sample_weights_equivalence[True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[False-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[True-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_deprecation_base_estimator\", \"sklearn/tests/test_calibration.py::test_calibrated_classifier_error_base_estimator\", \"sklearn/tests/test_calibration.py::test_calibration[False-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration[False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration[True-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration[True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration_accepts_ndarray[X0]\", \"sklearn/tests/test_calibration.py::test_calibration_accepts_ndarray[X1]\", \"sklearn/tests/test_calibration.py::test_calibration_attributes[clf0-2]\", \"sklearn/tests/test_calibration.py::test_calibration_attributes[clf1-prefit]\", \"sklearn/tests/test_calibration.py::test_calibration_curve\", \"sklearn/tests/test_calibration.py::test_calibration_curve_pos_label[object]\", \"sklearn/tests/test_calibration.py::test_calibration_curve_pos_label[str]\", \"sklearn/tests/test_calibration.py::test_calibration_curve_pos_label_error_str[object]\", \"sklearn/tests/test_calibration.py::test_calibration_curve_pos_label_error_str[str]\", \"sklearn/tests/test_calibration.py::test_calibration_curve_with_unnormalized_proba\", \"sklearn/tests/test_calibration.py::test_calibration_cv_splitter[False]\", \"sklearn/tests/test_calibration.py::test_calibration_cv_splitter[True]\", \"sklearn/tests/test_calibration.py::test_calibration_default_estimator\", \"sklearn/tests/test_calibration.py::test_calibration_dict_pipeline\", \"sklearn/tests/test_calibration.py::test_calibration_display_compute[quantile-10]\", \"sklearn/tests/test_calibration.py::test_calibration_display_compute[quantile-5]\", \"sklearn/tests/test_calibration.py::test_calibration_display_compute[uniform-10]\", \"sklearn/tests/test_calibration.py::test_calibration_display_compute[uniform-5]\", \"sklearn/tests/test_calibration.py::test_calibration_display_default_labels[None-_line1]\", \"sklearn/tests/test_calibration.py::test_calibration_display_default_labels[my_est-my_est]\", \"sklearn/tests/test_calibration.py::test_calibration_display_label_class_plot\", \"sklearn/tests/test_calibration.py::test_calibration_display_name_multiple_calls[from_estimator]\", \"sklearn/tests/test_calibration.py::test_calibration_display_name_multiple_calls[from_predictions]\", \"sklearn/tests/test_calibration.py::test_calibration_display_non_binary[from_estimator]\", \"sklearn/tests/test_calibration.py::test_calibration_display_non_binary[from_predictions]\", \"sklearn/tests/test_calibration.py::test_calibration_display_pos_label[0-0]\", \"sklearn/tests/test_calibration.py::test_calibration_display_pos_label[1-1]\", \"sklearn/tests/test_calibration.py::test_calibration_display_pos_label[None-1]\", \"sklearn/tests/test_calibration.py::test_calibration_display_ref_line\", \"sklearn/tests/test_calibration.py::test_calibration_display_validation\", \"sklearn/tests/test_calibration.py::test_calibration_ensemble_false[isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_ensemble_false[sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration_inconsistent_prefit_n_features_in\", \"sklearn/tests/test_calibration.py::test_calibration_less_classes[False]\", \"sklearn/tests/test_calibration.py::test_calibration_less_classes[True]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[0-False-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[0-False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[0-True-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[0-True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[1-False-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[1-False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[1-True-isotonic]\", \"sklearn/tests/test_calibration.py::test_calibration_multiclass[1-True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_calibration_nan_imputer[False]\", \"sklearn/tests/test_calibration.py::test_calibration_nan_imputer[True]\", \"sklearn/tests/test_calibration.py::test_calibration_prefit\", \"sklearn/tests/test_calibration.py::test_calibration_prob_sum[False]\", \"sklearn/tests/test_calibration.py::test_calibration_prob_sum[True]\", \"sklearn/tests/test_calibration.py::test_calibration_votingclassifier\", \"sklearn/tests/test_calibration.py::test_calibration_with_fit_params[array]\", \"sklearn/tests/test_calibration.py::test_calibration_with_fit_params[list]\", \"sklearn/tests/test_calibration.py::test_calibration_with_sample_weight_base_estimator[sample_weight0]\", \"sklearn/tests/test_calibration.py::test_calibration_with_sample_weight_base_estimator[sample_weight1]\", \"sklearn/tests/test_calibration.py::test_calibration_without_sample_weight_base_estimator\", \"sklearn/tests/test_calibration.py::test_calibration_zero_probability\", \"sklearn/tests/test_calibration.py::test_parallel_execution[False-isotonic]\", \"sklearn/tests/test_calibration.py::test_parallel_execution[False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_parallel_execution[True-isotonic]\", \"sklearn/tests/test_calibration.py::test_parallel_execution[True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_plot_calibration_curve_pipeline\", \"sklearn/tests/test_calibration.py::test_sample_weight[False-isotonic]\", \"sklearn/tests/test_calibration.py::test_sample_weight[False-sigmoid]\", \"sklearn/tests/test_calibration.py::test_sample_weight[True-isotonic]\", \"sklearn/tests/test_calibration.py::test_sample_weight[True-sigmoid]\", \"sklearn/tests/test_calibration.py::test_sigmoid_calibration\"]",
  "environment_setup_commit": "1e8a5b833d1b58f3ab84099c4582239af854b23a",
  "patch_files": [
    "sklearn/calibration.py"
  ],
  "test_patch_files": [
    "sklearn/tests/test_calibration.py"
  ],
  "patch_diff_details": {
    "sklearn/calibration.py": {
      "diffs": [
        {
          "start_line_old": 311,
          "end_line_old": 313,
          "file_pos": 1,
          "file_context_length": 10987,
          "closest_snippet_id": "/tmp/repos/scikit-learn/sklearn/calibration.py_CalibratedClassifierCV._parameter_constraints_CalibratedClassifierCV.__init__.self.base_estimator.1",
          "closest_snippet_line_distance": 34,
          "pos": 7,
          "context_length": 4715
        }
      ]
    }
  },
  "vectors": 3917,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/scikit-learn/sklearn/calibration.py_CalibratedClassifierCV.fit.11_CalibratedClassifierCV.fit.15.1",
      "distance": 0.8657082915306091,
      "file_path": "sklearn/calibration.py",
      "start_line": 336,
      "end_line": 453,
      "tokens": 932,
      "context_length": 932,
      "file_pos": 1
    },
    {
      "position": 2,
      "id": "/tmp/repos/scikit-learn/sklearn/calibration.py_CalibratedClassifierCV.1_CalibratedClassifierCV.1",
      "distance": 0.8969413042068481,
      "file_path": "sklearn/calibration.py",
      "start_line": 56,
      "end_line": 244,
      "tokens": 1916,
      "context_length": 2848,
      "file_pos": 1
    },
    {
      "position": 3,
      "id": "/tmp/repos/scikit-learn/sklearn/calibration.py_CalibratedClassifierCV._parameter_constraints_CalibratedClassifierCV.__init__.self.base_estimator.1",
      "distance": 0.9274431467056274,
      "file_path": "sklearn/calibration.py",
      "start_line": 246,
      "end_line": 279,
      "tokens": 227,
      "context_length": 3075,
      "file_pos": 1
    },
    {
      "position": 4,
      "id": "/tmp/repos/scikit-learn/benchmarks/bench_rcv1_logreg_convergence.py_46_",
      "distance": 0.9533766508102417,
      "file_path": "benchmarks/bench_rcv1_logreg_convergence.py",
      "start_line": 256,
      "end_line": 313,
      "tokens": 397,
      "context_length": 3472
    },
    {
      "position": 5,
      "id": "/tmp/repos/scikit-learn/sklearn/calibration.py_CalibratedClassifierCV.fit_CalibratedClassifierCV.fit.self.calibrated_classifiers_.1",
      "distance": 0.9553446769714355,
      "file_path": "sklearn/calibration.py",
      "start_line": 281,
      "end_line": 335,
      "tokens": 405,
      "context_length": 3877,
      "file_pos": 2
    },
    {
      "position": 6,
      "id": "/tmp/repos/scikit-learn/sklearn/calibration.py_calibration_curve.y_true_calibration_curve.20.1",
      "distance": 0.9592166543006897,
      "file_path": "sklearn/calibration.py",
      "start_line": 993,
      "end_line": 1042,
      "tokens": 557,
      "context_length": 4434,
      "file_pos": 2
    },
    {
      "position": 7,
      "id": "/tmp/repos/scikit-learn/sklearn/calibration.py_1_CalibratedClassifierCV",
      "distance": 0.9653863310813904,
      "file_path": "sklearn/calibration.py",
      "start_line": 1,
      "end_line": 511,
      "tokens": 281,
      "context_length": 4715,
      "file_pos": 2
    },
    {
      "position": 8,
      "id": "/tmp/repos/scikit-learn/sklearn/utils/validation.py_check_X_y.2_check_X_y.6.1",
      "distance": 0.9726894497871399,
      "file_path": "sklearn/utils/validation.py",
      "start_line": 1097,
      "end_line": 1126,
      "tokens": 284,
      "context_length": 4999
    },
    {
      "position": 9,
      "id": "/tmp/repos/scikit-learn/examples/calibration/plot_calibration_curve.py_58_np",
      "distance": 0.9754949808120728,
      "file_path": "examples/calibration/plot_calibration_curve.py",
      "start_line": 103,
      "end_line": 197,
      "tokens": 853,
      "context_length": 5852
    },
    {
      "position": 10,
      "id": "/tmp/repos/scikit-learn/examples/calibration/plot_calibration.py_1_clf_sigmoid_score.1",
      "distance": 0.9769052267074585,
      "file_path": "examples/calibration/plot_calibration.py",
      "start_line": 1,
      "end_line": 88,
      "tokens": 768,
      "context_length": 6620
    },
    {
      "position": 11,
      "id": "/tmp/repos/scikit-learn/examples/calibration/plot_calibration.py_52_",
      "distance": 0.9828999042510986,
      "file_path": "examples/calibration/plot_calibration.py",
      "start_line": 89,
      "end_line": 145,
      "tokens": 412,
      "context_length": 7032
    },
    {
      "position": 12,
      "id": "/tmp/repos/scikit-learn/examples/calibration/plot_calibration_curve.py_1_grid_positions.1",
      "distance": 0.9862654805183411,
      "file_path": "examples/calibration/plot_calibration_curve.py",
      "start_line": 1,
      "end_line": 102,
      "tokens": 702,
      "context_length": 7734
    },
    {
      "position": 13,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_logistic.py_LogisticRegressionCV.fit.26_LogisticRegressionCV.fit.self.Cs_.1",
      "distance": 0.9920854568481445,
      "file_path": "sklearn/linear_model/_logistic.py",
      "start_line": 1847,
      "end_line": 1910,
      "tokens": 600,
      "context_length": 8334
    },
    {
      "position": 14,
      "id": "/tmp/repos/scikit-learn/examples/calibration/plot_calibration_curve.py_152_",
      "distance": 0.9970859885215759,
      "file_path": "examples/calibration/plot_calibration_curve.py",
      "start_line": 297,
      "end_line": 337,
      "tokens": 414,
      "context_length": 8748
    },
    {
      "position": 15,
      "id": "/tmp/repos/scikit-learn/examples/calibration/plot_compare_calibration.py_35_",
      "distance": 0.9973112344741821,
      "file_path": "examples/calibration/plot_compare_calibration.py",
      "start_line": 85,
      "end_line": 211,
      "tokens": 1338,
      "context_length": 10086
    },
    {
      "position": 16,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_coordinate_descent.py_LinearModelCV.fit.11_LinearModelCV.fit.39",
      "distance": 0.9986094236373901,
      "file_path": "sklearn/linear_model/_coordinate_descent.py",
      "start_line": 1561,
      "end_line": 1647,
      "tokens": 739,
      "context_length": 10825
    },
    {
      "position": 17,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_logistic.py_LogisticRegressionCV.fit.self.C__56_LogisticRegressionCV.fit.62.1",
      "distance": 1.0015974044799805,
      "file_path": "sklearn/linear_model/_logistic.py",
      "start_line": 2037,
      "end_line": 2071,
      "tokens": 479,
      "context_length": 11304
    },
    {
      "position": 18,
      "id": "/tmp/repos/scikit-learn/sklearn/utils/validation.py_check_X_y_check_X_y.1",
      "distance": 1.0064160823822021,
      "file_path": "sklearn/utils/validation.py",
      "start_line": 981,
      "end_line": 1096,
      "tokens": 1027,
      "context_length": 12331
    },
    {
      "position": 19,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_search_successive_halving.py_BaseSuccessiveHalving._check_input_parameters_BaseSuccessiveHalving._check_input_parameters.3.9.1",
      "distance": 1.0075238943099976,
      "file_path": "sklearn/model_selection/_search_successive_halving.py",
      "start_line": 126,
      "end_line": 190,
      "tokens": 595,
      "context_length": 12926
    },
    {
      "position": 20,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_coordinate_descent.py_LinearModelCV.fit.jobs_LinearModelCV._more_tags.3.1",
      "distance": 1.017425775527954,
      "file_path": "sklearn/linear_model/_coordinate_descent.py",
      "start_line": 1648,
      "end_line": 1730,
      "tokens": 727,
      "context_length": 13653
    },
    {
      "position": 21,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_logistic.py_LogisticRegressionCV.fit_LogisticRegressionCV.fit.25",
      "distance": 1.0182950496673584,
      "file_path": "sklearn/linear_model/_logistic.py",
      "start_line": 1738,
      "end_line": 1846,
      "tokens": 802,
      "context_length": 14455
    },
    {
      "position": 22,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_logistic.py_LogisticRegressionCV.fit.55_LogisticRegressionCV.fit.55.3.5.2.1",
      "distance": 1.022207498550415,
      "file_path": "sklearn/linear_model/_logistic.py",
      "start_line": 1941,
      "end_line": 2035,
      "tokens": 859,
      "context_length": 15314
    },
    {
      "position": 23,
      "id": "/tmp/repos/scikit-learn/examples/calibration/plot_calibration_curve.py_113_scores_151.1",
      "distance": 1.0230273008346558,
      "file_path": "examples/calibration/plot_calibration_curve.py",
      "start_line": 222,
      "end_line": 296,
      "tokens": 659,
      "context_length": 15973
    },
    {
      "position": 24,
      "id": "/tmp/repos/scikit-learn/examples/calibration/plot_compare_calibration.py_1_33",
      "distance": 1.0262441635131836,
      "file_path": "examples/calibration/plot_compare_calibration.py",
      "start_line": 1,
      "end_line": 62,
      "tokens": 387,
      "context_length": 16360
    },
    {
      "position": 25,
      "id": "/tmp/repos/scikit-learn/sklearn/calibration.py_CalibrationDisplay.from_estimator.4_CalibrationDisplay.from_estimator.7.1",
      "distance": 1.0282096862792969,
      "file_path": "sklearn/calibration.py",
      "start_line": 1295,
      "end_line": 1313,
      "tokens": 185,
      "context_length": 16545,
      "file_pos": 9
    },
    {
      "position": 26,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_validation.py_validation_curve.2_validation_curve.11.1",
      "distance": 1.028247356414795,
      "file_path": "sklearn/model_selection/_validation.py",
      "start_line": 1890,
      "end_line": 1920,
      "tokens": 290,
      "context_length": 16835
    },
    {
      "position": 27,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_validation.py__fit_and_score.2__fit_and_score.15.3.5.train_scores.1",
      "distance": 1.0284533500671387,
      "file_path": "sklearn/model_selection/_validation.py",
      "start_line": 658,
      "end_line": 731,
      "tokens": 720,
      "context_length": 17555
    },
    {
      "position": 28,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_logistic.py_LogisticRegressionCV._parameter_constraints_LogisticRegressionCV.__init__.self.l1_ratios.1",
      "distance": 1.0297330617904663,
      "file_path": "sklearn/linear_model/_logistic.py",
      "start_line": 1683,
      "end_line": 1736,
      "tokens": 398,
      "context_length": 17953
    },
    {
      "position": 29,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_validation.py_learning_curve.2_learning_curve.20.1",
      "distance": 1.0333808660507202,
      "file_path": "sklearn/model_selection/_validation.py",
      "start_line": 1563,
      "end_line": 1649,
      "tokens": 760,
      "context_length": 18713
    },
    {
      "position": 30,
      "id": "/tmp/repos/scikit-learn/examples/calibration/plot_calibration_multiclass.py_122_",
      "distance": 1.0343208312988281,
      "file_path": "examples/calibration/plot_calibration_multiclass.py",
      "start_line": 229,
      "end_line": 275,
      "tokens": 545,
      "context_length": 19258
    },
    {
      "position": 31,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_stochastic_gradient.py_BaseSGD._more_validate_params_BaseSGD._more_validate_params.9.1",
      "distance": 1.0343313217163086,
      "file_path": "sklearn/linear_model/_stochastic_gradient.py",
      "start_line": 141,
      "end_line": 167,
      "tokens": 263,
      "context_length": 19521
    },
    {
      "position": 32,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_logistic.py_LogisticRegressionCV.fit.47_LogisticRegressionCV.fit.self.intercept_.1",
      "distance": 1.0349392890930176,
      "file_path": "sklearn/linear_model/_logistic.py",
      "start_line": 1911,
      "end_line": 1940,
      "tokens": 395,
      "context_length": 19916
    },
    {
      "position": 33,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_logistic.py_LogisticRegressionCV.1_LogisticRegressionCV.1",
      "distance": 1.0425753593444824,
      "file_path": "sklearn/linear_model/_logistic.py",
      "start_line": 1406,
      "end_line": 1681,
      "tokens": 3127,
      "context_length": 23043
    },
    {
      "position": 34,
      "id": "/tmp/repos/scikit-learn/sklearn/ensemble/_hist_gradient_boosting/grower.py_TreeGrower._validate_parameters_TreeGrower._validate_parameters.5.1",
      "distance": 1.0456745624542236,
      "file_path": "sklearn/ensemble/_hist_gradient_boosting/grower.py",
      "start_line": 335,
      "end_line": 359,
      "tokens": 185,
      "context_length": 23228
    },
    {
      "position": 35,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_validation.py_cross_validate.2_cross_validate.25.1",
      "distance": 1.0463900566101074,
      "file_path": "sklearn/model_selection/_validation.py",
      "start_line": 263,
      "end_line": 332,
      "tokens": 571,
      "context_length": 23799
    },
    {
      "position": 36,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_validation.py_cross_val_predict.2_cross_val_predict.18.2.1.1",
      "distance": 1.0467426776885986,
      "file_path": "sklearn/model_selection/_validation.py",
      "start_line": 977,
      "end_line": 1035,
      "tokens": 592,
      "context_length": 24391
    },
    {
      "position": 37,
      "id": "/tmp/repos/scikit-learn/examples/linear_model/plot_sparse_logistic_regression_20newsgroups.py_1_models.1",
      "distance": 1.0475311279296875,
      "file_path": "examples/linear_model/plot_sparse_logistic_regression_20newsgroups.py",
      "start_line": 1,
      "end_line": 63,
      "tokens": 484,
      "context_length": 24875
    },
    {
      "position": 38,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_validation.py_1_cross_validate",
      "distance": 1.048407793045044,
      "file_path": "sklearn/model_selection/_validation.py",
      "start_line": 1,
      "end_line": 332,
      "tokens": 308,
      "context_length": 25183
    },
    {
      "position": 39,
      "id": "/tmp/repos/scikit-learn/benchmarks/bench_hist_gradient_boosting_categorical_only.py_argparse_",
      "distance": 1.049591302871704,
      "file_path": "benchmarks/bench_hist_gradient_boosting_categorical_only.py",
      "start_line": 1,
      "end_line": 81,
      "tokens": 651,
      "context_length": 25834
    },
    {
      "position": 40,
      "id": "/tmp/repos/scikit-learn/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py_BaseHistGradientBoosting._check_categories_BaseHistGradientBoosting._check_categories.known_categories.1",
      "distance": 1.0504381656646729,
      "file_path": "sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py",
      "start_line": 182,
      "end_line": 266,
      "tokens": 713,
      "context_length": 26547
    },
    {
      "position": 41,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_validation.py__fit_and_score.16__fit_and_score.23.1",
      "distance": 1.051021695137024,
      "file_path": "sklearn/model_selection/_validation.py",
      "start_line": 733,
      "end_line": 770,
      "tokens": 428,
      "context_length": 26975
    },
    {
      "position": 42,
      "id": "/tmp/repos/scikit-learn/examples/linear_model/plot_quantile_regression.py_cv_results_lr_",
      "distance": 1.0568373203277588,
      "file_path": "examples/linear_model/plot_quantile_regression.py",
      "start_line": 290,
      "end_line": 317,
      "tokens": 219,
      "context_length": 27194
    },
    {
      "position": 43,
      "id": "/tmp/repos/scikit-learn/examples/linear_model/plot_lasso_model_selection.py_65_model_126.1",
      "distance": 1.0571273565292358,
      "file_path": "examples/linear_model/plot_lasso_model_selection.py",
      "start_line": 102,
      "end_line": 194,
      "tokens": 772,
      "context_length": 27966
    },
    {
      "position": 44,
      "id": "/tmp/repos/scikit-learn/examples/model_selection/plot_likelihood_ratios.py_50_populations.1",
      "distance": 1.0578563213348389,
      "file_path": "examples/model_selection/plot_likelihood_ratios.py",
      "start_line": 104,
      "end_line": 174,
      "tokens": 743,
      "context_length": 28709
    },
    {
      "position": 45,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_least_angle.py_LarsCV.fit_LassoLarsCV",
      "distance": 1.0583868026733398,
      "file_path": "sklearn/linear_model/_least_angle.py",
      "start_line": 1696,
      "end_line": 2012,
      "tokens": 837,
      "context_length": 29546
    },
    {
      "position": 46,
      "id": "/tmp/repos/scikit-learn/sklearn/linear_model/_coordinate_descent.py_MultiTaskLassoCV_MultiTaskLassoCV.1",
      "distance": 1.0643584728240967,
      "file_path": "sklearn/linear_model/_coordinate_descent.py",
      "start_line": 2827,
      "end_line": 2983,
      "tokens": 1350,
      "context_length": 30896
    },
    {
      "position": 47,
      "id": "/tmp/repos/scikit-learn/sklearn/base.py_BaseEstimator._validate_data.no_val_X_BaseEstimator._validate_data.10.1",
      "distance": 1.0645480155944824,
      "file_path": "sklearn/base.py",
      "start_line": 574,
      "end_line": 610,
      "tokens": 452,
      "context_length": 31348
    },
    {
      "position": 48,
      "id": "/tmp/repos/scikit-learn/sklearn/calibration.py__fit_classifier_calibrator_pair__fit_classifier_calibrator_pair.11.1",
      "distance": 1.0650537014007568,
      "file_path": "sklearn/calibration.py",
      "start_line": 514,
      "end_line": 587,
      "tokens": 506,
      "context_length": 31854,
      "file_pos": 21
    },
    {
      "position": 49,
      "id": "/tmp/repos/scikit-learn/sklearn/model_selection/_split.py__yields_constant_splits_",
      "distance": 1.0664286613464355,
      "file_path": "sklearn/model_selection/_split.py",
      "start_line": 2706,
      "end_line": 2715,
      "tokens": 136,
      "context_length": 31990
    }
  ],
  "files": [
    {
      "file_path": "sklearn/calibration.py",
      "position": 1,
      "tokens": 10987,
      "context_length": 10987
    },
    {
      "file_path": "benchmarks/bench_rcv1_logreg_convergence.py",
      "position": 2,
      "tokens": 2046,
      "context_length": 13033
    },
    {
      "file_path": "sklearn/utils/validation.py",
      "position": 3,
      "tokens": 16945,
      "context_length": 29978
    },
    {
      "file_path": "examples/calibration/plot_calibration_curve.py",
      "position": 4,
      "tokens": 2978,
      "context_length": 32956
    },
    {
      "file_path": "examples/calibration/plot_calibration.py",
      "position": 5,
      "tokens": 1264,
      "context_length": 34220
    },
    {
      "file_path": "sklearn/linear_model/_logistic.py",
      "position": 6,
      "tokens": 19358,
      "context_length": 53578
    },
    {
      "file_path": "examples/calibration/plot_compare_calibration.py",
      "position": 7,
      "tokens": 2037,
      "context_length": 55615
    },
    {
      "file_path": "sklearn/linear_model/_coordinate_descent.py",
      "position": 8,
      "tokens": 25002,
      "context_length": 80617
    },
    {
      "file_path": "sklearn/model_selection/_search_successive_halving.py",
      "position": 9,
      "tokens": 9310,
      "context_length": 89927
    },
    {
      "file_path": "sklearn/model_selection/_validation.py",
      "position": 10,
      "tokens": 16114,
      "context_length": 106041
    },
    {
      "file_path": "examples/calibration/plot_calibration_multiclass.py",
      "position": 11,
      "tokens": 2863,
      "context_length": 108904
    },
    {
      "file_path": "sklearn/linear_model/_stochastic_gradient.py",
      "position": 12,
      "tokens": 19845,
      "context_length": 128749
    },
    {
      "file_path": "sklearn/ensemble/_hist_gradient_boosting/grower.py",
      "position": 13,
      "tokens": 6656,
      "context_length": 135405
    },
    {
      "file_path": "examples/linear_model/plot_sparse_logistic_regression_20newsgroups.py",
      "position": 14,
      "tokens": 1011,
      "context_length": 136416
    },
    {
      "file_path": "benchmarks/bench_hist_gradient_boosting_categorical_only.py",
      "position": 15,
      "tokens": 651,
      "context_length": 137067
    },
    {
      "file_path": "sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py",
      "position": 16,
      "tokens": 17203,
      "context_length": 154270
    },
    {
      "file_path": "examples/linear_model/plot_quantile_regression.py",
      "position": 17,
      "tokens": 2971,
      "context_length": 157241
    },
    {
      "file_path": "examples/linear_model/plot_lasso_model_selection.py",
      "position": 18,
      "tokens": 2133,
      "context_length": 159374
    },
    {
      "file_path": "examples/model_selection/plot_likelihood_ratios.py",
      "position": 19,
      "tokens": 2791,
      "context_length": 162165
    },
    {
      "file_path": "sklearn/linear_model/_least_angle.py",
      "position": 20,
      "tokens": 19871,
      "context_length": 182036
    },
    {
      "file_path": "sklearn/base.py",
      "position": 21,
      "tokens": 8436,
      "context_length": 190472
    },
    {
      "file_path": "sklearn/model_selection/_split.py",
      "position": 22,
      "tokens": 23103,
      "context_length": 213575
    }
  ]
}