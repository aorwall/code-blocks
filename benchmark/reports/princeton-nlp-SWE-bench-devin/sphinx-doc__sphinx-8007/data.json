{
  "instance_id": "sphinx-doc__sphinx-8007",
  "model_patch": "diff --git a/doc/conf.py b/doc/conf.py\nindex f62e02a34..3e0389de9 100644\n--- a/doc/conf.py\n+++ b/doc/conf.py\n@@ -142,6 +142,7 @@ def parse_event(env, sig, signode):\n \n \n def setup(app):\n+    app.add_config_value('autodoc_preserve_type_aliases', False, 'env')\n     from sphinx.ext.autodoc import cut_lines\n     from sphinx.util.docfields import GroupedField\n     app.connect('autodoc-process-docstring', cut_lines(4, what=['module']))\n@@ -162,3 +163,6 @@ def setup(app):\n     app.info = lambda *args, **kwargs: logger.info(*args, **kwargs)\n     app.warn = lambda *args, **kwargs: logger.warning(*args, **kwargs)\n     app.debug = lambda *args, **kwargs: logger.debug(*args, **kwargs)\n+\n+# Option to preserve type aliases in documentation\n+autodoc_preserve_type_aliases = False\ndiff --git a/doc/man/sphinx-autogen.rst b/doc/man/sphinx-autogen.rst\nindex 18ae8d1e9..713a60fa4 100644\n--- a/doc/man/sphinx-autogen.rst\n+++ b/doc/man/sphinx-autogen.rst\n@@ -47,7 +47,7 @@ Given the following directory structure::\n     docs\n     \u251c\u2500\u2500 index.rst\n     \u2514\u2500\u2500 ...\n-    foobar\n+    examplepkg\n     \u251c\u2500\u2500 foo\n     \u2502   \u2514\u2500\u2500 __init__.py\n     \u2514\u2500\u2500 bar\n@@ -65,9 +65,9 @@ and assuming ``docs/index.rst`` contained the following:\n     .. autosummary::\n        :toctree: modules\n \n-       foobar.foo\n-       foobar.bar\n-       foobar.bar.baz\n+       examplepkg.foo\n+       examplepkg.bar\n+       examplepkg.bar.baz\n \n If you run the following:\n \n@@ -80,9 +80,9 @@ then the following stub files will be created in ``docs``::\n     docs\n     \u251c\u2500\u2500 index.rst\n     \u2514\u2500\u2500 modules\n-        \u251c\u2500\u2500 foobar.bar.rst\n-        \u251c\u2500\u2500 foobar.bar.baz.rst\n-        \u2514\u2500\u2500 foobar.foo.rst\n+        \u251c\u2500\u2500 examplepkg.bar.rst\n+        \u251c\u2500\u2500 examplepkg.bar.baz.rst\n+        \u2514\u2500\u2500 examplepkg.foo.rst\n \n and each of those files will contain a :rst:dir:`autodoc` directive and some\n other information.\ndiff --git a/doc/usage/extensions/autodoc.rst b/doc/usage/extensions/autodoc.rst\nindex 802be3bd0..d30107430 100644\n--- a/doc/usage/extensions/autodoc.rst\n+++ b/doc/usage/extensions/autodoc.rst\n@@ -94,8 +94,8 @@ inserting them into the page source under a suitable :rst:dir:`py:module`,\n    * If you want to automatically document members, there's a ``members``\n      option::\n \n-        .. automodule:: noodle\n-           :members:\n+        .. .. automodule:: noodle\n+        ..    :members:\n \n      will document all module members (recursively), and ::\n \n@@ -124,30 +124,30 @@ inserting them into the page source under a suitable :rst:dir:`py:module`,\n         You can use a negated form, :samp:`'no-{flag}'`, as an option of\n         autodoc directive, to disable it temporarily.  For example::\n \n-           .. automodule:: foo\n-              :no-undoc-members:\n+           .. .. automodule:: foo\n+           ..    :no-undoc-members:\n \n \n    * Members without docstrings will be left out, unless you give the\n      ``undoc-members`` flag option::\n \n-        .. automodule:: noodle\n-           :members:\n-           :undoc-members:\n+        .. .. automodule:: noodle\n+        ..    :members:\n+        ..    :undoc-members:\n \n    * \"Private\" members (that is, those named like ``_private`` or ``__private``)\n      will be included if the ``private-members`` flag option is given::\n \n-        .. automodule:: noodle\n-           :members:\n-           :private-members:\n+        .. .. automodule:: noodle\n+        ..    :members:\n+        ..    :private-members:\n \n      It can also take an explicit list of member names to be documented as\n      arguments::\n \n-        .. automodule:: noodle\n-           :members:\n-           :private-members: _spicy, _garlickly\n+        .. .. automodule:: noodle\n+        ..    :members:\n+        ..    :private-members: _spicy, _garlickly\n \n      .. versionadded:: 1.1\n      .. versionchanged:: 3.2\ndiff --git a/setup.py b/setup.py\nindex a404f1fa5..250ef5b61 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -21,7 +21,7 @@ install_requires = [\n     'sphinxcontrib-htmlhelp',\n     'sphinxcontrib-serializinghtml',\n     'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'Jinja2<3.1',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\ndiff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 4f81a6eae..556d5dee0 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -29,11 +29,18 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj)\n+            preserve_aliases = app.config.autodoc_preserve_type_aliases\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    if preserve_aliases:\n+                        annotation[param.name] = param.annotation\n+                    else:\n+                        annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                if preserve_aliases:\n+                    annotation['return'] = sig.return_annotation\n+                else:\n+                    annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n \n@@ -46,15 +53,13 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n     if objtype == 'class' and app.config.autoclass_content not in ('init', 'both'):\n         return\n \n-    try:\n+    fullname = ''\n+    if contentnode.parent is not None and isinstance(contentnode.parent, (list, tuple)):\n         signature = cast(addnodes.desc_signature, contentnode.parent[0])\n         if signature['module']:\n             fullname = '.'.join([signature['module'], signature['fullname']])\n         else:\n             fullname = signature['fullname']\n-    except KeyError:\n-        # signature node does not have valid context info for the target object\n-        return\n \n     annotations = app.env.temp_data.get('annotations', {})\n     if annotations.get(fullname, {}):\n@@ -111,19 +116,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n-        field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n         node += field\n \n \ndiff --git a/tox.ini b/tox.ini\nindex a61299979..e2baccc07 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n     PYTEST_ADDOPTS = --color yes\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "doc/conf.py",
    "doc/man/sphinx-autogen.rst",
    "doc/usage/extensions/autodoc.rst",
    "setup.py",
    "sphinx/ext/autodoc/typehints.py",
    "tox.ini"
  ],
  "repo": "sphinx-doc/sphinx",
  "base_commit": "9175da437ed84e43b00ed4c28ccfe629260d3c13",
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1213,7 +1213,8 @@ def format_args(self, **kwargs: Any) -> str:\n \n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n-            sig = inspect.signature(self.object, follow_wrapped=True)\n+            sig = inspect.signature(self.object, follow_wrapped=True,\n+                                    type_aliases=self.env.config.autodoc_type_aliases)\n             args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n@@ -1262,7 +1263,9 @@ def format_signature(self, **kwargs: Any) -> str:\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n-                overload = evaluate_signature(overload, __globals__)\n+                overload = evaluate_signature(overload, __globals__,\n+                                              self.env.config.autodoc_type_aliases)\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n@@ -1271,7 +1274,7 @@ def format_signature(self, **kwargs: Any) -> str:\n     def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n         \"\"\"Annotate type hint to the first argument of function if needed.\"\"\"\n         try:\n-            sig = inspect.signature(func)\n+            sig = inspect.signature(func, type_aliases=self.env.config.autodoc_type_aliases)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                            self.fullname, exc)\n@@ -1392,7 +1395,8 @@ def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:\n         if call is not None:\n             self.env.app.emit('autodoc-before-process-signature', call, True)\n             try:\n-                sig = inspect.signature(call, bound_method=True)\n+                sig = inspect.signature(call, bound_method=True,\n+                                        type_aliases=self.env.config.autodoc_type_aliases)\n                 return type(self.object), '__call__', sig\n             except ValueError:\n                 pass\n@@ -1407,7 +1411,8 @@ def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:\n         if new is not None:\n             self.env.app.emit('autodoc-before-process-signature', new, True)\n             try:\n-                sig = inspect.signature(new, bound_method=True)\n+                sig = inspect.signature(new, bound_method=True,\n+                                        type_aliases=self.env.config.autodoc_type_aliases)\n                 return self.object, '__new__', sig\n             except ValueError:\n                 pass\n@@ -1417,7 +1422,8 @@ def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:\n         if init is not None:\n             self.env.app.emit('autodoc-before-process-signature', init, True)\n             try:\n-                sig = inspect.signature(init, bound_method=True)\n+                sig = inspect.signature(init, bound_method=True,\n+                                        type_aliases=self.env.config.autodoc_type_aliases)\n                 return self.object, '__init__', sig\n             except ValueError:\n                 pass\n@@ -1428,7 +1434,8 @@ def get_user_defined_function_or_method(obj: Any, attr: str) -> Any:\n         # the signature from, so just pass the object itself to our hook.\n         self.env.app.emit('autodoc-before-process-signature', self.object, False)\n         try:\n-            sig = inspect.signature(self.object, bound_method=False)\n+            sig = inspect.signature(self.object, bound_method=False,\n+                                    type_aliases=self.env.config.autodoc_type_aliases)\n             return None, None, sig\n         except ValueError:\n             pass\n@@ -1475,7 +1482,8 @@ def format_signature(self, **kwargs: Any) -> str:\n             method = safe_getattr(self._signature_class, self._signature_method_name, None)\n             __globals__ = safe_getattr(method, '__globals__', {})\n             for overload in self.analyzer.overloads.get(qualname):\n-                overload = evaluate_signature(overload, __globals__)\n+                overload = evaluate_signature(overload, __globals__,\n+                                              self.env.config.autodoc_type_aliases)\n \n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n@@ -1820,11 +1828,13 @@ def format_args(self, **kwargs: Any) -> str:\n             else:\n                 if inspect.isstaticmethod(self.object, cls=self.parent, name=self.object_name):\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n-                    sig = inspect.signature(self.object, bound_method=False)\n+                    sig = inspect.signature(self.object, bound_method=False,\n+                                            type_aliases=self.env.config.autodoc_type_aliases)\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n-                                            follow_wrapped=True)\n+                                            follow_wrapped=True,\n+                                            type_aliases=self.env.config.autodoc_type_aliases)\n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n@@ -1884,7 +1894,9 @@ def format_signature(self, **kwargs: Any) -> str:\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n-                overload = evaluate_signature(overload, __globals__)\n+                overload = evaluate_signature(overload, __globals__,\n+                                              self.env.config.autodoc_type_aliases)\n+\n                 if not inspect.isstaticmethod(self.object, cls=self.parent,\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n@@ -1897,7 +1909,7 @@ def format_signature(self, **kwargs: Any) -> str:\n     def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n         \"\"\"Annotate type hint to the first argument of function if needed.\"\"\"\n         try:\n-            sig = inspect.signature(func)\n+            sig = inspect.signature(func, type_aliases=self.env.config.autodoc_type_aliases)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n                            self.fullname, exc)\n@@ -2237,6 +2249,7 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n     app.add_config_value('autodoc_mock_imports', [], True)\n     app.add_config_value('autodoc_typehints', \"signature\", True,\n                          ENUM(\"signature\", \"description\", \"none\"))\n+    app.add_config_value('autodoc_type_aliases', {}, True)\n     app.add_config_value('autodoc_warningiserror', True, True)\n     app.add_config_value('autodoc_inherit_docstrings', True, True)\n     app.add_event('autodoc-before-process-signature')\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -439,8 +439,8 @@ def _should_unwrap(subject: Callable) -> bool:\n     return False\n \n \n-def signature(subject: Callable, bound_method: bool = False, follow_wrapped: bool = False\n-              ) -> inspect.Signature:\n+def signature(subject: Callable, bound_method: bool = False, follow_wrapped: bool = False,\n+              type_aliases: Dict = {}) -> inspect.Signature:\n     \"\"\"Return a Signature object for the given *subject*.\n \n     :param bound_method: Specify *subject* is a bound method or not\n@@ -470,7 +470,7 @@ def signature(subject: Callable, bound_method: bool = False, follow_wrapped: boo\n \n     try:\n         # Update unresolved annotations using ``get_type_hints()``.\n-        annotations = typing.get_type_hints(subject)\n+        annotations = typing.get_type_hints(subject, None, type_aliases)\n         for i, param in enumerate(parameters):\n             if isinstance(param.annotation, str) and param.name in annotations:\n                 parameters[i] = param.replace(annotation=annotations[param.name])\ndiff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -63,7 +63,11 @@ def is_system_TypeVar(typ: Any) -> bool:\n def stringify(annotation: Any) -> str:\n     \"\"\"Stringify type annotation object.\"\"\"\n     if isinstance(annotation, str):\n-        return annotation\n+        if annotation.startswith(\"'\") and annotation.endswith(\"'\"):\n+            # might be a double Forward-ref'ed type.  Go unquoting.\n+            return annotation[1:-2]\n+        else:\n+            return annotation\n     elif isinstance(annotation, TypeVar):  # type: ignore\n         return annotation.__name__\n     elif not annotation:\n",
  "test_patch": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -0,0 +1,25 @@\n+from __future__ import annotations\n+from typing import overload\n+\n+\n+myint = int\n+\n+\n+def sum(x: myint, y: myint) -> myint:\n+    \"\"\"docstring\"\"\"\n+    return x + y\n+\n+\n+@overload\n+def mult(x: myint, y: myint) -> myint:\n+    ...\n+\n+\n+@overload\n+def mult(x: float, y: float) -> float:\n+    ...\n+\n+\n+def mult(x, y):\n+    \"\"\"docstring\"\"\"\n+    return x, y\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -642,6 +642,54 @@ def test_autodoc_typehints_description_for_invalid_node(app):\n     restructuredtext.parse(app, text)  # raises no error\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases(app):\n+    # default\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.annotations', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.annotations',\n+        '',\n+        '',\n+        '.. py:function:: mult(x: int, y: int) -> int',\n+        '                 mult(x: float, y: float) -> float',\n+        '   :module: target.annotations',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:function:: sum(x: int, y: int) -> int',\n+        '   :module: target.annotations',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+    # define aliases\n+    app.config.autodoc_type_aliases = {'myint': 'myint'}\n+    actual = do_autodoc(app, 'module', 'target.annotations', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.annotations',\n+        '',\n+        '',\n+        '.. py:function:: mult(x: myint, y: myint) -> myint',\n+        '                 mult(x: float, y: float) -> float',\n+        '   :module: target.annotations',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '.. py:function:: sum(x: myint, y: myint) -> myint',\n+        '   :module: target.annotations',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_autodoc_default_options(app):\n     # no settings\n",
  "problem_statement": "Option for not unfolding aliases\nWould it be possible to add an option for autodoc not to unfold user-defined type aliases? \r\nFor example, if I introduce a type synonym Position = int and then define a method with argument pos: Position then I would like to see this typing in the documentation and not pos: int. For me, unfolding the alias is loosing information on how the program is built, something a documentation should not do, unless required by the author.\r\n\n",
  "hints_text": "How did you define the type? If you're using [type aliases](https://mypy.readthedocs.io/en/latest/kinds_of_types.html#type-aliases), it does not define a new type as mypy docs says:\r\n\r\n>A type alias does not create a new type. It\u2019s just a shorthand notation for another type \u2013 it\u2019s equivalent to the target type except for generic aliases.\r\n\r\nI think it is hard to control from Sphinx side.\n> How did you define the type? If you're using type aliases \n> <https://mypy.readthedocs.io/en/latest/kinds_of_types.html#type-aliases>, \n> it does not define a new type as mypy docs says:\n>\n>     A type alias does not create a new type. It\u2019s just a shorthand\n>     notation for another type \u2013 it\u2019s equivalent to the target type\n>     except for generic aliases.\n>\n> I think it is hard to control from Sphinx side.\n>\nThank you for your quick and kind answer. I can see now why Sphinx \nbehaves like that.\n\nAlthough, it is really disappointing. I believe that you agree with me. \nGiving types to parameters serves documenting the code. Type aliases \nmake this part of documentation clearer. Until they get automatically \nprocessed in order for the documentation to look nice...\n\n\n\n\nIt would be very nice if realized. Do you have good idea to do that? As my understanding, new static source code analyzer is needed to do that. Please let me know good libraries for that.\nSorry for responding so late. \r\n\r\nI think that the problem comes from relying on the full import mechanism of Python instead of on just its parsing phase. \r\nThere are libraries, such as ast or typed_ast, that build an abstract syntax tree of a script. This tree can further be processed to typeset the script it nicely. Such approach is used, for example, by the 'build' formatter. \r\nI did an experiment. Its data and results are quoted below. I defined type aliases in two files, a.py and b.py. The a.py script was then subject to parsing by a ast_test.py script. Apparently, the parsing did not unfold the type aliases, they remained just plain identifiers.\r\n\r\nWhat do you think?\r\nRyszard\r\n\r\n##### a.py: #####\r\n\r\nfrom typing import Tuple\r\nfrom b import T\r\n\r\nU = Tuple[int, int]\r\n\r\ndef f(a: U) -> T:\r\n    \"\"\"A doc string.\"\"\"\r\n    return a\r\n\r\n\r\n##### b.py: #####\r\n\r\nfrom typing import Tuple\r\n\r\nT = Tuple[int, int]\r\n\r\n\r\n##### ast_test.py: #####\r\n\r\nfrom typed_ast import ast3\r\nimport astpretty\r\n\r\ndef main():\r\n    source = open(\"a.py\", \"r\") \r\n    tree = ast3.parse(source.read())\r\n    for i in range(len(tree.body)):\r\n        astpretty.pprint(tree.body[i])\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n\r\n##### Result of 'python3 ast_test.py': #####\r\n\r\nImportFrom(\r\n    lineno=1,\r\n    col_offset=0,\r\n    module='typing',\r\n    names=[alias(name='Tuple', asname=None)],\r\n    level=0,\r\n)\r\nImportFrom(\r\n    lineno=2,\r\n    col_offset=0,\r\n    module='b',\r\n    names=[alias(name='T', asname=None)],\r\n    level=0,\r\n)\r\nAssign(\r\n    lineno=4,\r\n    col_offset=0,\r\n    targets=[Name(lineno=4, col_offset=0, id='U', ctx=Store())],\r\n    value=Subscript(\r\n        lineno=4,\r\n        col_offset=4,\r\n        value=Name(lineno=4, col_offset=4, id='Tuple', ctx=Load()),\r\n        slice=Index(\r\n            value=Tuple(\r\n                lineno=4,\r\n                col_offset=10,\r\n                elts=[\r\n                    Name(lineno=4, col_offset=10, id='int', ctx=Load()),\r\n                    Name(lineno=4, col_offset=15, id='int', ctx=Load()),\r\n                ],\r\n                ctx=Load(),\r\n            ),\r\n        ),\r\n        ctx=Load(),\r\n    ),\r\n    type_comment=None,\r\n)\r\nFunctionDef(\r\n    lineno=6,\r\n    col_offset=0,\r\n    name='f',\r\n    args=arguments(\r\n        args=[\r\n            arg(\r\n                lineno=6,\r\n                col_offset=6,\r\n                arg='a',\r\n                annotation=Name(lineno=6, col_offset=9, id='U', ctx=Load()),\r\n                type_comment=None,\r\n            ),\r\n        ],\r\n        vararg=None,\r\n        kwonlyargs=[],\r\n        kw_defaults=[],\r\n        kwarg=None,\r\n        defaults=[],\r\n    ),\r\n    body=[\r\n        Expr(\r\n            lineno=7,\r\n            col_offset=4,\r\n            value=Str(lineno=7, col_offset=4, s='A doc string.', kind=''),\r\n        ),\r\n        Return(\r\n            lineno=8,\r\n            col_offset=4,\r\n            value=Name(lineno=8, col_offset=11, id='a', ctx=Load()),\r\n        ),\r\n    ],\r\n    decorator_list=[],\r\n    returns=Name(lineno=6, col_offset=15, id='T', ctx=Load()),\r\n    type_comment=None,\r\n)\r\n\r\n\nThis is doable with zero alterations to the Sphinx codebase. All you need is the `annotations` future-import (introduced in [PEP 563](https://www.python.org/dev/peps/pep-0563/) and available in Python >=3.7) and a monkey-patched `typing.get_type_hints`:\r\n\r\n```python\r\nimport typing\r\ntyping.get_type_hints = lambda obj, *unused: obj\r\n```\r\n\r\nSphinx uses `typing.get_type_hints` to [resolve](https://github.com/sphinx-doc/sphinx/blob/7d3ad79392c4fc1ee9ad162b7cc107f391549b58/sphinx/util/inspect.py#L357) string annotations, so the future-import alone is not sufficient. Making this behavior configurable will allow to avoid monkey-patching.\nWhen trying:\r\n\r\n```\r\nfrom __future__ import annotations\r\nimport typing\r\ntyping.get_type_hints = lambda obj, *unused: obj\r\n```\r\n\r\nsphinx_autodocs_typehints fails with \r\n`AttributeError: '_SpecialForm' object has no attribute 'items'`\r\n\r\nThat may not be directly related to Sphinx ",
  "created_at": "2020-07-26T17:21:43Z",
  "version": "3.3",
  "FAIL_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autodoc_type_aliases\"]",
  "PASS_TO_PASS": "[\"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_both\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_and_docstring_signature_init\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_both\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_class\", \"tests/test_ext_autodoc_configs.py::test_autoclass_content_init\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options\", \"tests/test_ext_autodoc_configs.py::test_autodoc_default_options_with_values\", \"tests/test_ext_autodoc_configs.py::test_autodoc_docstring_signature\", \"tests/test_ext_autodoc_configs.py::test_autodoc_inherit_docstrings\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_description_for_invalid_node\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_none\", \"tests/test_ext_autodoc_configs.py::test_autodoc_typehints_signature\", \"tests/test_ext_autodoc_configs.py::test_mocked_module_imports\"]",
  "environment_setup_commit": "3b85187ffa3401e88582073c23188c147857a8a3",
  "patch_files": [
    "sphinx/ext/autodoc/__init__.py",
    "sphinx/util/inspect.py",
    "sphinx/util/typing.py"
  ],
  "test_patch_files": [
    "tests/roots/test-ext-autodoc/target/annotations.py",
    "tests/test_ext_autodoc_configs.py"
  ],
  "patch_diff_details": {
    "sphinx/ext/autodoc/__init__.py": {
      "diffs": [
        {
          "start_line_old": 1216,
          "end_line_old": 1216,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_TypeVarDocumenter.add_content_TypeVarDocumenter.add_content.6",
          "closest_snippet_line_distance": 548,
          "pos": 6,
          "context_length": 3415
        },
        {
          "start_line_old": 1265,
          "end_line_old": 1265,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_TypeVarDocumenter.add_content_TypeVarDocumenter.add_content.6",
          "closest_snippet_line_distance": 499,
          "pos": 6,
          "context_length": 3415
        },
        {
          "start_line_old": 1274,
          "end_line_old": 1274,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_TypeVarDocumenter.add_content_TypeVarDocumenter.add_content.6",
          "closest_snippet_line_distance": 490,
          "pos": 6,
          "context_length": 3415
        },
        {
          "start_line_old": 1395,
          "end_line_old": 1395,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_TypeVarDocumenter_TypeVarDocumenter.get_doc.2.2.1.1",
          "closest_snippet_line_distance": 340,
          "pos": 23,
          "context_length": 24911
        },
        {
          "start_line_old": 1410,
          "end_line_old": 1410,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_TypeVarDocumenter_TypeVarDocumenter.get_doc.2.2.1.1",
          "closest_snippet_line_distance": 325,
          "pos": 23,
          "context_length": 24911
        },
        {
          "start_line_old": 1420,
          "end_line_old": 1420,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_TypeVarDocumenter_TypeVarDocumenter.get_doc.2.2.1.1",
          "closest_snippet_line_distance": 315,
          "pos": 23,
          "context_length": 24911
        },
        {
          "start_line_old": 1431,
          "end_line_old": 1431,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_TypeVarDocumenter_TypeVarDocumenter.get_doc.2.2.1.1",
          "closest_snippet_line_distance": 304,
          "pos": 23,
          "context_length": 24911
        },
        {
          "start_line_old": 1478,
          "end_line_old": 1478,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_TypeVarDocumenter_TypeVarDocumenter.get_doc.2.2.1.1",
          "closest_snippet_line_distance": 257,
          "pos": 23,
          "context_length": 24911
        },
        {
          "start_line_old": 1823,
          "end_line_old": 1827,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_importlib_exclude_members_option.3.1",
          "closest_snippet_line_distance": 1711,
          "pos": 3,
          "context_length": 2191
        },
        {
          "start_line_old": 1887,
          "end_line_old": 1887,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_importlib_exclude_members_option.3.1",
          "closest_snippet_line_distance": 1771,
          "pos": 3,
          "context_length": 2191
        },
        {
          "start_line_old": 1900,
          "end_line_old": 1900,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_importlib_exclude_members_option.3.1",
          "closest_snippet_line_distance": 1784,
          "pos": 3,
          "context_length": 2191
        },
        {
          "start_line_old": 2240,
          "end_line_old": 2240,
          "file_pos": 1,
          "file_context_length": 19210,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_ModuleDocumenter.get_object_members_ModuleDocumenter.get_object_members.4.1",
          "closest_snippet_line_distance": 1233,
          "pos": 17,
          "context_length": 16672
        }
      ]
    },
    "sphinx/util/inspect.py": {
      "diffs": [
        {
          "start_line_old": 442,
          "end_line_old": 443,
          "file_pos": 19,
          "file_context_length": 159436,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/util/inspect.py_builtins_memory_address_re.1",
          "closest_snippet_line_distance": 395
        },
        {
          "start_line_old": 473,
          "end_line_old": 473,
          "file_pos": 19,
          "file_context_length": 159436,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/util/inspect.py_builtins_memory_address_re.1",
          "closest_snippet_line_distance": 425
        }
      ]
    },
    "sphinx/util/typing.py": {
      "diffs": [
        {
          "start_line_old": 66,
          "end_line_old": 66,
          "file_pos": 6,
          "file_context_length": 56552,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/util/typing.py__stringify_py36.4_",
          "closest_snippet_line_distance": 87,
          "pos": 72,
          "context_length": 102737
        }
      ]
    }
  },
  "vectors": 1487,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_GenericAliasDocumenter_GenericAliasDocumenter.add_content.3",
      "distance": 0.952013373374939,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1711,
      "end_line": 1732,
      "tokens": 186,
      "context_length": 186,
      "file_pos": 1
    },
    {
      "position": 2,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_importlib_exclude_members_option.3.1",
      "distance": 1.0165882110595703,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 13,
      "end_line": 116,
      "tokens": 775,
      "context_length": 961,
      "file_pos": 1
    },
    {
      "position": 3,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_MethodDocumenter_MethodDocumenter.2",
      "distance": 1.0295422077178955,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1777,
      "end_line": 1917,
      "tokens": 1230,
      "context_length": 2191,
      "file_pos": 1
    },
    {
      "position": 4,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/directive.py_warnings_DummyOptionSpec.__getitem__.1.1",
      "distance": 1.0364315509796143,
      "file_path": "sphinx/ext/autodoc/directive.py",
      "start_line": 9,
      "end_line": 49,
      "tokens": 298,
      "context_length": 2489
    },
    {
      "position": 5,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_TypeVarDocumenter.add_content_TypeVarDocumenter.add_content.6",
      "distance": 1.0495134592056274,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1764,
      "end_line": 1774,
      "tokens": 128,
      "context_length": 2617,
      "file_pos": 2
    },
    {
      "position": 6,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_FunctionDocumenter_FunctionDocumenter.2",
      "distance": 1.076841950416565,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1196,
      "end_line": 1292,
      "tokens": 798,
      "context_length": 3415,
      "file_pos": 2
    },
    {
      "position": 7,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_inherited_members_option_bool_option.2.1",
      "distance": 1.0844460725784302,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 119,
      "end_line": 152,
      "tokens": 207,
      "context_length": 3622,
      "file_pos": 2
    },
    {
      "position": 8,
      "id": "/tmp/repos/sphinx/sphinx/domains/c.py_DefinitionParser._simple_fundamental_types._parse_declarator_CXRefRole.process_link.4.1",
      "distance": 1.103734016418457,
      "file_path": "sphinx/domains/c.py",
      "start_line": 2747,
      "end_line": 3561,
      "tokens": 6840,
      "context_length": 10462
    },
    {
      "position": 9,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/typehints.py_modify_field_list_",
      "distance": 1.1205366849899292,
      "file_path": "sphinx/ext/autodoc/typehints.py",
      "start_line": 83,
      "end_line": 139,
      "tokens": 460,
      "context_length": 10922
    },
    {
      "position": 10,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_DataDeclarationDocumenter_DataDeclarationDocumenter.add_content.2",
      "distance": 1.1231660842895508,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1673,
      "end_line": 1708,
      "tokens": 279,
      "context_length": 11201,
      "file_pos": 4
    },
    {
      "position": 11,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_TypeVarDocumenter_TypeVarDocumenter.get_doc.2.2.1.1",
      "distance": 1.125915288925171,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1735,
      "end_line": 1762,
      "tokens": 237,
      "context_length": 11438,
      "file_pos": 4
    },
    {
      "position": 12,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_ClassDocumenter.1_ClassDocumenter.2",
      "distance": 1.1271355152130127,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1334,
      "end_line": 1589,
      "tokens": 2423,
      "context_length": 13861,
      "file_pos": 4
    },
    {
      "position": 13,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_SingledispatchMethodDocumenter_AttributeDocumenter.2",
      "distance": 1.1307615041732788,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1920,
      "end_line": 2061,
      "tokens": 1180,
      "context_length": 15041,
      "file_pos": 4
    },
    {
      "position": 14,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_Documenter.filter_members.9_Documenter.filter_members.10.1",
      "distance": 1.1563262939453125,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 648,
      "end_line": 744,
      "tokens": 795,
      "context_length": 15836,
      "file_pos": 4
    },
    {
      "position": 15,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_ModuleDocumenter.get_object_members_ModuleDocumenter.get_object_members.4.1",
      "distance": 1.1648668050765991,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 986,
      "end_line": 1007,
      "tokens": 192,
      "context_length": 16028,
      "file_pos": 4
    },
    {
      "position": 16,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/importer.py_21_",
      "distance": 1.1737101078033447,
      "file_path": "sphinx/ext/autodoc/importer.py",
      "start_line": 240,
      "end_line": 260,
      "tokens": 181,
      "context_length": 16209
    },
    {
      "position": 17,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_setup_",
      "distance": 1.180647373199463,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2216,
      "end_line": 2253,
      "tokens": 463,
      "context_length": 16672,
      "file_pos": 5
    },
    {
      "position": 18,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/directive.py_process_documenter_options_process_documenter_options.3.1",
      "distance": 1.1818784475326538,
      "file_path": "sphinx/ext/autodoc/directive.py",
      "start_line": 78,
      "end_line": 89,
      "tokens": 125,
      "context_length": 16797
    },
    {
      "position": 19,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_Documenter_Documenter.add_line.2.3.1",
      "distance": 1.1907703876495361,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 261,
      "end_line": 334,
      "tokens": 776,
      "context_length": 17573,
      "file_pos": 5
    },
    {
      "position": 20,
      "id": "/tmp/repos/sphinx/sphinx/util/typing.py_sys_is_system_TypeVar.4",
      "distance": 1.1965184211730957,
      "file_path": "sphinx/util/typing.py",
      "start_line": 11,
      "end_line": 60,
      "tokens": 376,
      "context_length": 17949,
      "file_pos": 6
    },
    {
      "position": 21,
      "id": "/tmp/repos/sphinx/sphinx/domains/cpp.py_DefinitionParser._simple_fundemental_types._check_template_consistency_CPPExprRole.run.12.1",
      "distance": 1.2003368139266968,
      "file_path": "sphinx/domains/cpp.py",
      "start_line": 6484,
      "end_line": 7217,
      "tokens": 6279,
      "context_length": 24228
    },
    {
      "position": 22,
      "id": "/tmp/repos/sphinx/setup.py_os_Tee.flush.1",
      "distance": 1.207279086112976,
      "file_path": "setup.py",
      "start_line": 1,
      "end_line": 75,
      "tokens": 443,
      "context_length": 24671
    },
    {
      "position": 23,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_SingledispatchFunctionDocumenter_ClassDocumenter",
      "distance": 1.2078020572662354,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1295,
      "end_line": 1589,
      "tokens": 240,
      "context_length": 24911,
      "file_pos": 8
    },
    {
      "position": 24,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_InstanceAttributeDocumenter_InstanceAttributeDocumenter.add_content.2",
      "distance": 1.2093909978866577,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2095,
      "end_line": 2136,
      "tokens": 321,
      "context_length": 25232,
      "file_pos": 8
    },
    {
      "position": 25,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/type_comment.py_2_not_suppressed.2.4.2.1",
      "distance": 1.217827320098877,
      "file_path": "sphinx/ext/autodoc/type_comment.py",
      "start_line": 11,
      "end_line": 37,
      "tokens": 247,
      "context_length": 25479
    },
    {
      "position": 26,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/generate.py_setup_documenters__underline.2.1",
      "distance": 1.222283959388733,
      "file_path": "sphinx/ext/autosummary/generate.py",
      "start_line": 90,
      "end_line": 120,
      "tokens": 289,
      "context_length": 25768
    },
    {
      "position": 27,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/importer.py_importlib_mangle.3.1",
      "distance": 1.2268223762512207,
      "file_path": "sphinx/ext/autodoc/importer.py",
      "start_line": 11,
      "end_line": 36,
      "tokens": 172,
      "context_length": 25940
    },
    {
      "position": 28,
      "id": "/tmp/repos/sphinx/sphinx/domains/c.py_re_ASTDeclSpecs.describe_signature.7.6.1",
      "distance": 1.229633092880249,
      "file_path": "sphinx/domains/c.py",
      "start_line": 11,
      "end_line": 811,
      "tokens": 6488,
      "context_length": 32428
    },
    {
      "position": 29,
      "id": "/tmp/repos/sphinx/sphinx/util/docfields.py_TypedField_TypedField.__init__.self.typerolename.1",
      "distance": 1.230926513671875,
      "file_path": "sphinx/util/docfields.py",
      "start_line": 149,
      "end_line": 175,
      "tokens": 259,
      "context_length": 32687
    },
    {
      "position": 30,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_get_documenters_migrate_autodoc_member_order.1.2",
      "distance": 1.2321491241455078,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2193,
      "end_line": 2213,
      "tokens": 226,
      "context_length": 32913,
      "file_pos": 11
    },
    {
      "position": 31,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/mock.py_contextlib__MockObject.__repr__.1.1",
      "distance": 1.2383307218551636,
      "file_path": "sphinx/ext/autodoc/mock.py",
      "start_line": 11,
      "end_line": 68,
      "tokens": 451,
      "context_length": 33364
    },
    {
      "position": 32,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/directive.py_AutodocDirective_",
      "distance": 1.239375114440918,
      "file_path": "sphinx/ext/autodoc/directive.py",
      "start_line": 109,
      "end_line": 159,
      "tokens": 453,
      "context_length": 33817
    },
    {
      "position": 33,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/type_comment.py_update_annotations_using_type_comments_",
      "distance": 1.2440621852874756,
      "file_path": "sphinx/ext/autodoc/type_comment.py",
      "start_line": 117,
      "end_line": 142,
      "tokens": 257,
      "context_length": 34074
    },
    {
      "position": 34,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/mock.py__make_subclass__MockModule.__repr__.1.1",
      "distance": 1.2459229230880737,
      "file_path": "sphinx/ext/autodoc/mock.py",
      "start_line": 71,
      "end_line": 93,
      "tokens": 200,
      "context_length": 34274
    },
    {
      "position": 35,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_ModuleDocumenter.sort_members_ModuleDocumenter.sort_members.1.3.1.1",
      "distance": 1.2492568492889404,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1009,
      "end_line": 1026,
      "tokens": 177,
      "context_length": 34451,
      "file_pos": 12
    },
    {
      "position": 36,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_ModuleDocumenter.add_directive_header_ModuleDocumenter.add_directive_header.6.1",
      "distance": 1.249502182006836,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 973,
      "end_line": 984,
      "tokens": 126,
      "context_length": 34577,
      "file_pos": 12
    },
    {
      "position": 37,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_SlotsAttributeDocumenter.import_object_SlotsAttributeDocumenter.import_object.5.1.4.1.2.3.1",
      "distance": 1.2505697011947632,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2157,
      "end_line": 2176,
      "tokens": 172,
      "context_length": 34749,
      "file_pos": 12
    },
    {
      "position": 38,
      "id": "/tmp/repos/sphinx/sphinx/domains/cpp.py_ASTDeclaratorRef_ASTTemplateParamType.describe_signature.1",
      "distance": 1.2509703636169434,
      "file_path": "sphinx/domains/cpp.py",
      "start_line": 2457,
      "end_line": 3302,
      "tokens": 6722,
      "context_length": 41471
    },
    {
      "position": 39,
      "id": "/tmp/repos/sphinx/sphinx/deprecation.py_sys_deprecated_alias.2",
      "distance": 1.2536754608154297,
      "file_path": "sphinx/deprecation.py",
      "start_line": 11,
      "end_line": 36,
      "tokens": 164,
      "context_length": 41635
    },
    {
      "position": 40,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/typehints.py_re_record_typehints.2.2.1",
      "distance": 1.2549701929092407,
      "file_path": "sphinx/ext/autodoc/typehints.py",
      "start_line": 11,
      "end_line": 38,
      "tokens": 200,
      "context_length": 41835
    },
    {
      "position": 41,
      "id": "/tmp/repos/sphinx/sphinx/domains/cpp.py_ASTCommaExpr_ASTDeclaratorPtr._stringify.8.1",
      "distance": 1.2567839622497559,
      "file_path": "sphinx/domains/cpp.py",
      "start_line": 1535,
      "end_line": 2395,
      "tokens": 6582,
      "context_length": 48417
    },
    {
      "position": 42,
      "id": "/tmp/repos/sphinx/sphinx/domains/c.py_Symbol._symbol_lookup_DefinitionParser._simple_fundamental_types._parse_nested_name.7.1",
      "distance": 1.259676218032837,
      "file_path": "sphinx/domains/c.py",
      "start_line": 1672,
      "end_line": 2509,
      "tokens": 6821,
      "context_length": 55238
    },
    {
      "position": 43,
      "id": "/tmp/repos/sphinx/sphinx/util/typing.py__stringify_py36.4_",
      "distance": 1.2618684768676758,
      "file_path": "sphinx/util/typing.py",
      "start_line": 153,
      "end_line": 230,
      "tokens": 915,
      "context_length": 56153,
      "file_pos": 13
    },
    {
      "position": 44,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_ClassLevelDocumenter_ClassLevelDocumenter.resolve_name.2.1",
      "distance": 1.263155460357666,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1050,
      "end_line": 1080,
      "tokens": 287,
      "context_length": 56440,
      "file_pos": 13
    },
    {
      "position": 45,
      "id": "/tmp/repos/sphinx/sphinx/domains/c.py_89_Symbol._find_named_symbols.2.12.1",
      "distance": 1.2631580829620361,
      "file_path": "sphinx/domains/c.py",
      "start_line": 814,
      "end_line": 1670,
      "tokens": 6742,
      "context_length": 63182
    },
    {
      "position": 46,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/typehints.py_merge_typehints_insert_field_list.4.1",
      "distance": 1.2723748683929443,
      "file_path": "sphinx/ext/autodoc/typehints.py",
      "start_line": 41,
      "end_line": 80,
      "tokens": 324,
      "context_length": 63506
    },
    {
      "position": 47,
      "id": "/tmp/repos/sphinx/sphinx/transforms/references.py_2_",
      "distance": 1.2724051475524902,
      "file_path": "sphinx/transforms/references.py",
      "start_line": 11,
      "end_line": 68,
      "tokens": 362,
      "context_length": 63868
    },
    {
      "position": 48,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/generate.py_argparse_logger.1",
      "distance": 1.2727265357971191,
      "file_path": "sphinx/ext/autosummary/generate.py",
      "start_line": 20,
      "end_line": 60,
      "tokens": 289,
      "context_length": 64157
    },
    {
      "position": 49,
      "id": "/tmp/repos/sphinx/sphinx/domains/cpp.py_DefinitionParser._simple_fundemental_types._parse_parameters_and_qualifiers_DefinitionParser._simple_fundemental_types._parse_template_declaration_prefix.5.2.1.1",
      "distance": 1.2759147882461548,
      "file_path": "sphinx/domains/cpp.py",
      "start_line": 5639,
      "end_line": 6482,
      "tokens": 6754,
      "context_length": 70911
    },
    {
      "position": 50,
      "id": "/tmp/repos/sphinx/sphinx/directives/other.py_SeeAlso_TabularColumns.run.4.1",
      "distance": 1.2769321203231812,
      "file_path": "sphinx/directives/other.py",
      "start_line": 187,
      "end_line": 208,
      "tokens": 141,
      "context_length": 71052
    },
    {
      "position": 51,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/directive.py_DocumenterBridge_DocumenterBridge.warn.1",
      "distance": 1.2795547246932983,
      "file_path": "sphinx/ext/autodoc/directive.py",
      "start_line": 52,
      "end_line": 75,
      "tokens": 201,
      "context_length": 71253
    },
    {
      "position": 52,
      "id": "/tmp/repos/sphinx/sphinx/directives/__init__.py_ObjectDescription.get_field_type_map_ObjectDescription.get_field_type_map.2.1",
      "distance": 1.2805681228637695,
      "file_path": "sphinx/directives/__init__.py",
      "start_line": 76,
      "end_line": 88,
      "tokens": 128,
      "context_length": 71381
    },
    {
      "position": 53,
      "id": "/tmp/repos/sphinx/sphinx/domains/python.py_builtins_ModuleEntry.1",
      "distance": 1.2824496030807495,
      "file_path": "sphinx/domains/python.py",
      "start_line": 11,
      "end_line": 78,
      "tokens": 522,
      "context_length": 71903
    },
    {
      "position": 54,
      "id": "/tmp/repos/sphinx/sphinx/transforms/post_transforms/__init__.py_ReferencesResolver.warn_missing_reference_ReferencesResolver.warn_missing_reference.5",
      "distance": 1.2828867435455322,
      "file_path": "sphinx/transforms/post_transforms/__init__.py",
      "start_line": 154,
      "end_line": 177,
      "tokens": 279,
      "context_length": 72182
    },
    {
      "position": 55,
      "id": "/tmp/repos/sphinx/sphinx/directives/__init__.py_ObjectDescription_ObjectDescription.19",
      "distance": 1.2832674980163574,
      "file_path": "sphinx/directives/__init__.py",
      "start_line": 52,
      "end_line": 74,
      "tokens": 206,
      "context_length": 72388
    },
    {
      "position": 56,
      "id": "/tmp/repos/sphinx/sphinx/directives/__init__.py_23_29",
      "distance": 1.2835389375686646,
      "file_path": "sphinx/directives/__init__.py",
      "start_line": 269,
      "end_line": 329,
      "tokens": 527,
      "context_length": 72915
    },
    {
      "position": 57,
      "id": "/tmp/repos/sphinx/sphinx/util/inspect.py_Signature.format_args_Signature.format_annotation_old.2.1",
      "distance": 1.2857948541641235,
      "file_path": "sphinx/util/inspect.py",
      "start_line": 738,
      "end_line": 811,
      "tokens": 562,
      "context_length": 73477,
      "file_pos": 19
    },
    {
      "position": 58,
      "id": "/tmp/repos/sphinx/sphinx/domains/cpp.py_ASTNestedName.get_id_ASTBracedInitList.describe_signature.6",
      "distance": 1.2875792980194092,
      "file_path": "sphinx/domains/cpp.py",
      "start_line": 699,
      "end_line": 1497,
      "tokens": 6638,
      "context_length": 80115
    },
    {
      "position": 59,
      "id": "/tmp/repos/sphinx/sphinx/directives/other.py_re_int_or_nothing.2.1",
      "distance": 1.2883033752441406,
      "file_path": "sphinx/directives/other.py",
      "start_line": 9,
      "end_line": 40,
      "tokens": 238,
      "context_length": 80353
    },
    {
      "position": 60,
      "id": "/tmp/repos/sphinx/sphinx/domains/cpp.py_DefinitionParser._simple_fundemental_types._parse_fold_or_paren_expression_DefinitionParser._simple_fundemental_types._parse_trailing_type_spec.2",
      "distance": 1.2893924713134766,
      "file_path": "sphinx/domains/cpp.py",
      "start_line": 4861,
      "end_line": 5637,
      "tokens": 6672,
      "context_length": 87025
    },
    {
      "position": 61,
      "id": "/tmp/repos/sphinx/sphinx/domains/std.py_Program_Program.run.3.1",
      "distance": 1.289442539215088,
      "file_path": "sphinx/domains/std.py",
      "start_line": 256,
      "end_line": 273,
      "tokens": 125,
      "context_length": 87150
    },
    {
      "position": 62,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_ModuleLevelDocumenter_ModuleLevelDocumenter.resolve_name.2.1",
      "distance": 1.2906782627105713,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1029,
      "end_line": 1047,
      "tokens": 179,
      "context_length": 87329,
      "file_pos": 20
    },
    {
      "position": 63,
      "id": "/tmp/repos/sphinx/sphinx/domains/cpp.py_re_ASTNestedName.num_templates.3.1",
      "distance": 1.2912893295288086,
      "file_path": "sphinx/domains/cpp.py",
      "start_line": 11,
      "end_line": 697,
      "tokens": 6099,
      "context_length": 93428
    },
    {
      "position": 64,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_Documenter.document_members_Documenter.document_members.17",
      "distance": 1.2942607402801514,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 746,
      "end_line": 789,
      "tokens": 454,
      "context_length": 93882,
      "file_pos": 20
    },
    {
      "position": 65,
      "id": "/tmp/repos/sphinx/sphinx/domains/python.py_builtin_resolver_",
      "distance": 1.2942707538604736,
      "file_path": "sphinx/domains/python.py",
      "start_line": 1369,
      "end_line": 1407,
      "tokens": 304,
      "context_length": 94186
    },
    {
      "position": 66,
      "id": "/tmp/repos/sphinx/sphinx/ext/doctest.py_TestsetupDirective_parser.1",
      "distance": 1.2944903373718262,
      "file_path": "sphinx/ext/doctest.py",
      "start_line": 161,
      "end_line": 201,
      "tokens": 281,
      "context_length": 94467
    },
    {
      "position": 67,
      "id": "/tmp/repos/sphinx/sphinx/domains/cpp.py_Symbol._symbol_lookup_DefinitionParser._simple_fundemental_types._parse_literal.20.1",
      "distance": 1.295099139213562,
      "file_path": "sphinx/domains/cpp.py",
      "start_line": 4096,
      "end_line": 4859,
      "tokens": 6556,
      "context_length": 101023
    },
    {
      "position": 68,
      "id": "/tmp/repos/sphinx/sphinx/util/cfamily.py_re_char_literal_re.1",
      "distance": 1.2960224151611328,
      "file_path": "sphinx/util/cfamily.py",
      "start_line": 11,
      "end_line": 80,
      "tokens": 766,
      "context_length": 101789
    },
    {
      "position": 69,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_merge_special_members_option_merge_members_option.4.1.1.1.1",
      "distance": 1.2987923622131348,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 155,
      "end_line": 181,
      "tokens": 236,
      "context_length": 102025,
      "file_pos": 22
    },
    {
      "position": 70,
      "id": "/tmp/repos/sphinx/sphinx/domains/std.py_re_token_re.1",
      "distance": 1.2990009784698486,
      "file_path": "sphinx/domains/std.py",
      "start_line": 11,
      "end_line": 48,
      "tokens": 323,
      "context_length": 102348
    },
    {
      "position": 71,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_Documenter.add_directive_header_Documenter.add_directive_header.10.3",
      "distance": 1.3007675409317017,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 490,
      "end_line": 510,
      "tokens": 235,
      "context_length": 102583,
      "file_pos": 22
    },
    {
      "position": 72,
      "id": "/tmp/repos/sphinx/sphinx/util/typing.py_stringify_stringify.3.3.1.1",
      "distance": 1.300875186920166,
      "file_path": "sphinx/util/typing.py",
      "start_line": 63,
      "end_line": 82,
      "tokens": 154,
      "context_length": 102737,
      "file_pos": 22
    },
    {
      "position": 73,
      "id": "/tmp/repos/sphinx/sphinx/application.py_Sphinx.add_autodoc_attrgetter_Sphinx.add_autodoc_attrgetter.3",
      "distance": 1.3013335466384888,
      "file_path": "sphinx/application.py",
      "start_line": 1033,
      "end_line": 1046,
      "tokens": 174,
      "context_length": 102911
    },
    {
      "position": 74,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/importer.py_unmangle_unmangle.3.1",
      "distance": 1.3028334379196167,
      "file_path": "sphinx/ext/autodoc/importer.py",
      "start_line": 39,
      "end_line": 55,
      "tokens": 125,
      "context_length": 103036
    },
    {
      "position": 75,
      "id": "/tmp/repos/sphinx/sphinx/util/inspect.py_builtins_memory_address_re.1",
      "distance": 1.3038265705108643,
      "file_path": "sphinx/util/inspect.py",
      "start_line": 11,
      "end_line": 48,
      "tokens": 276,
      "context_length": 103312,
      "file_pos": 23
    },
    {
      "position": 76,
      "id": "/tmp/repos/sphinx/sphinx/writers/texinfo.py_TexinfoTranslator.visit_term_TexinfoTranslator.visit_admonition.2",
      "distance": 1.3048551082611084,
      "file_path": "sphinx/writers/texinfo.py",
      "start_line": 971,
      "end_line": 1088,
      "tokens": 846,
      "context_length": 104158
    }
  ],
  "files": [
    {
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "position": 1,
      "tokens": 19210,
      "context_length": 19210
    },
    {
      "file_path": "sphinx/ext/autodoc/directive.py",
      "position": 2,
      "tokens": 1261,
      "context_length": 20471
    },
    {
      "file_path": "sphinx/domains/c.py",
      "position": 3,
      "tokens": 30859,
      "context_length": 51330
    },
    {
      "file_path": "sphinx/ext/autodoc/typehints.py",
      "position": 4,
      "tokens": 1045,
      "context_length": 52375
    },
    {
      "file_path": "sphinx/ext/autodoc/importer.py",
      "position": 5,
      "tokens": 2018,
      "context_length": 54393
    },
    {
      "file_path": "sphinx/util/typing.py",
      "position": 6,
      "tokens": 2159,
      "context_length": 56552
    },
    {
      "file_path": "sphinx/domains/cpp.py",
      "position": 7,
      "tokens": 62824,
      "context_length": 119376
    },
    {
      "file_path": "setup.py",
      "position": 8,
      "tokens": 1725,
      "context_length": 121101
    },
    {
      "file_path": "sphinx/ext/autodoc/type_comment.py",
      "position": 9,
      "tokens": 1232,
      "context_length": 122333
    },
    {
      "file_path": "sphinx/ext/autosummary/generate.py",
      "position": 10,
      "tokens": 5283,
      "context_length": 127616
    },
    {
      "file_path": "sphinx/util/docfields.py",
      "position": 11,
      "tokens": 3364,
      "context_length": 130980
    },
    {
      "file_path": "sphinx/ext/autodoc/mock.py",
      "position": 12,
      "tokens": 1107,
      "context_length": 132087
    },
    {
      "file_path": "sphinx/deprecation.py",
      "position": 13,
      "tokens": 712,
      "context_length": 132799
    },
    {
      "file_path": "sphinx/transforms/references.py",
      "position": 14,
      "tokens": 414,
      "context_length": 133213
    },
    {
      "file_path": "sphinx/directives/other.py",
      "position": 15,
      "tokens": 3174,
      "context_length": 136387
    },
    {
      "file_path": "sphinx/directives/__init__.py",
      "position": 16,
      "tokens": 2749,
      "context_length": 139136
    },
    {
      "file_path": "sphinx/domains/python.py",
      "position": 17,
      "tokens": 11901,
      "context_length": 151037
    },
    {
      "file_path": "sphinx/transforms/post_transforms/__init__.py",
      "position": 18,
      "tokens": 2000,
      "context_length": 153037
    },
    {
      "file_path": "sphinx/util/inspect.py",
      "position": 19,
      "tokens": 6399,
      "context_length": 159436
    },
    {
      "file_path": "sphinx/domains/std.py",
      "position": 20,
      "tokens": 10341,
      "context_length": 169777
    },
    {
      "file_path": "sphinx/ext/doctest.py",
      "position": 21,
      "tokens": 5088,
      "context_length": 174865
    },
    {
      "file_path": "sphinx/util/cfamily.py",
      "position": 22,
      "tokens": 3505,
      "context_length": 178370
    },
    {
      "file_path": "sphinx/application.py",
      "position": 23,
      "tokens": 10769,
      "context_length": 189139
    },
    {
      "file_path": "sphinx/writers/texinfo.py",
      "position": 24,
      "tokens": 12278,
      "context_length": 201417
    }
  ]
}