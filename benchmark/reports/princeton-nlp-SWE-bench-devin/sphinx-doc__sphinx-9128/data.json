{
  "instance_id": "sphinx-doc__sphinx-9128",
  "model_patch": "diff --git a/setup.py b/setup.py\nindex 1c14ff1eb..0abe29e56 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -21,7 +21,7 @@ install_requires = [\n     'sphinxcontrib-htmlhelp',\n     'sphinxcontrib-serializinghtml',\n     'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'Jinja2<3.1',\n     'Pygments>=2.0',\n     'docutils>=0.14,<0.17',\n     'snowballstemmer>=1.1',\ndiff --git a/sphinx/cmd/build.py b/sphinx/cmd/build.py\nindex 32a89eb29..daf44eb9e 100644\n--- a/sphinx/cmd/build.py\n+++ b/sphinx/cmd/build.py\n@@ -201,6 +201,8 @@ def make_main(argv: List[str] = sys.argv[1:]) -> int:\n \n def build_main(argv: List[str] = sys.argv[1:]) -> int:\n     \"\"\"Sphinx build \"main\" command-line entry.\"\"\"\n+    import logging\n+    logging.basicConfig(level=logging.DEBUG)\n \n     parser = get_parser()\n     args = parser.parse_args(argv)\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex dbb315e6e..8f3a707d2 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1145,10 +1145,12 @@ class PythonDomain(Domain):\n         \"\"\"\n         if name in self.objects:\n             other = self.objects[name]\n-            logger.warning(__('duplicate object description of %s, '\n-                              'other instance in %s, use :noindex: for one of them'),\n-                           name, other.docname, location=location)\n-        self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, canonical)\n+            if other.canonical:\n+                logger.warning(__('duplicate object description of %s, '\n+                                 'other instance in %s, use :noindex: for one of them'),\n+                               name, other.docname, location=location)\n+        else:\n+            self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, canonical)\n \n     @property\n     def modules(self) -> Dict[str, ModuleEntry]:\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c92709deb..0285070a9 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -178,7 +178,7 @@ def merge_members_option(options: Dict) -> None:\n \n # Some useful event listener factories for autodoc-process-docstring.\n \n-def cut_lines(pre: int, post: int = 0, what: str = None) -> Callable:\n+def cut_lines(pre: int, post: int = 0, what: str = '') -> Callable:\n     \"\"\"Return a listener that removes the first *pre* and last *post*\n     lines of every docstring.  If *what* is a sequence of strings,\n     only docstrings of a type in *what* will be processed.\n@@ -414,6 +414,7 @@ class Documenter:\n \n         Returns True if successful, False if an error occurred.\n         \"\"\"\n+        logger.debug('[autodoc] import %s from %s', '.'.join(self.objpath), self.modname)\n         with mock(self.config.autodoc_mock_imports):\n             try:\n                 ret = import_object(self.modname, self.objpath, self.objtype,\n@@ -422,6 +423,7 @@ class Documenter:\n                 self.module, self.parent, self.object_name, self.object = ret\n                 if ismock(self.object):\n                     self.object = undecorate(self.object)\n+                logger.debug('[autodoc] => %r', self.object)\n                 return True\n             except ImportError as exc:\n                 if raiseerror:\n@@ -518,6 +520,7 @@ class Documenter:\n \n     def add_directive_header(self, sig: str) -> None:\n         \"\"\"Add the directive header and options to the generated content.\"\"\"\n+        logger.debug('[autodoc] adding directive header for %s', self.fullname)\n         domain = getattr(self, 'domain', 'py')\n         directive = getattr(self, 'directivetype', self.objtype)\n         name = self.format_name()\n@@ -1374,6 +1377,139 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                 return\n \n \n+class DocstringStripSignatureMixin(DocstringSignatureMixin):\n+    \"\"\"\n+    Mixin for AttributeDocumenter to provide the\n+    feature of stripping any function signature from the docstring.\n+    \"\"\"\n+    def format_signature(self, **kwargs: Any) -> str:\n+        if self.args is None and self.config.autodoc_docstring_signature:  # type: ignore\n+            # only act if a signature is not explicitly given already, and if\n+            # the feature is enabled\n+            result = self._find_signature()\n+            if result is not None:\n+                # Discarding _args is a only difference with\n+                # DocstringSignatureMixin.format_signature.\n+                # Documenter.format_signature use self.args value to format.\n+                _args, self.retann = result\n+        return super().format_signature(**kwargs)\n+\n+\n+class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type: ignore\n+    \"\"\"\n+    Specialized Documenter subclass for functions.\n+    \"\"\"\n+    objtype = 'function'\n+    member_order = 30\n+\n+    @classmethod\n+    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n+                            ) -> bool:\n+        # supports functions, builtins and bound methods exported at the module level\n+        return (inspect.isfunction(member) or inspect.isbuiltin(member) or\n+                (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))\n+\n+    def format_args(self, **kwargs: Any) -> str:\n+        if self.config.autodoc_typehints in ('none', 'description'):\n+            kwargs.setdefault('show_annotation', False)\n+\n+        try:\n+            self.env.app.emit('autodoc-before-process-signature', self.object, False)\n+            sig = inspect.signature(self.object, type_aliases=self.config.autodoc_type_aliases)\n+            args = stringify_signature(sig, **kwargs)\n+        except TypeError as exc:\n+            logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n+                           self.fullname, exc)\n+            return None\n+        except ValueError:\n+            args = ''\n+\n+        if self.config.strip_signature_backslash:\n+            # escape backslashes for reST\n+            args = args.replace('\\\\', '\\\\\\\\')\n+        return args\n+\n+    def document_members(self, all_members: bool = False) -> None:\n+        pass\n+\n+    def add_directive_header(self, sig: str) -> None:\n+        sourcename = self.get_sourcename()\n+        super().add_directive_header(sig)\n+\n+        if inspect.iscoroutinefunction(self.object):\n+            self.add_line('   :async:', sourcename)\n+\n+    def format_signature(self, **kwargs: Any) -> str:\n+        sigs = []\n+        if (self.analyzer and\n+                '.'.join(self.objpath) in self.analyzer.overloads and\n+                self.config.autodoc_typehints == 'signature'):\n+            # Use signatures for overloaded functions instead of the implementation function.\n+            overloaded = True\n+        else:\n+            overloaded = False\n+            sig = super().format_signature(**kwargs)\n+            sigs.append(sig)\n+\n+        if inspect.is_singledispatch_function(self.object):\n+            # append signature of singledispatch'ed functions\n+            for typ, func in self.object.registry.items():\n+                if typ is object:\n+                    pass  # default implementation. skipped.\n+                else:\n+                    self.annotate_to_first_argument(func, typ)\n+\n+                    documenter = FunctionDocumenter(self.directive, '')\n+                    documenter.object = func\n+                    documenter.objpath = [None]\n+                    sigs.append(documenter.format_signature())\n+        if overloaded:\n+            actual = inspect.signature(self.object,\n+                                       type_aliases=self.config.autodoc_type_aliases)\n+            __globals__ = safe_getattr(self.object, '__globals__', {})\n+            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n+                overload = self.merge_default_value(actual, overload)\n+                overload = evaluate_signature(overload, __globals__,\n+                                              self.config.autodoc_type_aliases)\n+\n+                sig = stringify_signature(overload, **kwargs)\n+                sigs.append(sig)\n+\n+        return \"\\n\".join(sigs)\n+\n+    def merge_default_value(self, actual: Signature, overload: Signature) -> Signature:\n+        \"\"\"Merge default values of actual implementation to the overload variants.\"\"\"\n+        parameters = list(overload.parameters.values())\n+        for i, param in enumerate(parameters):\n+            actual_param = actual.parameters.get(param.name)\n+            if actual_param and param.default == '...':\n+                parameters[i] = param.replace(default=actual_param.default)\n+\n+        return overload.replace(parameters=parameters)\n+\n+    def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n+        \"\"\"Annotate type hint to the first argument of function if needed.\"\"\"\n+        try:\n+            sig = inspect.signature(func, type_aliases=self.config.autodoc_type_aliases)\n+        except TypeError as exc:\n+            logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n+                           self.fullname, exc)\n+            return\n+        except ValueError:\n+            return\n+        if len(sig.parameters) == 0:\n+            return\n+\n+        params = list(sig.parameters.values())\n+        if params[0].annotation is Parameter.empty:\n+            params[0] = params[0].replace(annotation=typ)\n+            try:\n+                func.__signature__ = sig.replace(parameters=params)  # type: ignore\n+            except (AttributeError, TypeError):\n+                # failed to update signature (ex. built-in or extension types)\n+                return\n+\n+\n class DecoratorDocumenter(FunctionDocumenter):\n     \"\"\"\n     Specialized Documenter subclass for decorator functions.\ndiff --git a/tox.ini b/tox.ini\nindex a363e187f..3b8bc12d0 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -27,7 +27,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "setup.py",
    "sphinx/cmd/build.py",
    "sphinx/domains/python.py",
    "sphinx/ext/autodoc/__init__.py",
    "tox.ini"
  ],
  "repo": "sphinx-doc/sphinx",
  "base_commit": "dfdc7626b5dd06bff3d326e6efddc492ef00c471",
  "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -68,7 +68,7 @@ class ObjectEntry(NamedTuple):\n     docname: str\n     node_id: str\n     objtype: str\n-    canonical: bool\n+    aliased: bool\n \n \n class ModuleEntry(NamedTuple):\n@@ -505,7 +505,7 @@ def add_target_and_index(self, name_cls: Tuple[str, str], sig: str,\n \n         canonical_name = self.options.get('canonical')\n         if canonical_name:\n-            domain.note_object(canonical_name, self.objtype, node_id, canonical=True,\n+            domain.note_object(canonical_name, self.objtype, node_id, aliased=True,\n                                location=signode)\n \n         if 'noindexentry' not in self.options:\n@@ -1138,17 +1138,25 @@ def objects(self) -> Dict[str, ObjectEntry]:\n         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry\n \n     def note_object(self, name: str, objtype: str, node_id: str,\n-                    canonical: bool = False, location: Any = None) -> None:\n+                    aliased: bool = False, location: Any = None) -> None:\n         \"\"\"Note a python object for cross reference.\n \n         .. versionadded:: 2.1\n         \"\"\"\n         if name in self.objects:\n             other = self.objects[name]\n-            logger.warning(__('duplicate object description of %s, '\n-                              'other instance in %s, use :noindex: for one of them'),\n-                           name, other.docname, location=location)\n-        self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, canonical)\n+            if other.aliased and aliased is False:\n+                # The original definition found. Override it!\n+                pass\n+            elif other.aliased is False and aliased:\n+                # The original definition is already registered.\n+                return\n+            else:\n+                # duplicated\n+                logger.warning(__('duplicate object description of %s, '\n+                                  'other instance in %s, use :noindex: for one of them'),\n+                               name, other.docname, location=location)\n+        self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)\n \n     @property\n     def modules(self) -> Dict[str, ModuleEntry]:\n@@ -1326,8 +1334,8 @@ def get_objects(self) -> Iterator[Tuple[str, str, str, str, str, int]]:\n             yield (modname, modname, 'module', mod.docname, mod.node_id, 0)\n         for refname, obj in self.objects.items():\n             if obj.objtype != 'module':  # modules are already handled\n-                if obj.canonical:\n-                    # canonical names are not full-text searchable.\n+                if obj.aliased:\n+                    # aliased names are not full-text searchable.\n                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, -1)\n                 else:\n                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)\n",
  "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -870,6 +870,39 @@ def test_canonical(app):\n     assert domain.objects['_io.StringIO'] == ('index', 'io.StringIO', 'class', True)\n \n \n+def test_canonical_definition_overrides(app, warning):\n+    text = (\".. py:class:: io.StringIO\\n\"\n+            \"   :canonical: _io.StringIO\\n\"\n+            \".. py:class:: _io.StringIO\\n\")\n+    restructuredtext.parse(app, text)\n+    assert warning.getvalue() == \"\"\n+\n+    domain = app.env.get_domain('py')\n+    assert domain.objects['_io.StringIO'] == ('index', 'id0', 'class', False)\n+\n+\n+def test_canonical_definition_skip(app, warning):\n+    text = (\".. py:class:: _io.StringIO\\n\"\n+            \".. py:class:: io.StringIO\\n\"\n+            \"   :canonical: _io.StringIO\\n\")\n+\n+    restructuredtext.parse(app, text)\n+    assert warning.getvalue() == \"\"\n+\n+    domain = app.env.get_domain('py')\n+    assert domain.objects['_io.StringIO'] == ('index', 'io.StringIO', 'class', False)\n+\n+\n+def test_canonical_duplicated(app, warning):\n+    text = (\".. py:class:: mypackage.StringIO\\n\"\n+            \"   :canonical: _io.StringIO\\n\"\n+            \".. py:class:: io.StringIO\\n\"\n+            \"   :canonical: _io.StringIO\\n\")\n+\n+    restructuredtext.parse(app, text)\n+    assert warning.getvalue() != \"\"\n+\n+\n def test_info_field_list(app):\n     text = (\".. py:module:: example\\n\"\n             \".. py:class:: Class\\n\"\n",
  "problem_statement": "autodoc: duplication warning on documenting aliased object\n**Describe the bug**\r\nautodoc: duplication warning on documenting aliased object\r\n\r\n**To Reproduce**\r\n```\r\n# example.py\r\nfrom io import StringIO\r\n```\r\n```\r\n# index.rst\r\n.. autoclass:: example.StringIO\r\n.. autoclass:: io.StringIO\r\n```\r\n```\r\nRemoving everything under '_build'...\r\nRunning Sphinx v4.0.0+/dfdc7626b\r\nmaking output directory... done\r\n[autosummary] generating autosummary for: index.rst\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nbuilding [html]: targets for 1 source files that are out of date\r\nupdating environment: [new config] 1 added, 0 changed, 0 removed\r\nreading sources... [100%] index\r\ndocstring of _io.StringIO:1: WARNING: duplicate object description of _io.StringIO, other instance in index, use :noindex: for one of them\r\nlooking for now-outdated files... none found\r\npickling environment... done\r\nchecking consistency... done\r\npreparing documents... done\r\nwriting output... [100%] index\r\ngenerating indices... genindex done\r\nwriting additional pages... search done\r\ncopying static files... done\r\ncopying extra files... done\r\ndumping search index in English (code: en)... done\r\ndumping object inventory... done\r\nbuild succeeded, 1 warning.\r\n\r\nThe HTML pages are in _build/html.\r\n```\r\n\r\n**Expected behavior**\r\nNo warning\r\n\r\n**Your project**\r\nN/A\r\n\r\n**Screenshots**\r\nN/A\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.9.4\r\n- Sphinx version: HEAD of 4.0.x\r\n- Sphinx extensions: sphinx.ext.autodoc\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n",
  "hints_text": "I noticed the example is not good. Both `example.StringIO` and `io.StringIO` are aliases of `_io.StringIO`. So they're surely conflicted.\r\n\r\nIt would be better to not emit a warning for this case:\r\n```\r\n.. autoclass:: _io.StringIO\r\n.. autoclass:: io.StringIO\r\n```\r\n\r\nThe former one is a canonical name of the `io.StringIO`. So this should not be conflicted.",
  "created_at": "2021-04-22T16:21:25Z",
  "version": "4.0",
  "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_canonical_definition_overrides\", \"tests/test_domain_py.py::test_canonical_definition_skip\"]",
  "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_canonical\", \"tests/test_domain_py.py::test_canonical_duplicated\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_xrefs_abbreviations\", \"tests/test_domain_py.py::test_exceptions_module_is_ignored\", \"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_info_field_list\", \"tests/test_domain_py.py::test_info_field_list_var\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_noindexentry\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pydata_with_union_type_operator\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_pyfunction_with_number_literals\", \"tests/test_domain_py.py::test_pyfunction_with_union_type_operator\", \"tests/test_domain_py.py::test_pymethod_options\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pyproperty\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_warn_missing_reference\"]",
  "environment_setup_commit": "8939a75efaa911a12dbe6edccedf261e88bf7eef",
  "patch_files": [
    "sphinx/domains/python.py"
  ],
  "test_patch_files": [
    "tests/test_domain_py.py"
  ],
  "patch_diff_details": {
    "sphinx/domains/python.py": {
      "diffs": [
        {
          "start_line_old": 71,
          "end_line_old": 71,
          "file_pos": 6,
          "file_context_length": 78879,
          "pos": 22,
          "context_length": 15850
        },
        {
          "start_line_old": 508,
          "end_line_old": 508,
          "file_pos": 6,
          "file_context_length": 78879,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/domains/python.py_PyCurrentModule_PyCurrentModule.run.3.1",
          "closest_snippet_line_distance": 446
        },
        {
          "start_line_old": 1141,
          "end_line_old": 1151,
          "file_pos": 6,
          "file_context_length": 78879,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/domains/python.py_PyCurrentModule_PyCurrentModule.run.3.1",
          "closest_snippet_line_distance": 179
        },
        {
          "start_line_old": 1329,
          "end_line_old": 1330,
          "file_pos": 6,
          "file_context_length": 78879,
          "closest_snippet_id": "/tmp/repos/sphinx/sphinx/domains/python.py_PyCurrentModule_PyCurrentModule.run.3.1",
          "closest_snippet_line_distance": 358
        }
      ]
    }
  },
  "vectors": 1529,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/deprecated.py_GenericAliasDocumenter_",
      "distance": 0.8025078773498535,
      "file_path": "sphinx/ext/autodoc/deprecated.py",
      "start_line": 114,
      "end_line": 127,
      "tokens": 114,
      "context_length": 114
    },
    {
      "position": 2,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_AttributeDocumenter.import_object_AttributeDocumenter.should_suppress_value_header.2.1",
      "distance": 0.853888750076294,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2440,
      "end_line": 2463,
      "tokens": 220,
      "context_length": 334
    },
    {
      "position": 3,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_DataDocumenter.add_directive_header_DataDocumenter.add_directive_header.3.3.annotations.3.2.1",
      "distance": 0.8624272346496582,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1927,
      "end_line": 1949,
      "tokens": 245,
      "context_length": 579
    },
    {
      "position": 4,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/__init__.py_inspect_autosummary_toc.1",
      "distance": 0.8744900226593018,
      "file_path": "sphinx/ext/autosummary/__init__.py",
      "start_line": 55,
      "end_line": 103,
      "tokens": 372,
      "context_length": 951
    },
    {
      "position": 5,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_GenericAliasMixin_GenericAliasMixin.update_content.2",
      "distance": 0.8883665800094604,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1758,
      "end_line": 1773,
      "tokens": 129,
      "context_length": 1080
    },
    {
      "position": 6,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/generate.py_argparse_logger.1",
      "distance": 0.8954147100448608,
      "file_path": "sphinx/ext/autosummary/generate.py",
      "start_line": 20,
      "end_line": 53,
      "tokens": 257,
      "context_length": 1337
    },
    {
      "position": 7,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_ClassDocumenter.1_ClassDocumenter.2",
      "distance": 0.9032444953918457,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1408,
      "end_line": 1717,
      "tokens": 2902,
      "context_length": 4239
    },
    {
      "position": 8,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_AttributeDocumenter.add_directive_header_AttributeDocumenter.add_directive_header.3.3.annotations.3.2.1",
      "distance": 0.9123793244361877,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2465,
      "end_line": 2486,
      "tokens": 272,
      "context_length": 4511
    },
    {
      "position": 9,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/generate.py_generate_autosummary_docs_generate_autosummary_docs.17.1",
      "distance": 0.9141354560852051,
      "file_path": "sphinx/ext/autosummary/generate.py",
      "start_line": 350,
      "end_line": 440,
      "tokens": 756,
      "context_length": 5267
    },
    {
      "position": 10,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/deprecated.py_DataDeclarationDocumenter_DataDeclarationDocumenter.__init__.2",
      "distance": 0.9180193543434143,
      "file_path": "sphinx/ext/autodoc/deprecated.py",
      "start_line": 32,
      "end_line": 47,
      "tokens": 140,
      "context_length": 5407
    },
    {
      "position": 11,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_ModuleDocumenter.get_object_members_ModuleDocumenter.get_object_members.2.2.4.1",
      "distance": 0.9236445426940918,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1065,
      "end_line": 1089,
      "tokens": 209,
      "context_length": 5616
    },
    {
      "position": 12,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_AttributeDocumenter.get_doc_AttributeDocumenter.add_content.self.analyzer.4",
      "distance": 0.9310482144355774,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2505,
      "end_line": 2530,
      "tokens": 316,
      "context_length": 5932
    },
    {
      "position": 13,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_104_",
      "distance": 0.9317477941513062,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2624,
      "end_line": 2665,
      "tokens": 488,
      "context_length": 6420
    },
    {
      "position": 14,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_DataDocumenter.document_members_DataDocumenter.add_content.self.analyzer.4",
      "distance": 0.9324718713760376,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1951,
      "end_line": 1988,
      "tokens": 314,
      "context_length": 6734
    },
    {
      "position": 15,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/generate.py_generate_autosummary_content_generate_autosummary_content.skip_member.1.2.2.1",
      "distance": 0.9347854852676392,
      "file_path": "sphinx/ext/autosummary/generate.py",
      "start_line": 225,
      "end_line": 240,
      "tokens": 184,
      "context_length": 6918
    },
    {
      "position": 16,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/__init__.py_Autosummary.run_Autosummary.run.7.1",
      "distance": 0.9379997253417969,
      "file_path": "sphinx/ext/autosummary/__init__.py",
      "start_line": 237,
      "end_line": 283,
      "tokens": 457,
      "context_length": 7375
    },
    {
      "position": 17,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_ModuleDocumenter.import_object_ModuleDocumenter.import_object.3.1",
      "distance": 0.9400448203086853,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1011,
      "end_line": 1023,
      "tokens": 124,
      "context_length": 7499
    },
    {
      "position": 18,
      "id": "/tmp/repos/sphinx/sphinx/domains/c.py_DefinitionParser._simple_fundamental_types._parse_declarator_AliasTransform.apply.1.18",
      "distance": 0.9583961963653564,
      "file_path": "sphinx/domains/c.py",
      "start_line": 2779,
      "end_line": 3576,
      "tokens": 6651,
      "context_length": 14150
    },
    {
      "position": 19,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/generate.py_40_ModuleScanner.is_skipped.1.2.2.1",
      "distance": 0.9597492218017578,
      "file_path": "sphinx/ext/autosummary/generate.py",
      "start_line": 172,
      "end_line": 191,
      "tokens": 176,
      "context_length": 14326
    },
    {
      "position": 20,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/deprecated.py_warnings_SingledispatchFunctionDocumenter.__init__.2",
      "distance": 0.9607776403427124,
      "file_path": "sphinx/ext/autodoc/deprecated.py",
      "start_line": 11,
      "end_line": 29,
      "tokens": 155,
      "context_length": 14481
    },
    {
      "position": 21,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_Documenter.filter_members.9_Documenter.filter_members.10.1",
      "distance": 0.9619458913803101,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 699,
      "end_line": 806,
      "tokens": 865,
      "context_length": 15346
    },
    {
      "position": 22,
      "id": "/tmp/repos/sphinx/sphinx/domains/python.py_builtins_ModuleEntry.deprecated",
      "distance": 0.96424400806427,
      "file_path": "sphinx/domains/python.py",
      "start_line": 11,
      "end_line": 79,
      "tokens": 504,
      "context_length": 15850,
      "file_pos": 6
    },
    {
      "position": 23,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/importer.py_import_object_import_object.2.10.5",
      "distance": 0.9642863273620605,
      "file_path": "sphinx/ext/autodoc/importer.py",
      "start_line": 77,
      "end_line": 147,
      "tokens": 649,
      "context_length": 16499
    },
    {
      "position": 24,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/importer.py_importlib_mangle.3.1",
      "distance": 0.964607834815979,
      "file_path": "sphinx/ext/autodoc/importer.py",
      "start_line": 11,
      "end_line": 40,
      "tokens": 211,
      "context_length": 16710
    },
    {
      "position": 25,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_AttributeDocumenter.get_attribute_comment_AttributeDocumenter.get_attribute_comment.2.1",
      "distance": 0.9650962352752686,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2488,
      "end_line": 2503,
      "tokens": 182,
      "context_length": 16892
    },
    {
      "position": 26,
      "id": "/tmp/repos/sphinx/sphinx/domains/std.py_re_token_re.1",
      "distance": 0.9653851985931396,
      "file_path": "sphinx/domains/std.py",
      "start_line": 11,
      "end_line": 46,
      "tokens": 311,
      "context_length": 17203
    },
    {
      "position": 27,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_SlotsMixin.get_doc_SlotsMixin.get_doc.1.2.2",
      "distance": 0.9677553176879883,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2236,
      "end_line": 2250,
      "tokens": 152,
      "context_length": 17355
    },
    {
      "position": 28,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_Documenter.get_sourcename_Documenter.get_sourcename.2.2.1.1",
      "distance": 0.9687811732292175,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 573,
      "end_line": 585,
      "tokens": 133,
      "context_length": 17488
    },
    {
      "position": 29,
      "id": "/tmp/repos/sphinx/doc/conf.py_1_todo_include_todos.1",
      "distance": 0.9703853726387024,
      "file_path": "doc/conf.py",
      "start_line": 1,
      "end_line": 82,
      "tokens": 731,
      "context_length": 18219
    },
    {
      "position": 30,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/__init__.py_Autosummary.import_by_name_Autosummary.create_documenter.3.1",
      "distance": 0.9705371856689453,
      "file_path": "sphinx/ext/autosummary/__init__.py",
      "start_line": 285,
      "end_line": 306,
      "tokens": 200,
      "context_length": 18419
    },
    {
      "position": 31,
      "id": "/tmp/repos/sphinx/sphinx/io.py_codecs_logger.1",
      "distance": 0.9729640483856201,
      "file_path": "sphinx/io.py",
      "start_line": 10,
      "end_line": 39,
      "tokens": 234,
      "context_length": 18653
    },
    {
      "position": 32,
      "id": "/tmp/repos/sphinx/sphinx/builders/html/__init__.py_html_return_codes_re.1",
      "distance": 0.9767836928367615,
      "file_path": "sphinx/builders/html/__init__.py",
      "start_line": 11,
      "end_line": 62,
      "tokens": 432,
      "context_length": 19085
    },
    {
      "position": 33,
      "id": "/tmp/repos/sphinx/sphinx/domains/cpp.py_CPPObject._add_enumerator_to_parent_CPPDomain.merge_domaindata.5.4",
      "distance": 0.976963222026825,
      "file_path": "sphinx/domains/cpp.py",
      "start_line": 6825,
      "end_line": 7557,
      "tokens": 6257,
      "context_length": 25342
    },
    {
      "position": 34,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_re_exclude_members_option.3.1",
      "distance": 0.9801617860794067,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 13,
      "end_line": 111,
      "tokens": 770,
      "context_length": 26112
    },
    {
      "position": 35,
      "id": "/tmp/repos/sphinx/sphinx/deprecation.py_sys_deprecated_alias.2",
      "distance": 0.982222318649292,
      "file_path": "sphinx/deprecation.py",
      "start_line": 11,
      "end_line": 36,
      "tokens": 156,
      "context_length": 26268
    },
    {
      "position": 36,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/deprecated.py_InstanceAttributeDocumenter_InstanceAttributeDocumenter.__init__.2",
      "distance": 0.9859422445297241,
      "file_path": "sphinx/ext/autodoc/deprecated.py",
      "start_line": 78,
      "end_line": 93,
      "tokens": 139,
      "context_length": 26407
    },
    {
      "position": 37,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/generate.py_generate_autosummary_content.get_members_generate_autosummary_content.get_members.4.1",
      "distance": 0.9885889291763306,
      "file_path": "sphinx/ext/autosummary/generate.py",
      "start_line": 242,
      "end_line": 267,
      "tokens": 292,
      "context_length": 26699
    },
    {
      "position": 38,
      "id": "/tmp/repos/sphinx/sphinx/directives/__init__.py_23_",
      "distance": 0.9932956695556641,
      "file_path": "sphinx/directives/__init__.py",
      "start_line": 269,
      "end_line": 294,
      "tokens": 167,
      "context_length": 26866
    },
    {
      "position": 39,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/mock.py_contextlib__MockObject.__repr__.1.1",
      "distance": 0.9981706142425537,
      "file_path": "sphinx/ext/autodoc/mock.py",
      "start_line": 11,
      "end_line": 69,
      "tokens": 452,
      "context_length": 27318
    },
    {
      "position": 40,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_ModuleDocumenter.add_directive_header_ModuleDocumenter.add_directive_header.6.1",
      "distance": 0.9983037710189819,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1025,
      "end_line": 1036,
      "tokens": 126,
      "context_length": 27444
    },
    {
      "position": 41,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_Documenter_Documenter.add_line.2.3.1",
      "distance": 0.999718189239502,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 285,
      "end_line": 361,
      "tokens": 751,
      "context_length": 28195
    },
    {
      "position": 42,
      "id": "/tmp/repos/sphinx/sphinx/domains/c.py_CAliasObject_",
      "distance": 1.000675916671753,
      "file_path": "sphinx/domains/c.py",
      "start_line": 3579,
      "end_line": 3891,
      "tokens": 2923,
      "context_length": 31118
    },
    {
      "position": 43,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/__init__.py_setup_",
      "distance": 1.0012133121490479,
      "file_path": "sphinx/ext/autosummary/__init__.py",
      "start_line": 756,
      "end_line": 783,
      "tokens": 376,
      "context_length": 31494
    },
    {
      "position": 44,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/directive.py_warnings_DummyOptionSpec.__getitem__.1.1",
      "distance": 1.0024709701538086,
      "file_path": "sphinx/ext/autodoc/directive.py",
      "start_line": 9,
      "end_line": 47,
      "tokens": 305,
      "context_length": 31799
    },
    {
      "position": 45,
      "id": "/tmp/repos/sphinx/sphinx/builders/__init__.py_Builder._write_serial_Builder._write_serial.1.1.5",
      "distance": 1.0026626586914062,
      "file_path": "sphinx/builders/__init__.py",
      "start_line": 532,
      "end_line": 540,
      "tokens": 120,
      "context_length": 31919
    },
    {
      "position": 46,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/generate.py_generate_autosummary_content.ns_generate_autosummary_content.18.2.1.1",
      "distance": 1.0028283596038818,
      "file_path": "sphinx/ext/autosummary/generate.py",
      "start_line": 299,
      "end_line": 347,
      "tokens": 516,
      "context_length": 32435
    },
    {
      "position": 47,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/deprecated.py_SingledispatchMethodDocumenter_SingledispatchMethodDocumenter.__init__.2",
      "distance": 1.003187656402588,
      "file_path": "sphinx/ext/autodoc/deprecated.py",
      "start_line": 65,
      "end_line": 75,
      "tokens": 108,
      "context_length": 32543
    },
    {
      "position": 48,
      "id": "/tmp/repos/sphinx/sphinx/util/inspect.py_builtins_memory_address_re.1",
      "distance": 1.008180856704712,
      "file_path": "sphinx/util/inspect.py",
      "start_line": 11,
      "end_line": 45,
      "tokens": 277,
      "context_length": 32820
    },
    {
      "position": 49,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_DataDocumenter_DataDocumenter.should_suppress_value_header.2.1",
      "distance": 1.0113954544067383,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1878,
      "end_line": 1925,
      "tokens": 362,
      "context_length": 33182
    },
    {
      "position": 50,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_UninitializedInstanceAttributeMixin.import_object_UninitializedInstanceAttributeMixin.get_doc.1.2.2",
      "distance": 1.0121744871139526,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2325,
      "end_line": 2358,
      "tokens": 289,
      "context_length": 33471
    },
    {
      "position": 51,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_AttributeDocumenter.isinstanceattribute_AttributeDocumenter.isinstanceattribute.5.1",
      "distance": 1.0125782489776611,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2397,
      "end_line": 2416,
      "tokens": 224,
      "context_length": 33695
    },
    {
      "position": 52,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/__init__.py_autosummary_toc_visit_html_FakeDirective.__init__.6",
      "distance": 1.0142701864242554,
      "file_path": "sphinx/ext/autosummary/__init__.py",
      "start_line": 132,
      "end_line": 178,
      "tokens": 355,
      "context_length": 34050
    },
    {
      "position": 53,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/generate.py_setup_documenters_setup_documenters.3.1",
      "distance": 1.0143404006958008,
      "file_path": "sphinx/ext/autosummary/generate.py",
      "start_line": 84,
      "end_line": 96,
      "tokens": 163,
      "context_length": 34213
    },
    {
      "position": 54,
      "id": "/tmp/repos/sphinx/sphinx/directives/__init__.py_ObjectDescription_ObjectDescription._doc_field_type_map.1",
      "distance": 1.019627571105957,
      "file_path": "sphinx/directives/__init__.py",
      "start_line": 50,
      "end_line": 72,
      "tokens": 187,
      "context_length": 34400
    },
    {
      "position": 55,
      "id": "/tmp/repos/sphinx/sphinx/builders/singlehtml.py_2_logger.1",
      "distance": 1.021512746810913,
      "file_path": "sphinx/builders/singlehtml.py",
      "start_line": 11,
      "end_line": 26,
      "tokens": 128,
      "context_length": 34528
    },
    {
      "position": 56,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/__init__.py_get_documenter_get_documenter.9.3.1.1",
      "distance": 1.0223251581192017,
      "file_path": "sphinx/ext/autosummary/__init__.py",
      "start_line": 181,
      "end_line": 213,
      "tokens": 279,
      "context_length": 34807
    },
    {
      "position": 57,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/directive.py_AutodocDirective_",
      "distance": 1.0230729579925537,
      "file_path": "sphinx/ext/autodoc/directive.py",
      "start_line": 125,
      "end_line": 175,
      "tokens": 453,
      "context_length": 35260
    },
    {
      "position": 58,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_UninitializedGlobalVariableMixin_UninitializedGlobalVariableMixin.get_doc.1.2.2",
      "distance": 1.0260868072509766,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1837,
      "end_line": 1875,
      "tokens": 307,
      "context_length": 35567
    },
    {
      "position": 59,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/generate.py_find_autosummary_in_docstring_find_autosummary_in_docstring.4.1",
      "distance": 1.0271505117416382,
      "file_path": "sphinx/ext/autosummary/generate.py",
      "start_line": 458,
      "end_line": 479,
      "tokens": 217,
      "context_length": 35784
    },
    {
      "position": 60,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_NonDataDescriptorMixin_NonDataDescriptorMixin.get_doc.1.4.2",
      "distance": 1.027860164642334,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 2175,
      "end_line": 2203,
      "tokens": 248,
      "context_length": 36032
    },
    {
      "position": 61,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/__init__.py_process_generate_options_process_generate_options.8.1",
      "distance": 1.0316228866577148,
      "file_path": "sphinx/ext/autosummary/__init__.py",
      "start_line": 718,
      "end_line": 753,
      "tokens": 325,
      "context_length": 36357
    },
    {
      "position": 62,
      "id": "/tmp/repos/sphinx/sphinx/directives/patches.py_os_logger.1",
      "distance": 1.0334522724151611,
      "file_path": "sphinx/directives/patches.py",
      "start_line": 9,
      "end_line": 34,
      "tokens": 192,
      "context_length": 36549
    },
    {
      "position": 63,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/__init__.py_TypeVarMixin.update_content_TypeVarMixin.update_content.2",
      "distance": 1.0359196662902832,
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "start_line": 1819,
      "end_line": 1834,
      "tokens": 160,
      "context_length": 36709
    },
    {
      "position": 64,
      "id": "/tmp/repos/sphinx/sphinx/domains/std.py_warn_missing_reference_",
      "distance": 1.037968397140503,
      "file_path": "sphinx/domains/std.py",
      "start_line": 1112,
      "end_line": 1136,
      "tokens": 205,
      "context_length": 36914
    },
    {
      "position": 65,
      "id": "/tmp/repos/sphinx/sphinx/ext/autosummary/generate.py_generate_autosummary_content.get_modules_generate_autosummary_content.get_modules.4.1",
      "distance": 1.038236141204834,
      "file_path": "sphinx/ext/autosummary/generate.py",
      "start_line": 284,
      "end_line": 297,
      "tokens": 198,
      "context_length": 37112
    },
    {
      "position": 66,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/deprecated.py_SlotsAttributeDocumenter_SlotsAttributeDocumenter.__init__.2",
      "distance": 1.0403563976287842,
      "file_path": "sphinx/ext/autodoc/deprecated.py",
      "start_line": 96,
      "end_line": 111,
      "tokens": 133,
      "context_length": 37245
    },
    {
      "position": 67,
      "id": "/tmp/repos/sphinx/sphinx/ext/autodoc/typehints.py_augment_descriptions_with_types_",
      "distance": 1.0436336994171143,
      "file_path": "sphinx/ext/autodoc/typehints.py",
      "start_line": 130,
      "end_line": 185,
      "tokens": 454,
      "context_length": 37699
    },
    {
      "position": 68,
      "id": "/tmp/repos/sphinx/sphinx/domains/python.py_PyCurrentModule_PyCurrentModule.run.3.1",
      "distance": 1.0437384843826294,
      "file_path": "sphinx/domains/python.py",
      "start_line": 954,
      "end_line": 972,
      "tokens": 140,
      "context_length": 37839,
      "file_pos": 21
    },
    {
      "position": 69,
      "id": "/tmp/repos/sphinx/sphinx/ext/inheritance_diagram.py_builtins_py_builtins.1",
      "distance": 1.044524908065796,
      "file_path": "sphinx/ext/inheritance_diagram.py",
      "start_line": 38,
      "end_line": 67,
      "tokens": 243,
      "context_length": 38082
    },
    {
      "position": 70,
      "id": "/tmp/repos/sphinx/sphinx/directives/other.py_SeeAlso_TabularColumns.run.4.1",
      "distance": 1.0458414554595947,
      "file_path": "sphinx/directives/other.py",
      "start_line": 191,
      "end_line": 212,
      "tokens": 138,
      "context_length": 38220
    }
  ],
  "files": [
    {
      "file_path": "sphinx/ext/autodoc/deprecated.py",
      "position": 1,
      "tokens": 960,
      "context_length": 960
    },
    {
      "file_path": "sphinx/ext/autodoc/__init__.py",
      "position": 2,
      "tokens": 22441,
      "context_length": 23401
    },
    {
      "file_path": "sphinx/ext/autosummary/__init__.py",
      "position": 3,
      "tokens": 6455,
      "context_length": 29856
    },
    {
      "file_path": "sphinx/ext/autosummary/generate.py",
      "position": 4,
      "tokens": 5152,
      "context_length": 35008
    },
    {
      "file_path": "sphinx/domains/c.py",
      "position": 5,
      "tokens": 32077,
      "context_length": 67085
    },
    {
      "file_path": "sphinx/domains/python.py",
      "position": 6,
      "tokens": 11794,
      "context_length": 78879
    },
    {
      "file_path": "sphinx/ext/autodoc/importer.py",
      "position": 7,
      "tokens": 2462,
      "context_length": 81341
    },
    {
      "file_path": "sphinx/domains/std.py",
      "position": 8,
      "tokens": 10265,
      "context_length": 91606
    },
    {
      "file_path": "doc/conf.py",
      "position": 9,
      "tokens": 1464,
      "context_length": 93070
    },
    {
      "file_path": "sphinx/io.py",
      "position": 10,
      "tokens": 1405,
      "context_length": 94475
    },
    {
      "file_path": "sphinx/builders/html/__init__.py",
      "position": 11,
      "tokens": 12180,
      "context_length": 106655
    },
    {
      "file_path": "sphinx/domains/cpp.py",
      "position": 12,
      "tokens": 65657,
      "context_length": 172312
    },
    {
      "file_path": "sphinx/deprecation.py",
      "position": 13,
      "tokens": 702,
      "context_length": 173014
    },
    {
      "file_path": "sphinx/directives/__init__.py",
      "position": 14,
      "tokens": 2252,
      "context_length": 175266
    },
    {
      "file_path": "sphinx/ext/autodoc/mock.py",
      "position": 15,
      "tokens": 1348,
      "context_length": 176614
    },
    {
      "file_path": "sphinx/ext/autodoc/directive.py",
      "position": 16,
      "tokens": 1445,
      "context_length": 178059
    },
    {
      "file_path": "sphinx/builders/__init__.py",
      "position": 17,
      "tokens": 5342,
      "context_length": 183401
    },
    {
      "file_path": "sphinx/util/inspect.py",
      "position": 18,
      "tokens": 5901,
      "context_length": 189302
    },
    {
      "file_path": "sphinx/builders/singlehtml.py",
      "position": 19,
      "tokens": 1871,
      "context_length": 191173
    },
    {
      "file_path": "sphinx/directives/patches.py",
      "position": 20,
      "tokens": 1844,
      "context_length": 193017
    },
    {
      "file_path": "sphinx/ext/autodoc/typehints.py",
      "position": 21,
      "tokens": 1444,
      "context_length": 194461
    },
    {
      "file_path": "sphinx/ext/inheritance_diagram.py",
      "position": 22,
      "tokens": 3866,
      "context_length": 198327
    },
    {
      "file_path": "sphinx/directives/other.py",
      "position": 23,
      "tokens": 3127,
      "context_length": 201454
    }
  ]
}