{
  "instance_id": "sympy__sympy-18198",
  "model_patch": "diff --git a/sympy/core/evaluate.py b/sympy/core/evaluate.py\ndeleted file mode 100644\nindex 0cd4296783..0000000000\n--- a/sympy/core/evaluate.py\n+++ /dev/null\n@@ -1,72 +0,0 @@\n-from .cache import clear_cache\n-from contextlib import contextmanager\n-\n-\n-class _global_function(list):\n-    \"\"\" The cache must be cleared whenever _global_function is changed. \"\"\"\n-\n-    def __setitem__(self, key, value):\n-        if (self[key] != value):\n-            clear_cache()\n-        super(_global_function, self).__setitem__(key, value)\n-\n-\n-global_evaluate = _global_function([True])\n-global_distribute = _global_function([True])\n-\n-\n-@contextmanager\n-def evaluate(x):\n-    \"\"\" Control automatic evaluation\n-\n-    This context manager controls whether or not all SymPy functions evaluate\n-    by default.\n-\n-    Note that much of SymPy expects evaluated expressions.  This functionality\n-    is experimental and is unlikely to function as intended on large\n-    expressions.\n-\n-    Examples\n-    ========\n-\n-    >>> from sympy.abc import x\n-    >>> from sympy.core.evaluate import evaluate\n-    >>> print(x + x)\n-    2*x\n-    >>> with evaluate(False):\n-    ...     print(x + x)\n-    x + x\n-    \"\"\"\n-\n-    old = global_evaluate[0]\n-\n-    global_evaluate[0] = x\n-    yield\n-    global_evaluate[0] = old\n-\n-\n-@contextmanager\n-def distribute(x):\n-    \"\"\" Control automatic distribution of Number over Add\n-\n-    This context manager controls whether or not Mul distribute Number over\n-    Add. Plan is to avoid distributing Number over Add in all of sympy. Once\n-    that is done, this contextmanager will be removed.\n-\n-    Examples\n-    ========\n-\n-    >>> from sympy.abc import x\n-    >>> from sympy.core.evaluate import distribute\n-    >>> print(2*(x + 1))\n-    2*x + 2\n-    >>> with distribute(False):\n-    ...     print(2*(x + 1))\n-    2*(x + 1)\n-    \"\"\"\n-\n-    old = global_distribute[0]\n-\n-    global_distribute[0] = x\n-    yield\n-    global_distribute[0] = old\ndiff --git a/sympy/core/parameters.py b/sympy/core/parameters.py\nnew file mode 100644\nindex 0000000000..94e9a4376f\n--- /dev/null\n+++ b/sympy/core/parameters.py\n@@ -0,0 +1,61 @@\n+from .cache import clear_cache\n+from contextlib import contextmanager\n+\n+class GlobalParameters:\n+    \"\"\" A class to handle global parameters in a dict-like structure with context manager support. \"\"\"\n+\n+    def __init__(self):\n+        self._parameters = {\n+            'evaluate': [True],\n+            'distribute': [True]\n+        }\n+\n+    def __getitem__(self, key):\n+        \"\"\" Get the global parameter list. \"\"\"\n+        return self._parameters[key]\n+\n+    def __setitem__(self, key, value):\n+        \"\"\" Set the global parameter list. \"\"\"\n+        if self._parameters[key] != value:\n+            clear_cache()\n+        self._parameters[key] = value\n+\n+    @property\n+    def evaluate(self):\n+        \"\"\" Get the current value of the 'evaluate' parameter. \"\"\"\n+        return self._parameters['evaluate'][0]\n+\n+    @evaluate.setter\n+    def evaluate(self, value):\n+        \"\"\" Set the current value of the 'evaluate' parameter. \"\"\"\n+        if self._parameters['evaluate'][0] != value:\n+            clear_cache()\n+        self._parameters['evaluate'][0] = value\n+\n+    @property\n+    def distribute(self):\n+        \"\"\" Get the current value of the 'distribute' parameter. \"\"\"\n+        return self._parameters['distribute'][0]\n+\n+    @distribute.setter\n+    def distribute(self, value):\n+        \"\"\" Set the current value of the 'distribute' parameter. \"\"\"\n+        if self._parameters['distribute'][0] != value:\n+            clear_cache()\n+        self._parameters['distribute'][0] = value\n+\n+    @contextmanager\n+    def set(self, **kwargs):\n+        \"\"\" Context manager to temporarily set global parameters. \"\"\"\n+        old_values = {}\n+        try:\n+            for key, value in kwargs.items():\n+                old_values[key] = self._parameters[key][0]\n+                self[key][0] = value\n+            yield\n+        finally:\n+            for key, value in old_values.items():\n+                self[key][0] = value\n+\n+# Create a single global instance to manage all parameters\n+global_parameters = GlobalParameters()\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "ev/null",
    "sympy/core/parameters.py"
  ],
  "repo": "sympy/sympy",
  "base_commit": "74b8046b46c70b201fe118cc36b29ce6c0d3b9ec",
  "patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -4,7 +4,7 @@\n from collections import defaultdict\n \n from sympy.core.basic import Atom, Basic\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n from sympy.core.expr import Expr\n from sympy.core.compatibility import \\\n     is_sequence, reduce, range, as_int, Iterable\n@@ -3002,7 +3002,10 @@ class AppliedPermutation(Expr):\n     >>> _.subs(x, 1)\n     2\n     \"\"\"\n-    def __new__(cls, perm, x, evaluate=global_evaluate[0]):\n+    def __new__(cls, perm, x, evaluate=None):\n+        if evaluate is None:\n+            evaluate = global_parameters.evaluate\n+\n         perm = _sympify(perm)\n         x = _sympify(x)\n \ndiff --git a/sympy/core/__init__.py b/sympy/core/__init__.py\n--- a/sympy/core/__init__.py\n+++ b/sympy/core/__init__.py\n@@ -26,7 +26,7 @@\n from .evalf import PrecisionExhausted, N\n from .containers import Tuple, Dict\n from .exprtools import gcd_terms, factor_terms, factor_nc\n-from .evaluate import evaluate\n+from .parameters import evaluate\n \n # expose singletons\n Catalan = S.Catalan\ndiff --git a/sympy/core/add.py b/sympy/core/add.py\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -5,7 +5,7 @@\n \n from .basic import Basic\n from .compatibility import reduce, is_sequence, range\n-from .evaluate import global_distribute\n+from .parameters import global_parameters\n from .logic import _fuzzy_group, fuzzy_or, fuzzy_not\n from .singleton import S\n from .operations import AssocOp\n@@ -1085,7 +1085,7 @@ def _mpc_(self):\n         return (Float(re_part)._mpf_, Float(im_part)._mpf_)\n \n     def __neg__(self):\n-        if not global_distribute[0]:\n+        if not global_parameters.distribute:\n             return super(Add, self).__neg__()\n         return Add(*[-i for i in self.args])\n \ndiff --git a/sympy/core/evaluate.py b/sympy/core/evaluate.py\ndeleted file mode 100644\n--- a/sympy/core/evaluate.py\n+++ /dev/null\n@@ -1,72 +0,0 @@\n-from .cache import clear_cache\n-from contextlib import contextmanager\n-\n-\n-class _global_function(list):\n-    \"\"\" The cache must be cleared whenever _global_function is changed. \"\"\"\n-\n-    def __setitem__(self, key, value):\n-        if (self[key] != value):\n-            clear_cache()\n-        super(_global_function, self).__setitem__(key, value)\n-\n-\n-global_evaluate = _global_function([True])\n-global_distribute = _global_function([True])\n-\n-\n-@contextmanager\n-def evaluate(x):\n-    \"\"\" Control automatic evaluation\n-\n-    This context manager controls whether or not all SymPy functions evaluate\n-    by default.\n-\n-    Note that much of SymPy expects evaluated expressions.  This functionality\n-    is experimental and is unlikely to function as intended on large\n-    expressions.\n-\n-    Examples\n-    ========\n-\n-    >>> from sympy.abc import x\n-    >>> from sympy.core.evaluate import evaluate\n-    >>> print(x + x)\n-    2*x\n-    >>> with evaluate(False):\n-    ...     print(x + x)\n-    x + x\n-    \"\"\"\n-\n-    old = global_evaluate[0]\n-\n-    global_evaluate[0] = x\n-    yield\n-    global_evaluate[0] = old\n-\n-\n-@contextmanager\n-def distribute(x):\n-    \"\"\" Control automatic distribution of Number over Add\n-\n-    This context manager controls whether or not Mul distribute Number over\n-    Add. Plan is to avoid distributing Number over Add in all of sympy. Once\n-    that is done, this contextmanager will be removed.\n-\n-    Examples\n-    ========\n-\n-    >>> from sympy.abc import x\n-    >>> from sympy.core.evaluate import distribute\n-    >>> print(2*(x + 1))\n-    2*x + 2\n-    >>> with distribute(False):\n-    ...     print(2*(x + 1))\n-    2*(x + 1)\n-    \"\"\"\n-\n-    old = global_distribute[0]\n-\n-    global_distribute[0] = x\n-    yield\n-    global_distribute[0] = old\ndiff --git a/sympy/core/function.py b/sympy/core/function.py\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -46,7 +46,7 @@\n \n from sympy.core.compatibility import string_types, with_metaclass, PY3, range\n from sympy.core.containers import Tuple, Dict\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n from sympy.core.logic import fuzzy_and\n from sympy.utilities import default_sort_key\n from sympy.utilities.exceptions import SymPyDeprecationWarning\n@@ -276,7 +276,7 @@ def __new__(cls, *args, **options):\n         from sympy.sets.sets import FiniteSet\n \n         args = list(map(sympify, args))\n-        evaluate = options.pop('evaluate', global_evaluate[0])\n+        evaluate = options.pop('evaluate', global_parameters.evaluate)\n         # WildFunction (and anything else like it) may have nargs defined\n         # and we throw that value away here\n         options.pop('nargs', None)\n@@ -469,7 +469,7 @@ def __new__(cls, *args, **options):\n                 'plural': 's'*(min(cls.nargs) != 1),\n                 'given': n})\n \n-        evaluate = options.get('evaluate', global_evaluate[0])\n+        evaluate = options.get('evaluate', global_parameters.evaluate)\n         result = super(Function, cls).__new__(cls, *args, **options)\n         if evaluate and isinstance(result, cls) and result.args:\n             pr2 = min(cls._should_evalf(a) for a in result.args)\ndiff --git a/sympy/core/mul.py b/sympy/core/mul.py\n--- a/sympy/core/mul.py\n+++ b/sympy/core/mul.py\n@@ -12,7 +12,7 @@\n from .logic import fuzzy_not, _fuzzy_group\n from .compatibility import reduce, range\n from .expr import Expr\n-from .evaluate import global_distribute\n+from .parameters import global_parameters\n \n \n \n@@ -202,7 +202,7 @@ def flatten(cls, seq):\n                     if r is not S.One:  # 2-arg hack\n                         # leave the Mul as a Mul\n                         rv = [cls(a*r, b, evaluate=False)], [], None\n-                    elif global_distribute[0] and b.is_commutative:\n+                    elif global_parameters.distribute and b.is_commutative:\n                         r, b = b.as_coeff_Add()\n                         bargs = [_keep_coeff(a, bi) for bi in Add.make_args(b)]\n                         _addsort(bargs)\n@@ -626,7 +626,7 @@ def _handle_for_oo(c_part, coeff_sign):\n             c_part.insert(0, coeff)\n \n         # we are done\n-        if (global_distribute[0] and not nc_part and len(c_part) == 2 and\n+        if (global_parameters.distribute and not nc_part and len(c_part) == 2 and\n                 c_part[0].is_Number and c_part[0].is_finite and c_part[1].is_Add):\n             # 2*(1+a) -> 2 + 2 * a\n             coeff = c_part[0]\ndiff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -30,7 +30,7 @@\n     fnan as _mpf_nan, fzero, _normalize as mpf_normalize,\n     prec_to_dps, fone, fnone)\n from sympy.utilities.misc import debug, filldedent\n-from .evaluate import global_evaluate\n+from .parameters import global_parameters\n \n from sympy.utilities.exceptions import SymPyDeprecationWarning\n \n@@ -711,7 +711,7 @@ def sort_key(self, order=None):\n \n     @_sympifyit('other', NotImplemented)\n     def __add__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other is S.NaN:\n                 return S.NaN\n             elif other is S.Infinity:\n@@ -722,7 +722,7 @@ def __add__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __sub__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other is S.NaN:\n                 return S.NaN\n             elif other is S.Infinity:\n@@ -733,7 +733,7 @@ def __sub__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __mul__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other is S.NaN:\n                 return S.NaN\n             elif other is S.Infinity:\n@@ -756,7 +756,7 @@ def __mul__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __div__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other is S.NaN:\n                 return S.NaN\n             elif other is S.Infinity or other is S.NegativeInfinity:\n@@ -1291,28 +1291,28 @@ def __neg__(self):\n \n     @_sympifyit('other', NotImplemented)\n     def __add__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             rhs, prec = other._as_mpf_op(self._prec)\n             return Float._new(mlib.mpf_add(self._mpf_, rhs, prec, rnd), prec)\n         return Number.__add__(self, other)\n \n     @_sympifyit('other', NotImplemented)\n     def __sub__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             rhs, prec = other._as_mpf_op(self._prec)\n             return Float._new(mlib.mpf_sub(self._mpf_, rhs, prec, rnd), prec)\n         return Number.__sub__(self, other)\n \n     @_sympifyit('other', NotImplemented)\n     def __mul__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             rhs, prec = other._as_mpf_op(self._prec)\n             return Float._new(mlib.mpf_mul(self._mpf_, rhs, prec, rnd), prec)\n         return Number.__mul__(self, other)\n \n     @_sympifyit('other', NotImplemented)\n     def __div__(self, other):\n-        if isinstance(other, Number) and other != 0 and global_evaluate[0]:\n+        if isinstance(other, Number) and other != 0 and global_parameters.evaluate:\n             rhs, prec = other._as_mpf_op(self._prec)\n             return Float._new(mlib.mpf_div(self._mpf_, rhs, prec, rnd), prec)\n         return Number.__div__(self, other)\n@@ -1321,24 +1321,24 @@ def __div__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __mod__(self, other):\n-        if isinstance(other, Rational) and other.q != 1 and global_evaluate[0]:\n+        if isinstance(other, Rational) and other.q != 1 and global_parameters.evaluate:\n             # calculate mod with Rationals, *then* round the result\n             return Float(Rational.__mod__(Rational(self), other),\n                          precision=self._prec)\n-        if isinstance(other, Float) and global_evaluate[0]:\n+        if isinstance(other, Float) and global_parameters.evaluate:\n             r = self/other\n             if r == int(r):\n                 return Float(0, precision=max(self._prec, other._prec))\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             rhs, prec = other._as_mpf_op(self._prec)\n             return Float._new(mlib.mpf_mod(self._mpf_, rhs, prec, rnd), prec)\n         return Number.__mod__(self, other)\n \n     @_sympifyit('other', NotImplemented)\n     def __rmod__(self, other):\n-        if isinstance(other, Float) and global_evaluate[0]:\n+        if isinstance(other, Float) and global_parameters.evaluate:\n             return other.__mod__(self)\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             rhs, prec = other._as_mpf_op(self._prec)\n             return Float._new(mlib.mpf_mod(rhs, self._mpf_, prec, rnd), prec)\n         return Number.__rmod__(self, other)\n@@ -1696,7 +1696,7 @@ def __neg__(self):\n \n     @_sympifyit('other', NotImplemented)\n     def __add__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, Integer):\n                 return Rational(self.p + self.q*other.p, self.q, 1)\n             elif isinstance(other, Rational):\n@@ -1711,7 +1711,7 @@ def __add__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __sub__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, Integer):\n                 return Rational(self.p - self.q*other.p, self.q, 1)\n             elif isinstance(other, Rational):\n@@ -1723,7 +1723,7 @@ def __sub__(self, other):\n         return Number.__sub__(self, other)\n     @_sympifyit('other', NotImplemented)\n     def __rsub__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, Integer):\n                 return Rational(self.q*other.p - self.p, self.q, 1)\n             elif isinstance(other, Rational):\n@@ -1735,7 +1735,7 @@ def __rsub__(self, other):\n         return Number.__rsub__(self, other)\n     @_sympifyit('other', NotImplemented)\n     def __mul__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, Integer):\n                 return Rational(self.p*other.p, self.q, igcd(other.p, self.q))\n             elif isinstance(other, Rational):\n@@ -1749,7 +1749,7 @@ def __mul__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __div__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, Integer):\n                 if self.p and other.p == S.Zero:\n                     return S.ComplexInfinity\n@@ -1764,7 +1764,7 @@ def __div__(self, other):\n         return Number.__div__(self, other)\n     @_sympifyit('other', NotImplemented)\n     def __rdiv__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, Integer):\n                 return Rational(other.p*self.q, self.p, igcd(self.p, other.p))\n             elif isinstance(other, Rational):\n@@ -1778,7 +1778,7 @@ def __rdiv__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __mod__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, Rational):\n                 n = (self.p*other.q) // (other.p*self.q)\n                 return Rational(self.p*other.q - n*other.p*self.q, self.q*other.q)\n@@ -2139,14 +2139,14 @@ def __abs__(self):\n \n     def __divmod__(self, other):\n         from .containers import Tuple\n-        if isinstance(other, Integer) and global_evaluate[0]:\n+        if isinstance(other, Integer) and global_parameters.evaluate:\n             return Tuple(*(divmod(self.p, other.p)))\n         else:\n             return Number.__divmod__(self, other)\n \n     def __rdivmod__(self, other):\n         from .containers import Tuple\n-        if isinstance(other, integer_types) and global_evaluate[0]:\n+        if isinstance(other, integer_types) and global_parameters.evaluate:\n             return Tuple(*(divmod(other, self.p)))\n         else:\n             try:\n@@ -2160,7 +2160,7 @@ def __rdivmod__(self, other):\n \n     # TODO make it decorator + bytecodehacks?\n     def __add__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, integer_types):\n                 return Integer(self.p + other)\n             elif isinstance(other, Integer):\n@@ -2172,7 +2172,7 @@ def __add__(self, other):\n             return Add(self, other)\n \n     def __radd__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, integer_types):\n                 return Integer(other + self.p)\n             elif isinstance(other, Rational):\n@@ -2181,7 +2181,7 @@ def __radd__(self, other):\n         return Rational.__radd__(self, other)\n \n     def __sub__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, integer_types):\n                 return Integer(self.p - other)\n             elif isinstance(other, Integer):\n@@ -2192,7 +2192,7 @@ def __sub__(self, other):\n         return Rational.__sub__(self, other)\n \n     def __rsub__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, integer_types):\n                 return Integer(other - self.p)\n             elif isinstance(other, Rational):\n@@ -2201,7 +2201,7 @@ def __rsub__(self, other):\n         return Rational.__rsub__(self, other)\n \n     def __mul__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, integer_types):\n                 return Integer(self.p*other)\n             elif isinstance(other, Integer):\n@@ -2212,7 +2212,7 @@ def __mul__(self, other):\n         return Rational.__mul__(self, other)\n \n     def __rmul__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, integer_types):\n                 return Integer(other*self.p)\n             elif isinstance(other, Rational):\n@@ -2221,7 +2221,7 @@ def __rmul__(self, other):\n         return Rational.__rmul__(self, other)\n \n     def __mod__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, integer_types):\n                 return Integer(self.p % other)\n             elif isinstance(other, Integer):\n@@ -2230,7 +2230,7 @@ def __mod__(self, other):\n         return Rational.__mod__(self, other)\n \n     def __rmod__(self, other):\n-        if global_evaluate[0]:\n+        if global_parameters.evaluate:\n             if isinstance(other, integer_types):\n                 return Integer(other % self.p)\n             elif isinstance(other, Integer):\n@@ -2845,7 +2845,7 @@ def evalf(self, prec=None, **options):\n \n     @_sympifyit('other', NotImplemented)\n     def __add__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other is S.NegativeInfinity or other is S.NaN:\n                 return S.NaN\n             return self\n@@ -2854,7 +2854,7 @@ def __add__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __sub__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other is S.Infinity or other is S.NaN:\n                 return S.NaN\n             return self\n@@ -2866,7 +2866,7 @@ def __rsub__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __mul__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other.is_zero or other is S.NaN:\n                 return S.NaN\n             if other.is_extended_positive:\n@@ -2877,7 +2877,7 @@ def __mul__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __div__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other is S.Infinity or \\\n                 other is S.NegativeInfinity or \\\n                     other is S.NaN:\n@@ -3013,7 +3013,7 @@ def evalf(self, prec=None, **options):\n \n     @_sympifyit('other', NotImplemented)\n     def __add__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other is S.Infinity or other is S.NaN:\n                 return S.NaN\n             return self\n@@ -3022,7 +3022,7 @@ def __add__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __sub__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other is S.NegativeInfinity or other is S.NaN:\n                 return S.NaN\n             return self\n@@ -3034,7 +3034,7 @@ def __rsub__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __mul__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other.is_zero or other is S.NaN:\n                 return S.NaN\n             if other.is_extended_positive:\n@@ -3045,7 +3045,7 @@ def __mul__(self, other):\n \n     @_sympifyit('other', NotImplemented)\n     def __div__(self, other):\n-        if isinstance(other, Number) and global_evaluate[0]:\n+        if isinstance(other, Number) and global_parameters.evaluate:\n             if other is S.Infinity or \\\n                 other is S.NegativeInfinity or \\\n                     other is S.NaN:\ndiff --git a/sympy/core/operations.py b/sympy/core/operations.py\n--- a/sympy/core/operations.py\n+++ b/sympy/core/operations.py\n@@ -5,7 +5,7 @@\n from sympy.core.cache import cacheit\n from sympy.core.compatibility import ordered, range\n from sympy.core.logic import fuzzy_and\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n from sympy.utilities.iterables import sift\n \n \n@@ -38,7 +38,7 @@ def __new__(cls, *args, **options):\n \n         evaluate = options.get('evaluate')\n         if evaluate is None:\n-            evaluate = global_evaluate[0]\n+            evaluate = global_parameters.evaluate\n         if not evaluate:\n             obj = cls._from_args(args)\n             obj = cls._exec_constructor_postprocessors(obj)\ndiff --git a/sympy/core/parameters.py b/sympy/core/parameters.py\nnew file mode 100644\n--- /dev/null\n+++ b/sympy/core/parameters.py\n@@ -0,0 +1,128 @@\n+\"\"\"Thread-safe global parameters\"\"\"\n+\n+from .cache import clear_cache\n+from contextlib import contextmanager\n+from threading import local\n+\n+class _global_parameters(local):\n+    \"\"\"\n+    Thread-local global parameters.\n+\n+    Explanation\n+    ===========\n+\n+    This class generates thread-local container for SymPy's global parameters.\n+    Every global parameters must be passed as keyword argument when generating\n+    its instance.\n+    A variable, `global_parameters` is provided as default instance for this class.\n+\n+    WARNING! Although the global parameters are thread-local, SymPy's cache is not\n+    by now.\n+    This may lead to undesired result in multi-threading operations.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.abc import x\n+    >>> from sympy.core.cache import clear_cache\n+    >>> from sympy.core.parameters import global_parameters as gp\n+\n+    >>> gp.evaluate\n+    True\n+    >>> x+x\n+    2*x\n+\n+    >>> log = []\n+    >>> def f():\n+    ...     clear_cache()\n+    ...     gp.evaluate = False\n+    ...     log.append(x+x)\n+    ...     clear_cache()\n+    >>> import threading\n+    >>> thread = threading.Thread(target=f)\n+    >>> thread.start()\n+    >>> thread.join()\n+\n+    >>> print(log)\n+    [x + x]\n+\n+    >>> gp.evaluate\n+    True\n+    >>> x+x\n+    2*x\n+\n+    References\n+    ==========\n+\n+    .. [1] https://docs.python.org/3/library/threading.html\n+\n+    \"\"\"\n+    def __init__(self, **kwargs):\n+        self.__dict__.update(kwargs)\n+\n+    def __setattr__(self, name, value):\n+        if getattr(self, name) != value:\n+            clear_cache()\n+        return super(_global_parameters, self).__setattr__(name, value)\n+\n+global_parameters = _global_parameters(evaluate=True, distribute=True)\n+\n+@contextmanager\n+def evaluate(x):\n+    \"\"\" Control automatic evaluation\n+\n+    This context manager controls whether or not all SymPy functions evaluate\n+    by default.\n+\n+    Note that much of SymPy expects evaluated expressions.  This functionality\n+    is experimental and is unlikely to function as intended on large\n+    expressions.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.abc import x\n+    >>> from sympy.core.parameters import evaluate\n+    >>> print(x + x)\n+    2*x\n+    >>> with evaluate(False):\n+    ...     print(x + x)\n+    x + x\n+    \"\"\"\n+\n+    old = global_parameters.evaluate\n+\n+    try:\n+        global_parameters.evaluate = x\n+        yield\n+    finally:\n+        global_parameters.evaluate = old\n+\n+\n+@contextmanager\n+def distribute(x):\n+    \"\"\" Control automatic distribution of Number over Add\n+\n+    This context manager controls whether or not Mul distribute Number over\n+    Add. Plan is to avoid distributing Number over Add in all of sympy. Once\n+    that is done, this contextmanager will be removed.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.abc import x\n+    >>> from sympy.core.parameters import distribute\n+    >>> print(2*(x + 1))\n+    2*x + 2\n+    >>> with distribute(False):\n+    ...     print(2*(x + 1))\n+    2*(x + 1)\n+    \"\"\"\n+\n+    old = global_parameters.distribute\n+\n+    try:\n+        global_parameters.distribute = x\n+        yield\n+    finally:\n+        global_parameters.distribute = old\ndiff --git a/sympy/core/power.py b/sympy/core/power.py\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -11,7 +11,7 @@\n     expand_mul)\n from .logic import fuzzy_bool, fuzzy_not, fuzzy_and\n from .compatibility import as_int, range\n-from .evaluate import global_evaluate\n+from .parameters import global_parameters\n from sympy.utilities.iterables import sift\n \n from mpmath.libmp import sqrtrem as mpmath_sqrtrem\n@@ -257,7 +257,7 @@ class Pow(Expr):\n     @cacheit\n     def __new__(cls, b, e, evaluate=None):\n         if evaluate is None:\n-            evaluate = global_evaluate[0]\n+            evaluate = global_parameters.evaluate\n         from sympy.functions.elementary.exponential import exp_polar\n \n         b = _sympify(b)\ndiff --git a/sympy/core/relational.py b/sympy/core/relational.py\n--- a/sympy/core/relational.py\n+++ b/sympy/core/relational.py\n@@ -8,7 +8,7 @@\n from .expr import Expr\n from .evalf import EvalfMixin\n from .sympify import _sympify\n-from .evaluate import global_evaluate\n+from .parameters import global_parameters\n \n from sympy.logic.boolalg import Boolean, BooleanAtom\n \n@@ -483,7 +483,7 @@ def __new__(cls, lhs, rhs=None, **options):\n         lhs = _sympify(lhs)\n         rhs = _sympify(rhs)\n \n-        evaluate = options.pop('evaluate', global_evaluate[0])\n+        evaluate = options.pop('evaluate', global_parameters.evaluate)\n \n         if evaluate:\n             # If one expression has an _eval_Eq, return its results.\n@@ -713,7 +713,7 @@ def __new__(cls, lhs, rhs, **options):\n         lhs = _sympify(lhs)\n         rhs = _sympify(rhs)\n \n-        evaluate = options.pop('evaluate', global_evaluate[0])\n+        evaluate = options.pop('evaluate', global_parameters.evaluate)\n \n         if evaluate:\n             is_equal = Equality(lhs, rhs)\n@@ -760,7 +760,7 @@ def __new__(cls, lhs, rhs, **options):\n         lhs = _sympify(lhs)\n         rhs = _sympify(rhs)\n \n-        evaluate = options.pop('evaluate', global_evaluate[0])\n+        evaluate = options.pop('evaluate', global_parameters.evaluate)\n \n         if evaluate:\n             # First we invoke the appropriate inequality method of `lhs`\ndiff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -6,7 +6,7 @@\n \n from .core import all_classes as sympy_classes\n from .compatibility import iterable, string_types, range\n-from .evaluate import global_evaluate\n+from .parameters import global_parameters\n \n \n class SympifyError(ValueError):\n@@ -288,10 +288,7 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n             return a\n \n     if evaluate is None:\n-        if global_evaluate[0] is False:\n-            evaluate = global_evaluate[0]\n-        else:\n-            evaluate = True\n+        evaluate = global_parameters.evaluate\n \n     # Support for basic numpy datatypes\n     # Note that this check exists to avoid importing NumPy when not necessary\ndiff --git a/sympy/geometry/ellipse.py b/sympy/geometry/ellipse.py\n--- a/sympy/geometry/ellipse.py\n+++ b/sympy/geometry/ellipse.py\n@@ -10,7 +10,7 @@\n \n from sympy import Expr, Eq\n from sympy.core import S, pi, sympify\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n from sympy.core.logic import fuzzy_bool\n from sympy.core.numbers import Rational, oo\n from sympy.core.compatibility import ordered\n@@ -1546,7 +1546,7 @@ class Circle(Ellipse):\n     def __new__(cls, *args, **kwargs):\n         from sympy.geometry.util import find\n         from .polygon import Triangle\n-        evaluate = kwargs.get('evaluate', global_evaluate[0])\n+        evaluate = kwargs.get('evaluate', global_parameters.evaluate)\n         if len(args) == 1 and isinstance(args[0], (Expr, Eq)):\n             x = kwargs.get('x', 'x')\n             y = kwargs.get('y', 'y')\ndiff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -30,7 +30,7 @@\n from sympy.functions.elementary.complexes import im\n from sympy.matrices import Matrix\n from sympy.core.numbers import Float\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n from sympy.core.add import Add\n from sympy.utilities.iterables import uniq\n from sympy.utilities.misc import filldedent, func_name, Undecidable\n@@ -106,7 +106,7 @@ class Point(GeometryEntity):\n     is_Point = True\n \n     def __new__(cls, *args, **kwargs):\n-        evaluate = kwargs.get('evaluate', global_evaluate[0])\n+        evaluate = kwargs.get('evaluate', global_parameters.evaluate)\n         on_morph = kwargs.get('on_morph', 'ignore')\n \n         # unpack into coords\ndiff --git a/sympy/series/sequences.py b/sympy/series/sequences.py\n--- a/sympy/series/sequences.py\n+++ b/sympy/series/sequences.py\n@@ -6,7 +6,7 @@\n                                       is_sequence, iterable, ordered)\n from sympy.core.containers import Tuple\n from sympy.core.decorators import call_highest_priority\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n from sympy.core.function import UndefinedFunction\n from sympy.core.mul import Mul\n from sympy.core.numbers import Integer\n@@ -1005,7 +1005,7 @@ class SeqAdd(SeqExprOp):\n     \"\"\"\n \n     def __new__(cls, *args, **kwargs):\n-        evaluate = kwargs.get('evaluate', global_evaluate[0])\n+        evaluate = kwargs.get('evaluate', global_parameters.evaluate)\n \n         # flatten inputs\n         args = list(args)\n@@ -1114,7 +1114,7 @@ class SeqMul(SeqExprOp):\n     \"\"\"\n \n     def __new__(cls, *args, **kwargs):\n-        evaluate = kwargs.get('evaluate', global_evaluate[0])\n+        evaluate = kwargs.get('evaluate', global_parameters.evaluate)\n \n         # flatten inputs\n         args = list(args)\ndiff --git a/sympy/sets/powerset.py b/sympy/sets/powerset.py\n--- a/sympy/sets/powerset.py\n+++ b/sympy/sets/powerset.py\n@@ -1,7 +1,7 @@\n from __future__ import print_function, division\n \n from sympy.core.decorators import _sympifyit\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n from sympy.core.logic import fuzzy_bool\n from sympy.core.singleton import S\n from sympy.core.sympify import _sympify\n@@ -71,7 +71,10 @@ class PowerSet(Set):\n \n     .. [2] https://en.wikipedia.org/wiki/Axiom_of_power_set\n     \"\"\"\n-    def __new__(cls, arg, evaluate=global_evaluate[0]):\n+    def __new__(cls, arg, evaluate=None):\n+        if evaluate is None:\n+            evaluate=global_parameters.evaluate\n+\n         arg = _sympify(arg)\n \n         if not isinstance(arg, Set):\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -11,7 +11,7 @@\n from sympy.core.decorators import (deprecated, sympify_method_args,\n     sympify_return)\n from sympy.core.evalf import EvalfMixin\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n from sympy.core.expr import Expr\n from sympy.core.logic import fuzzy_bool, fuzzy_or, fuzzy_and, fuzzy_not\n from sympy.core.numbers import Float\n@@ -1172,7 +1172,7 @@ def zero(self):\n         return S.UniversalSet\n \n     def __new__(cls, *args, **kwargs):\n-        evaluate = kwargs.get('evaluate', global_evaluate[0])\n+        evaluate = kwargs.get('evaluate', global_parameters.evaluate)\n \n         # flatten inputs to merge intersections and iterables\n         args = _sympify(args)\n@@ -1345,7 +1345,7 @@ def zero(self):\n         return S.EmptySet\n \n     def __new__(cls, *args, **kwargs):\n-        evaluate = kwargs.get('evaluate', global_evaluate[0])\n+        evaluate = kwargs.get('evaluate', global_parameters.evaluate)\n \n         # flatten inputs to merge intersections and iterables\n         args = list(ordered(set(_sympify(args))))\n@@ -1767,7 +1767,7 @@ class FiniteSet(Set, EvalfMixin):\n     is_finite_set = True\n \n     def __new__(cls, *args, **kwargs):\n-        evaluate = kwargs.get('evaluate', global_evaluate[0])\n+        evaluate = kwargs.get('evaluate', global_parameters.evaluate)\n         if evaluate:\n             args = list(map(sympify, args))\n \ndiff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -7,7 +7,7 @@\n from sympy.core import expand_power_base, sympify, Add, S, Mul, Derivative, Pow, symbols, expand_mul\n from sympy.core.add import _unevaluated_Add\n from sympy.core.compatibility import iterable, ordered, default_sort_key\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n from sympy.core.exprtools import Factors, gcd_terms\n from sympy.core.function import _mexpand\n from sympy.core.mul import _keep_coeff, _unevaluated_Mul\n@@ -163,7 +163,7 @@ def collect(expr, syms, func=None, evaluate=None, exact=False, distribute_order_\n     syms = list(syms) if iterable(syms) else [syms]\n \n     if evaluate is None:\n-        evaluate = global_evaluate[0]\n+        evaluate = global_parameters.evaluate\n \n     def make_expression(terms):\n         product = []\n@@ -496,7 +496,7 @@ def collect_sqrt(expr, evaluate=None):\n     collect, collect_const, rcollect\n     \"\"\"\n     if evaluate is None:\n-        evaluate = global_evaluate[0]\n+        evaluate = global_parameters.evaluate\n     # this step will help to standardize any complex arguments\n     # of sqrts\n     coeff, expr = expr.as_content_primitive()\ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -6,7 +6,7 @@\n                         expand_func, Function, Dummy, Expr, factor_terms,\n                         expand_power_exp, Eq)\n from sympy.core.compatibility import iterable, ordered, range, as_int\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n from sympy.core.function import expand_log, count_ops, _mexpand, _coeff_isneg, \\\n     nfloat, expand_mul, expand_multinomial\n from sympy.core.numbers import Float, I, pi, Rational, Integer\n@@ -378,7 +378,7 @@ def signsimp(expr, evaluate=None):\n \n     \"\"\"\n     if evaluate is None:\n-        evaluate = global_evaluate[0]\n+        evaluate = global_parameters.evaluate\n     expr = sympify(expr)\n     if not isinstance(expr, (Expr, Relational)) or expr.is_Atom:\n         return expr\ndiff --git a/sympy/stats/symbolic_probability.py b/sympy/stats/symbolic_probability.py\n--- a/sympy/stats/symbolic_probability.py\n+++ b/sympy/stats/symbolic_probability.py\n@@ -2,7 +2,7 @@\n \n from sympy import Expr, Add, Mul, S, Integral, Eq, Sum, Symbol\n from sympy.core.compatibility import default_sort_key\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n from sympy.core.sympify import _sympify\n from sympy.stats import variance, covariance\n from sympy.stats.rv import RandomSymbol, probability, expectation\n@@ -324,7 +324,7 @@ def __new__(cls, arg1, arg2, condition=None, **kwargs):\n         arg1 = _sympify(arg1)\n         arg2 = _sympify(arg2)\n \n-        if kwargs.pop('evaluate', global_evaluate[0]):\n+        if kwargs.pop('evaluate', global_parameters.evaluate):\n             arg1, arg2 = sorted([arg1, arg2], key=default_sort_key)\n \n         if condition is None:\ndiff --git a/sympy/tensor/functions.py b/sympy/tensor/functions.py\n--- a/sympy/tensor/functions.py\n+++ b/sympy/tensor/functions.py\n@@ -1,6 +1,6 @@\n from sympy import Expr, S, Mul, sympify\n from sympy.core.compatibility import Iterable\n-from sympy.core.evaluate import global_evaluate\n+from sympy.core.parameters import global_parameters\n \n \n class TensorProduct(Expr):\n@@ -15,7 +15,7 @@ def __new__(cls, *args, **kwargs):\n         from sympy.strategies import flatten\n \n         args = [sympify(arg) for arg in args]\n-        evaluate = kwargs.get(\"evaluate\", global_evaluate[0])\n+        evaluate = kwargs.get(\"evaluate\", global_parameters.evaluate)\n \n         if not evaluate:\n             obj = Expr.__new__(cls, *args)\n",
  "test_patch": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -3,7 +3,7 @@\n         oo, zoo, Integer, sign, im, nan, Dummy, factorial, comp, floor\n )\n from sympy.core.compatibility import long, range\n-from sympy.core.evaluate import distribute\n+from sympy.core.parameters import distribute\n from sympy.core.expr import unchanged\n from sympy.utilities.iterables import cartes\n from sympy.utilities.pytest import XFAIL, raises\ndiff --git a/sympy/core/tests/test_evaluate.py b/sympy/core/tests/test_parameters.py\nsimilarity index 98%\nrename from sympy/core/tests/test_evaluate.py\nrename to sympy/core/tests/test_parameters.py\n--- a/sympy/core/tests/test_evaluate.py\n+++ b/sympy/core/tests/test_parameters.py\n@@ -1,5 +1,5 @@\n from sympy.abc import x, y\n-from sympy.core.evaluate import evaluate\n+from sympy.core.parameters import evaluate\n from sympy.core import Mul, Add, Pow, S\n from sympy import sqrt, oo\n \n",
  "problem_statement": "Suggestion on `core.evaluate` module\nAs I understand, `core.evaluate` module is first developed to handle the global value of `evaluate` parameter. Then, it is extended to handle `distribute` parameter as well.\r\nSince more global parameters might appear in the future, I think this module can be renamed to `core.parameters` for clarity.\r\n\r\nBesides that, if more parameters are added, it will be annoying to have all `global_foo[0]`, `global_bar[0]`, and so on. I am thinking of a dict-like handler named `global_parameters` to manage every global parameters. It will behave like this:\r\n\r\n1. Its `__getitem__()` method returns `global_foo` object.\r\n```\r\n>>> global_parameters\r\n{'evaluate': [True], 'distribute': [True]}\r\n>>> global_parameters['evaluate']\r\n[True]\r\n```\r\n\r\n2. It has `foo` property that returns or sets the value of global `foo`.\r\n```\r\n>>> global_parameters.evaluate\r\nTrue\r\n>>> global_parameters.evaluate = False\r\n>>> global_parameters.evaluate\r\nFalse\r\n>>> global_parameters\r\n{'evaluate': [False], 'distribute': [True]}\r\n```\r\n\r\n3. Its properties are not `bool` - They are callable new classes so that they can be used as context manager.\r\n```\r\n>>> from sympy.abc import x\r\n>>> with global_parameters.evaluate(False):\r\n         print(x + x)\r\nx + x\r\n```\r\n\r\nI have already written a code which satisfies suggestion 1 and 2. It seems to be working well. How does everyone think about it?\n",
  "hints_text": "Is your code thread-safe?\n> Is your code thread-safe?\r\n\r\nI didn't check it.\r\n`global_parameters` is singleton and relegates every operations to `global_foo` it contains, so hopefully it will cause no problem as long as `global_foo` does the job right.\r\n\r\nCan you suggest the way to check its thread safety?\nWe should really use thread local storage rather than global variables. Mutable global variables that are not thread-local are not thread-safe.\n> We should really use thread local storage rather than global variables. Mutable global variables that are not thread-local are not thread-safe.\r\n\r\nThanks. I didn't know about thread safety before. I'm curious: does the current approach in `core.evaluate` satisfies thread safety? How does it achieve this?\r\nAlso, then how can I ensure the thread safety of `global_parameters`? Will blocking suggestion 2 (make the global parameter mutable by implementing setter) do? \nI don't think that the current approach is thread-safe because it just uses a list. That list will be shared between threads so if one thread sets global evaluate to True then it will affect the other threads. To be thread-safe this global needs to use thread-local storage.",
  "created_at": "2020-01-01T16:58:50Z",
  "version": "1.6",
  "FAIL_TO_PASS": "[\"test_Add_Mul_is_finite\", \"test_Add_Mul_is_integer\", \"test_Add_as_coeff_mul\", \"test_Add_as_content_primitive\", \"test_Add_is_comparable\", \"test_Add_is_even_odd\", \"test_Add_is_irrational\", \"test_Add_is_negative_positive\", \"test_Add_is_nonpositive_nonnegative\", \"test_Add_is_positive_2\", \"test_Add_is_rational\", \"test_Add_is_zero\", \"test_Mod\", \"test_Mod_Pow\", \"test_Mod_is_integer\", \"test_Mod_is_nonposneg\", \"test_Mul_as_content_primitive\", \"test_Mul_does_not_cancel_infinities\", \"test_Mul_does_not_distribute_infinity\", \"test_Mul_doesnt_expand_exp\", \"test_Mul_hermitian_antihermitian\", \"test_Mul_is_comparable\", \"test_Mul_is_even_odd\", \"test_Mul_is_imaginary_real\", \"test_Mul_is_negative_positive\", \"test_Mul_is_negative_positive_2\", \"test_Mul_is_nonpositive_nonnegative\", \"test_Mul_is_rational\", \"test_Mul_with_zero_infinite\", \"test_Pow_as_coeff_mul_doesnt_expand\", \"test_Pow_as_content_primitive\", \"test_Pow_is_comparable\", \"test_Pow_is_even_odd\", \"test_Pow_is_finite\", \"test_Pow_is_integer\", \"test_Pow_is_negative_positive\", \"test_Pow_is_nonpositive_nonnegative\", \"test_Pow_is_real\", \"test_Pow_is_zero\", \"test_Rational_as_content_primitive\", \"test_Symbol\", \"test_add\", \"test_add_flatten\", \"test_arit0\", \"test_bug1\", \"test_bug3\", \"test_denest_add_mul\", \"test_div\", \"test_divmod\", \"test_evenness_in_ternary_integer_product_with_even\", \"test_float_int_round\", \"test_issue_14392\", \"test_issue_3514\", \"test_issue_3531b\", \"test_issue_5126\", \"test_issue_5160_6087_6089_6090\", \"test_issue_5460\", \"test_issue_5919\", \"test_issue_6001\", \"test_issue_6040\", \"test_issue_6077\", \"test_issue_6082\", \"test_issue_6611a\", \"test_issue_8247_8354\", \"test_make_args\", \"test_mod_pow\", \"test_mul_coeff\", \"test_mul_flatten_oo\", \"test_mul_zero_detection\", \"test_ncmul\", \"test_ncpow\", \"test_oddness_in_ternary_integer_product_with_even\", \"test_polar\", \"test_pow\", \"test_pow2\", \"test_pow3\", \"test_pow_E\", \"test_pow_im\", \"test_pow_issue_3516\", \"test_powerbug\", \"test_product_irrational\", \"test_real_Pow\", \"test_real_mul\", \"test_suppressed_evaluation\"]",
  "PASS_TO_PASS": "[]",
  "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da",
  "patch_files": [
    "sympy/combinatorics/permutations.py",
    "sympy/core/__init__.py",
    "sympy/core/add.py",
    "ev/null",
    "sympy/core/function.py",
    "sympy/core/mul.py",
    "sympy/core/numbers.py",
    "sympy/core/operations.py",
    "sympy/core/parameters.py",
    "sympy/core/power.py",
    "sympy/core/relational.py",
    "sympy/core/sympify.py",
    "sympy/geometry/ellipse.py",
    "sympy/geometry/point.py",
    "sympy/series/sequences.py",
    "sympy/sets/powerset.py",
    "sympy/sets/sets.py",
    "sympy/simplify/radsimp.py",
    "sympy/simplify/simplify.py",
    "sympy/stats/symbolic_probability.py",
    "sympy/tensor/functions.py"
  ],
  "test_patch_files": [
    "sympy/core/tests/test_arit.py",
    "sympy/core/tests/test_parameters.py"
  ],
  "patch_diff_details": {
    "sympy/combinatorics/permutations.py": {
      "diffs": [
        {
          "start_line_old": 7,
          "end_line_old": 7
        },
        {
          "start_line_old": 3005,
          "end_line_old": 3005
        }
      ]
    },
    "sympy/core/__init__.py": {
      "diffs": [
        {
          "start_line_old": 29,
          "end_line_old": 29,
          "file_pos": 12,
          "file_context_length": 104403,
          "pos": 20,
          "context_length": 17332
        }
      ]
    },
    "sympy/core/add.py": {
      "diffs": [
        {
          "start_line_old": 8,
          "end_line_old": 8,
          "file_pos": 10,
          "file_context_length": 100433,
          "pos": 17,
          "context_length": 16218
        },
        {
          "start_line_old": 1088,
          "end_line_old": 1088,
          "file_pos": 10,
          "file_context_length": 100433,
          "closest_snippet_id": "/tmp/repos/sympy/sympy/core/add.py_Add._eval_is_polynomial_Add._eval_is_infinite.3.1",
          "closest_snippet_line_distance": 551
        }
      ]
    },
    "sympy/core/evaluate.py": {
      "diffs": [
        {
          "start_line_old": 1,
          "end_line_old": 72,
          "file_pos": 1,
          "file_context_length": 419,
          "closest_snippet_id": "/tmp/repos/sympy/sympy/core/evaluate.py_distribute_",
          "closest_snippet_line_distance": 1
        }
      ]
    },
    "sympy/core/function.py": {
      "diffs": [
        {
          "start_line_old": 49,
          "end_line_old": 49,
          "file_pos": 2,
          "file_context_length": 28016,
          "closest_snippet_id": "/tmp/repos/sympy/sympy/core/function.py_Subs.evalf_Subs._hashable_content.1.1",
          "closest_snippet_line_distance": 2220,
          "pos": 12,
          "context_length": 9579
        },
        {
          "start_line_old": 279,
          "end_line_old": 279,
          "file_pos": 2,
          "file_context_length": 28016,
          "closest_snippet_id": "/tmp/repos/sympy/sympy/core/function.py_Function._eval_nseries.7_Function._eval_nseries.16.1",
          "closest_snippet_line_distance": 425
        },
        {
          "start_line_old": 472,
          "end_line_old": 472,
          "file_pos": 2,
          "file_context_length": 28016,
          "closest_snippet_id": "/tmp/repos/sympy/sympy/core/function.py_1_26",
          "closest_snippet_line_distance": 412,
          "pos": 13,
          "context_length": 9920
        }
      ]
    },
    "sympy/core/mul.py": {
      "diffs": [
        {
          "start_line_old": 15,
          "end_line_old": 15
        },
        {
          "start_line_old": 205,
          "end_line_old": 205
        },
        {
          "start_line_old": 629,
          "end_line_old": 629
        }
      ]
    },
    "sympy/core/numbers.py": {
      "diffs": [
        {
          "start_line_old": 33,
          "end_line_old": 33
        },
        {
          "start_line_old": 714,
          "end_line_old": 714
        },
        {
          "start_line_old": 725,
          "end_line_old": 725
        },
        {
          "start_line_old": 736,
          "end_line_old": 736
        },
        {
          "start_line_old": 759,
          "end_line_old": 759
        },
        {
          "start_line_old": 1294,
          "end_line_old": 1315
        },
        {
          "start_line_old": 1324,
          "end_line_old": 1341
        },
        {
          "start_line_old": 1699,
          "end_line_old": 1699
        },
        {
          "start_line_old": 1714,
          "end_line_old": 1714
        },
        {
          "start_line_old": 1726,
          "end_line_old": 1726
        },
        {
          "start_line_old": 1738,
          "end_line_old": 1738
        },
        {
          "start_line_old": 1752,
          "end_line_old": 1752
        },
        {
          "start_line_old": 1767,
          "end_line_old": 1767
        },
        {
          "start_line_old": 1781,
          "end_line_old": 1781
        },
        {
          "start_line_old": 2142,
          "end_line_old": 2149
        },
        {
          "start_line_old": 2163,
          "end_line_old": 2163
        },
        {
          "start_line_old": 2175,
          "end_line_old": 2175
        },
        {
          "start_line_old": 2184,
          "end_line_old": 2184
        },
        {
          "start_line_old": 2195,
          "end_line_old": 2195
        },
        {
          "start_line_old": 2204,
          "end_line_old": 2204
        },
        {
          "start_line_old": 2215,
          "end_line_old": 2215
        },
        {
          "start_line_old": 2224,
          "end_line_old": 2224
        },
        {
          "start_line_old": 2233,
          "end_line_old": 2233
        },
        {
          "start_line_old": 2848,
          "end_line_old": 2848
        },
        {
          "start_line_old": 2857,
          "end_line_old": 2857
        },
        {
          "start_line_old": 2869,
          "end_line_old": 2869
        },
        {
          "start_line_old": 2880,
          "end_line_old": 2880
        },
        {
          "start_line_old": 3016,
          "end_line_old": 3016
        },
        {
          "start_line_old": 3025,
          "end_line_old": 3025
        },
        {
          "start_line_old": 3037,
          "end_line_old": 3037
        },
        {
          "start_line_old": 3048,
          "end_line_old": 3048
        }
      ]
    },
    "sympy/core/operations.py": {
      "diffs": [
        {
          "start_line_old": 8,
          "end_line_old": 8
        },
        {
          "start_line_old": 41,
          "end_line_old": 41
        }
      ]
    },
    "sympy/core/parameters.py": {
      "diffs": [
        {
          "start_line_old": 0,
          "end_line_old": 0
        }
      ]
    },
    "sympy/core/power.py": {
      "diffs": [
        {
          "start_line_old": 14,
          "end_line_old": 14,
          "file_pos": 15,
          "file_context_length": 178093,
          "closest_snippet_id": "/tmp/repos/sympy/sympy/core/power.py_Pow._eval_subs.3_Pow._eval_subs.7.4.4.1",
          "closest_snippet_line_distance": 769
        },
        {
          "start_line_old": 260,
          "end_line_old": 260,
          "file_pos": 15,
          "file_context_length": 178093,
          "closest_snippet_id": "/tmp/repos/sympy/sympy/core/power.py_Pow._eval_subs.3_Pow._eval_subs.7.4.4.1",
          "closest_snippet_line_distance": 523
        }
      ]
    },
    "sympy/core/relational.py": {
      "diffs": [
        {
          "start_line_old": 11,
          "end_line_old": 11
        },
        {
          "start_line_old": 486,
          "end_line_old": 486
        },
        {
          "start_line_old": 716,
          "end_line_old": 716
        },
        {
          "start_line_old": 763,
          "end_line_old": 763
        }
      ]
    },
    "sympy/core/sympify.py": {
      "diffs": [
        {
          "start_line_old": 9,
          "end_line_old": 9,
          "file_pos": 6,
          "file_context_length": 50239,
          "closest_snippet_id": "/tmp/repos/sympy/sympy/core/sympify.py_sympify.1_sympify.1",
          "closest_snippet_line_distance": 71
        },
        {
          "start_line_old": 291,
          "end_line_old": 294,
          "file_pos": 6,
          "file_context_length": 50239,
          "closest_snippet_id": "/tmp/repos/sympy/sympy/core/sympify.py_sympify.1_sympify.1",
          "closest_snippet_line_distance": 30
        }
      ]
    },
    "sympy/geometry/ellipse.py": {
      "diffs": [
        {
          "start_line_old": 13,
          "end_line_old": 13
        },
        {
          "start_line_old": 1549,
          "end_line_old": 1549
        }
      ]
    },
    "sympy/geometry/point.py": {
      "diffs": [
        {
          "start_line_old": 33,
          "end_line_old": 33
        },
        {
          "start_line_old": 109,
          "end_line_old": 109
        }
      ]
    },
    "sympy/series/sequences.py": {
      "diffs": [
        {
          "start_line_old": 9,
          "end_line_old": 9
        },
        {
          "start_line_old": 1008,
          "end_line_old": 1008
        },
        {
          "start_line_old": 1117,
          "end_line_old": 1117
        }
      ]
    },
    "sympy/sets/powerset.py": {
      "diffs": [
        {
          "start_line_old": 4,
          "end_line_old": 4
        },
        {
          "start_line_old": 74,
          "end_line_old": 74
        }
      ]
    },
    "sympy/sets/sets.py": {
      "diffs": [
        {
          "start_line_old": 14,
          "end_line_old": 14
        },
        {
          "start_line_old": 1175,
          "end_line_old": 1175
        },
        {
          "start_line_old": 1348,
          "end_line_old": 1348
        },
        {
          "start_line_old": 1770,
          "end_line_old": 1770
        }
      ]
    },
    "sympy/simplify/radsimp.py": {
      "diffs": [
        {
          "start_line_old": 10,
          "end_line_old": 10
        },
        {
          "start_line_old": 166,
          "end_line_old": 166
        },
        {
          "start_line_old": 499,
          "end_line_old": 499
        }
      ]
    },
    "sympy/simplify/simplify.py": {
      "diffs": [
        {
          "start_line_old": 9,
          "end_line_old": 9
        },
        {
          "start_line_old": 381,
          "end_line_old": 381
        }
      ]
    },
    "sympy/stats/symbolic_probability.py": {
      "diffs": [
        {
          "start_line_old": 5,
          "end_line_old": 5
        },
        {
          "start_line_old": 327,
          "end_line_old": 327
        }
      ]
    },
    "sympy/tensor/functions.py": {
      "diffs": [
        {
          "start_line_old": 3,
          "end_line_old": 3
        },
        {
          "start_line_old": 18,
          "end_line_old": 18
        }
      ]
    }
  },
  "vectors": 8490,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/sympy/sympy/core/evaluate.py_clear_cache_evaluate.5",
      "distance": 0.9615936279296875,
      "file_path": "sympy/core/evaluate.py",
      "start_line": 1,
      "end_line": 45,
      "tokens": 249,
      "context_length": 249,
      "file_pos": 1
    },
    {
      "position": 2,
      "id": "/tmp/repos/sympy/sympy/core/function.py_expand.1_expand.9.1",
      "distance": 1.0604002475738525,
      "file_path": "sympy/core/function.py",
      "start_line": 2453,
      "end_line": 2778,
      "tokens": 3102,
      "context_length": 3351,
      "file_pos": 2
    },
    {
      "position": 3,
      "id": "/tmp/repos/sympy/sympy/plotting/experimental_lambdify.py_1_55",
      "distance": 1.064200758934021,
      "file_path": "sympy/plotting/experimental_lambdify.py",
      "start_line": 1,
      "end_line": 76,
      "tokens": 868,
      "context_length": 4219
    },
    {
      "position": 4,
      "id": "/tmp/repos/sympy/sympy/core/function.py_Subs.evalf_Subs._hashable_content.1.1",
      "distance": 1.0721406936645508,
      "file_path": "sympy/core/function.py",
      "start_line": 2269,
      "end_line": 2315,
      "tokens": 313,
      "context_length": 4532,
      "file_pos": 3
    },
    {
      "position": 5,
      "id": "/tmp/repos/sympy/sympy/functions/special/hyper.py_hyper.__new___hyper._eval_expand_func.3.1",
      "distance": 1.0912022590637207,
      "file_path": "sympy/functions/special/hyper.py",
      "start_line": 185,
      "end_line": 211,
      "tokens": 321,
      "context_length": 4853
    },
    {
      "position": 6,
      "id": "/tmp/repos/sympy/sympy/core/evaluate.py_distribute_",
      "distance": 1.095029592514038,
      "file_path": "sympy/core/evaluate.py",
      "start_line": 48,
      "end_line": 73,
      "tokens": 168,
      "context_length": 5021,
      "file_pos": 4
    },
    {
      "position": 7,
      "id": "/tmp/repos/sympy/sympy/core/mod.py_Mod.eval.18_Mod.eval.26.1",
      "distance": 1.1179568767547607,
      "file_path": "sympy/core/mod.py",
      "start_line": 165,
      "end_line": 209,
      "tokens": 416,
      "context_length": 5437
    },
    {
      "position": 8,
      "id": "/tmp/repos/sympy/sympy/core/sympify.py_sympify.1_sympify.1",
      "distance": 1.130738377571106,
      "file_path": "sympy/core/sympify.py",
      "start_line": 80,
      "end_line": 264,
      "tokens": 1781,
      "context_length": 7218,
      "file_pos": 6
    },
    {
      "position": 9,
      "id": "/tmp/repos/sympy/sympy/utilities/lambdify.py__import_lambdify",
      "distance": 1.1361110210418701,
      "file_path": "sympy/utilities/lambdify.py",
      "start_line": 107,
      "end_line": 825,
      "tokens": 513,
      "context_length": 7731
    },
    {
      "position": 10,
      "id": "/tmp/repos/sympy/sympy/core/basic.py_Basic.subs.2_Basic.subs.11.3.3.1",
      "distance": 1.1407641172409058,
      "file_path": "sympy/core/basic.py",
      "start_line": 892,
      "end_line": 976,
      "tokens": 726,
      "context_length": 8457
    },
    {
      "position": 11,
      "id": "/tmp/repos/sympy/sympy/core/evalf.py__create_evalf_table__create_evalf_table.evalf_table.1",
      "distance": 1.1438066959381104,
      "file_path": "sympy/core/evalf.py",
      "start_line": 1249,
      "end_line": 1305,
      "tokens": 636,
      "context_length": 9093
    },
    {
      "position": 12,
      "id": "/tmp/repos/sympy/sympy/core/function.py_1_26",
      "distance": 1.1441501379013062,
      "file_path": "sympy/core/function.py",
      "start_line": 1,
      "end_line": 60,
      "tokens": 486,
      "context_length": 9579,
      "file_pos": 9
    },
    {
      "position": 13,
      "id": "/tmp/repos/sympy/sympy/core/function.py_Function.__new___Function.__new__.2.7.1",
      "distance": 1.1447778940200806,
      "file_path": "sympy/core/function.py",
      "start_line": 450,
      "end_line": 480,
      "tokens": 341,
      "context_length": 9920,
      "file_pos": 9
    },
    {
      "position": 14,
      "id": "/tmp/repos/sympy/sympy/utilities/lambdify.py_lambdify.1_lambdify.1",
      "distance": 1.1451191902160645,
      "file_path": "sympy/utilities/lambdify.py",
      "start_line": 173,
      "end_line": 682,
      "tokens": 5180,
      "context_length": 15100
    },
    {
      "position": 15,
      "id": "/tmp/repos/sympy/sympy/plotting/experimental_lambdify.py_Lambdifier_Lambdifier.18",
      "distance": 1.145151138305664,
      "file_path": "sympy/plotting/experimental_lambdify.py",
      "start_line": 247,
      "end_line": 347,
      "tokens": 832,
      "context_length": 15932
    },
    {
      "position": 16,
      "id": "/tmp/repos/sympy/sympy/core/mod.py_Mod._eval_is_integer_",
      "distance": 1.1473468542099,
      "file_path": "sympy/core/mod.py",
      "start_line": 211,
      "end_line": 228,
      "tokens": 141,
      "context_length": 16073
    },
    {
      "position": 17,
      "id": "/tmp/repos/sympy/sympy/core/add.py_1__addsort.2",
      "distance": 1.1522958278656006,
      "file_path": "sympy/core/add.py",
      "start_line": 1,
      "end_line": 22,
      "tokens": 145,
      "context_length": 16218,
      "file_pos": 10
    },
    {
      "position": 18,
      "id": "/tmp/repos/sympy/sympy/assumptions/sathandlers.py_evaluate_old_assump_CustomLambda.apply.1.1",
      "distance": 1.1529260873794556,
      "file_path": "sympy/assumptions/sathandlers.py",
      "start_line": 225,
      "end_line": 260,
      "tokens": 278,
      "context_length": 16496
    },
    {
      "position": 19,
      "id": "/tmp/repos/sympy/sympy/core/basic.py_Basic.rewrite_Basic.rewrite.2.2.3.2.3.2.1.1",
      "distance": 1.154289722442627,
      "file_path": "sympy/core/basic.py",
      "start_line": 1727,
      "end_line": 1790,
      "tokens": 467,
      "context_length": 16963
    },
    {
      "position": 20,
      "id": "/tmp/repos/sympy/sympy/core/__init__.py_1_",
      "distance": 1.1546916961669922,
      "file_path": "sympy/core/__init__.py",
      "start_line": 1,
      "end_line": 36,
      "tokens": 369,
      "context_length": 17332,
      "file_pos": 12
    },
    {
      "position": 21,
      "id": "/tmp/repos/sympy/sympy/simplify/hyperexpand.py_60__mod1.8.3.1",
      "distance": 1.157611608505249,
      "file_path": "sympy/simplify/hyperexpand.py",
      "start_line": 84,
      "end_line": 96,
      "tokens": 160,
      "context_length": 17492
    },
    {
      "position": 22,
      "id": "/tmp/repos/sympy/sympy/core/expr.py_Expr._expand_hint_Expr._expand_hint.8.1",
      "distance": 1.1599971055984497,
      "file_path": "sympy/core/expr.py",
      "start_line": 3399,
      "end_line": 3427,
      "tokens": 245,
      "context_length": 17737
    },
    {
      "position": 23,
      "id": "/tmp/repos/sympy/sympy/core/function.py_Subs._eval_is_commutative_Subs.doit.7.1",
      "distance": 1.1614054441452026,
      "file_path": "sympy/core/function.py",
      "start_line": 2208,
      "end_line": 2267,
      "tokens": 482,
      "context_length": 18219,
      "file_pos": 14
    },
    {
      "position": 24,
      "id": "/tmp/repos/sympy/sympy/functions/special/hyper.py_meijerg.__new___meijerg.__new__.8.1",
      "distance": 1.164167881011963,
      "file_path": "sympy/functions/special/hyper.py",
      "start_line": 461,
      "end_line": 482,
      "tokens": 271,
      "context_length": 18490
    },
    {
      "position": 25,
      "id": "/tmp/repos/sympy/sympy/core/function.py_Function._should_evalf_Function._should_evalf.9.1",
      "distance": 1.165068507194519,
      "file_path": "sympy/core/function.py",
      "start_line": 482,
      "end_line": 503,
      "tokens": 186,
      "context_length": 18676,
      "file_pos": 14
    },
    {
      "position": 26,
      "id": "/tmp/repos/sympy/sympy/core/power.py_Pow._eval_subs.3_Pow._eval_subs.7.4.4.1",
      "distance": 1.1652677059173584,
      "file_path": "sympy/core/power.py",
      "start_line": 783,
      "end_line": 837,
      "tokens": 645,
      "context_length": 19321,
      "file_pos": 15
    },
    {
      "position": 27,
      "id": "/tmp/repos/sympy/sympy/utilities/lambdify.py_1_41",
      "distance": 1.1676770448684692,
      "file_path": "sympy/utilities/lambdify.py",
      "start_line": 1,
      "end_line": 91,
      "tokens": 658,
      "context_length": 19979
    },
    {
      "position": 28,
      "id": "/tmp/repos/sympy/sympy/functions/special/hyper.py_meijerg._eval_evalf_meijerg._eval_evalf.8",
      "distance": 1.1685736179351807,
      "file_path": "sympy/functions/special/hyper.py",
      "start_line": 633,
      "end_line": 665,
      "tokens": 383,
      "context_length": 20362
    },
    {
      "position": 29,
      "id": "/tmp/repos/sympy/sympy/core/add.py_Add._eval_is_polynomial_Add._eval_is_infinite.3.1",
      "distance": 1.1690268516540527,
      "file_path": "sympy/core/add.py",
      "start_line": 495,
      "end_line": 537,
      "tokens": 503,
      "context_length": 20865,
      "file_pos": 15
    },
    {
      "position": 30,
      "id": "/tmp/repos/sympy/sympy/functions/elementary/piecewise.py_Piecewise.eval_Piecewise.eval.11.2",
      "distance": 1.1741788387298584,
      "file_path": "sympy/functions/elementary/piecewise.py",
      "start_line": 148,
      "end_line": 208,
      "tokens": 542,
      "context_length": 21407
    },
    {
      "position": 31,
      "id": "/tmp/repos/sympy/sympy/core/function.py_Subs._eval_subs_Subs._eval_subs.pt.7.1",
      "distance": 1.1762326955795288,
      "file_path": "sympy/core/function.py",
      "start_line": 2317,
      "end_line": 2339,
      "tokens": 277,
      "context_length": 21684,
      "file_pos": 16
    },
    {
      "position": 32,
      "id": "/tmp/repos/sympy/sympy/core/function.py_Application.eval_Application._eval_subs.1.1.1",
      "distance": 1.1764334440231323,
      "file_path": "sympy/core/function.py",
      "start_line": 318,
      "end_line": 356,
      "tokens": 289,
      "context_length": 21973,
      "file_pos": 16
    },
    {
      "position": 33,
      "id": "/tmp/repos/sympy/sympy/core/function.py_Subs.__new___Subs.__new__.20.1",
      "distance": 1.1765961647033691,
      "file_path": "sympy/core/function.py",
      "start_line": 2144,
      "end_line": 2206,
      "tokens": 564,
      "context_length": 22537,
      "file_pos": 16
    },
    {
      "position": 34,
      "id": "/tmp/repos/sympy/sympy/core/mod.py_Mod.eval.rv_Mod.eval.17",
      "distance": 1.1773838996887207,
      "file_path": "sympy/core/mod.py",
      "start_line": 92,
      "end_line": 164,
      "tokens": 669,
      "context_length": 23206
    },
    {
      "position": 35,
      "id": "/tmp/repos/sympy/sympy/core/symbol.py_Symbol.__xnew___Symbol.as_set.1.1",
      "distance": 1.1780047416687012,
      "file_path": "sympy/core/symbol.py",
      "start_line": 261,
      "end_line": 316,
      "tokens": 409,
      "context_length": 23615
    },
    {
      "position": 36,
      "id": "/tmp/repos/sympy/sympy/utilities/lambdify.py__EvaluatorPrinter._preprocess__EvaluatorPrinter._preprocess.12.1",
      "distance": 1.1785919666290283,
      "file_path": "sympy/utilities/lambdify.py",
      "start_line": 1046,
      "end_line": 1084,
      "tokens": 373,
      "context_length": 23988
    },
    {
      "position": 37,
      "id": "/tmp/repos/sympy/sympy/core/basic.py_Basic.subs_Basic.subs.1",
      "distance": 1.1787745952606201,
      "file_path": "sympy/core/basic.py",
      "start_line": 779,
      "end_line": 891,
      "tokens": 1046,
      "context_length": 25034
    },
    {
      "position": 38,
      "id": "/tmp/repos/sympy/sympy/core/function.py_Function._eval_derivative_Function.as_base_exp.2.1",
      "distance": 1.1862444877624512,
      "file_path": "sympy/core/function.py",
      "start_line": 605,
      "end_line": 628,
      "tokens": 173,
      "context_length": 25207,
      "file_pos": 17
    },
    {
      "position": 39,
      "id": "/tmp/repos/sympy/sympy/core/function.py_Function._eval_nseries.7_Function._eval_nseries.16.1",
      "distance": 1.1862820386886597,
      "file_path": "sympy/core/function.py",
      "start_line": 704,
      "end_line": 746,
      "tokens": 469,
      "context_length": 25676,
      "file_pos": 17
    },
    {
      "position": 40,
      "id": "/tmp/repos/sympy/sympy/concrete/summations.py__eval_matrix_sum_",
      "distance": 1.1864737272262573,
      "file_path": "sympy/concrete/summations.py",
      "start_line": 1303,
      "end_line": 1348,
      "tokens": 359,
      "context_length": 26035
    }
  ],
  "files": [
    {
      "file_path": "sympy/core/evaluate.py",
      "position": 1,
      "tokens": 419,
      "context_length": 419
    },
    {
      "file_path": "sympy/core/function.py",
      "position": 2,
      "tokens": 27597,
      "context_length": 28016
    },
    {
      "file_path": "sympy/plotting/experimental_lambdify.py",
      "position": 3,
      "tokens": 5903,
      "context_length": 33919
    },
    {
      "file_path": "sympy/functions/special/hyper.py",
      "position": 4,
      "tokens": 10311,
      "context_length": 44230
    },
    {
      "file_path": "sympy/core/mod.py",
      "position": 5,
      "tokens": 1736,
      "context_length": 45966
    },
    {
      "file_path": "sympy/core/sympify.py",
      "position": 6,
      "tokens": 4273,
      "context_length": 50239
    },
    {
      "file_path": "sympy/utilities/lambdify.py",
      "position": 7,
      "tokens": 11500,
      "context_length": 61739
    },
    {
      "file_path": "sympy/core/basic.py",
      "position": 8,
      "tokens": 15944,
      "context_length": 77683
    },
    {
      "file_path": "sympy/core/evalf.py",
      "position": 9,
      "tokens": 13734,
      "context_length": 91417
    },
    {
      "file_path": "sympy/core/add.py",
      "position": 10,
      "tokens": 9016,
      "context_length": 100433
    },
    {
      "file_path": "sympy/assumptions/sathandlers.py",
      "position": 11,
      "tokens": 3600,
      "context_length": 104033
    },
    {
      "file_path": "sympy/core/__init__.py",
      "position": 12,
      "tokens": 370,
      "context_length": 104403
    },
    {
      "file_path": "sympy/simplify/hyperexpand.py",
      "position": 13,
      "tokens": 24827,
      "context_length": 129230
    },
    {
      "file_path": "sympy/core/expr.py",
      "position": 14,
      "tokens": 33351,
      "context_length": 162581
    },
    {
      "file_path": "sympy/core/power.py",
      "position": 15,
      "tokens": 15512,
      "context_length": 178093
    },
    {
      "file_path": "sympy/functions/elementary/piecewise.py",
      "position": 16,
      "tokens": 11270,
      "context_length": 189363
    },
    {
      "file_path": "sympy/core/symbol.py",
      "position": 17,
      "tokens": 6609,
      "context_length": 195972
    },
    {
      "file_path": "sympy/concrete/summations.py",
      "position": 18,
      "tokens": 11912,
      "context_length": 207884
    }
  ]
}