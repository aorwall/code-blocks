{
  "instance_id": "sympy__sympy-21527",
  "model_patch": "diff --git a/sympy/polys/constructor.py b/sympy/polys/constructor.py\nindex adcfd13dc3..18ae84bde5 100644\n--- a/sympy/polys/constructor.py\n+++ b/sympy/polys/constructor.py\n@@ -57,9 +57,7 @@ def _construct_simple(coeffs, opt):\n                 # this is a composite domain, e.g. ZZ[X], EX\n                 return None\n \n-    # Use the maximum precision of all coefficients for the RR or CC\n-    # precision\n-    max_prec = max(c._prec for c in float_numbers) if float_numbers else 53\n+    max_prec = 128\n \n     if algebraics:\n         domain, result = _construct_algebraic(coeffs, opt)\n@@ -216,7 +214,7 @@ def _construct_composite(coeffs, opt):\n                     if y.is_Float:\n                         float_numbers.append(y)\n \n-    max_prec = max(c._prec for c in float_numbers) if float_numbers else 53\n+    max_prec = max(c._prec for c in float_numbers) if float_numbers else 128\n \n     if floats and complexes:\n         ground = ComplexField(prec=max_prec)\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "sympy/polys/constructor.py"
  ],
  "repo": "sympy/sympy",
  "base_commit": "31d469a5335c81ec4a437e36a861945a6b43d916",
  "patch": "diff --git a/sympy/polys/constructor.py b/sympy/polys/constructor.py\n--- a/sympy/polys/constructor.py\n+++ b/sympy/polys/constructor.py\n@@ -48,7 +48,7 @@ def _construct_simple(coeffs, opt):\n                         float_numbers.append(x)\n                     if y.is_Float:\n                         float_numbers.append(y)\n-            if is_algebraic(coeff):\n+            elif is_algebraic(coeff):\n                 if floats:\n                     # there are both algebraics and reals -> EX\n                     return False\ndiff --git a/sympy/polys/matrices/ddm.py b/sympy/polys/matrices/ddm.py\n--- a/sympy/polys/matrices/ddm.py\n+++ b/sympy/polys/matrices/ddm.py\n@@ -284,7 +284,9 @@ def applyfunc(self, func, domain):\n     def rref(a):\n         \"\"\"Reduced-row echelon form of a and list of pivots\"\"\"\n         b = a.copy()\n-        pivots = ddm_irref(b)\n+        K = a.domain\n+        partial_pivot = K.is_RealField or K.is_ComplexField\n+        pivots = ddm_irref(b, _partial_pivot=partial_pivot)\n         return b, pivots\n \n     def nullspace(a):\ndiff --git a/sympy/polys/matrices/dense.py b/sympy/polys/matrices/dense.py\n--- a/sympy/polys/matrices/dense.py\n+++ b/sympy/polys/matrices/dense.py\n@@ -85,7 +85,7 @@ def ddm_imatmul(a, b, c):\n             ai[j] = sum(map(mul, bi, cTj), ai[j])\n \n \n-def ddm_irref(a):\n+def ddm_irref(a, _partial_pivot=False):\n     \"\"\"a  <--  rref(a)\"\"\"\n     # a is (m x n)\n     m = len(a)\n@@ -97,6 +97,15 @@ def ddm_irref(a):\n     pivots = []\n \n     for j in range(n):\n+        # Proper pivoting should be used for all domains for performance\n+        # reasons but it is only strictly needed for RR and CC (and possibly\n+        # other domains like RR(x)). This path is used by DDM.rref() if the\n+        # domain is RR or CC. It uses partial (row) pivoting based on the\n+        # absolute value of the pivot candidates.\n+        if _partial_pivot:\n+            ip = max(range(i, m), key=lambda ip: abs(a[ip][j]))\n+            a[i], a[ip] = a[ip], a[i]\n+\n         # pivot\n         aij = a[i][j]\n \ndiff --git a/sympy/polys/matrices/linsolve.py b/sympy/polys/matrices/linsolve.py\n--- a/sympy/polys/matrices/linsolve.py\n+++ b/sympy/polys/matrices/linsolve.py\n@@ -73,6 +73,12 @@ def _linsolve(eqs, syms):\n     Aaug = sympy_dict_to_dm(eqsdict, rhs, syms)\n     K = Aaug.domain\n \n+    # sdm_irref has issues with float matrices. This uses the ddm_rref()\n+    # function. When sdm_rref() can handle float matrices reasonably this\n+    # should be removed...\n+    if K.is_RealField or K.is_ComplexField:\n+        Aaug = Aaug.to_ddm().rref()[0].to_sdm()\n+\n     # Compute reduced-row echelon form (RREF)\n     Arref, pivots, nzcols = sdm_irref(Aaug)\n \ndiff --git a/sympy/polys/matrices/sdm.py b/sympy/polys/matrices/sdm.py\n--- a/sympy/polys/matrices/sdm.py\n+++ b/sympy/polys/matrices/sdm.py\n@@ -904,6 +904,8 @@ def sdm_irref(A):\n             Ajnz = set(Aj)\n             for k in Ajnz - Ainz:\n                 Ai[k] = - Aij * Aj[k]\n+            Ai.pop(j)\n+            Ainz.remove(j)\n             for k in Ajnz & Ainz:\n                 Aik = Ai[k] - Aij * Aj[k]\n                 if Aik:\n@@ -938,6 +940,8 @@ def sdm_irref(A):\n             for l in Ainz - Aknz:\n                 Ak[l] = - Akj * Ai[l]\n                 nonzero_columns[l].add(k)\n+            Ak.pop(j)\n+            Aknz.remove(j)\n             for l in Ainz & Aknz:\n                 Akl = Ak[l] - Akj * Ai[l]\n                 if Akl:\n",
  "test_patch": "diff --git a/sympy/polys/matrices/tests/test_linsolve.py b/sympy/polys/matrices/tests/test_linsolve.py\n--- a/sympy/polys/matrices/tests/test_linsolve.py\n+++ b/sympy/polys/matrices/tests/test_linsolve.py\n@@ -7,7 +7,7 @@\n from sympy.testing.pytest import raises\n \n from sympy import S, Eq, I\n-from sympy.abc import x, y\n+from sympy.abc import x, y, z\n \n from sympy.polys.matrices.linsolve import _linsolve\n from sympy.polys.solvers import PolyNonlinearError\n@@ -23,6 +23,83 @@ def test__linsolve():\n     raises(PolyNonlinearError, lambda: _linsolve([x*(1 + x)], [x]))\n \n \n+def test__linsolve_float():\n+\n+    # This should give the exact answer:\n+    eqs = [\n+        y - x,\n+        y - 0.0216 * x\n+    ]\n+    sol = {x:0.0, y:0.0}\n+    assert _linsolve(eqs, (x, y)) == sol\n+\n+    # Other cases should be close to eps\n+\n+    def all_close(sol1, sol2, eps=1e-15):\n+        close = lambda a, b: abs(a - b) < eps\n+        assert sol1.keys() == sol2.keys()\n+        return all(close(sol1[s], sol2[s]) for s in sol1)\n+\n+    eqs = [\n+        0.8*x +         0.8*z + 0.2,\n+        0.9*x + 0.7*y + 0.2*z + 0.9,\n+        0.7*x + 0.2*y + 0.2*z + 0.5\n+    ]\n+    sol_exact = {x:-29/42, y:-11/21, z:37/84}\n+    sol_linsolve = _linsolve(eqs, [x,y,z])\n+    assert all_close(sol_exact, sol_linsolve)\n+\n+    eqs = [\n+        0.9*x + 0.3*y + 0.4*z + 0.6,\n+        0.6*x + 0.9*y + 0.1*z + 0.7,\n+        0.4*x + 0.6*y + 0.9*z + 0.5\n+    ]\n+    sol_exact = {x:-88/175, y:-46/105, z:-1/25}\n+    sol_linsolve = _linsolve(eqs, [x,y,z])\n+    assert all_close(sol_exact, sol_linsolve)\n+\n+    eqs = [\n+        0.4*x + 0.3*y + 0.6*z + 0.7,\n+        0.4*x + 0.3*y + 0.9*z + 0.9,\n+        0.7*x + 0.9*y,\n+    ]\n+    sol_exact = {x:-9/5, y:7/5, z:-2/3}\n+    sol_linsolve = _linsolve(eqs, [x,y,z])\n+    assert all_close(sol_exact, sol_linsolve)\n+\n+    eqs = [\n+        x*(0.7 + 0.6*I) + y*(0.4 + 0.7*I) + z*(0.9 + 0.1*I) + 0.5,\n+        0.2*I*x + 0.2*I*y + z*(0.9 + 0.2*I) + 0.1,\n+        x*(0.9 + 0.7*I) + y*(0.9 + 0.7*I) + z*(0.9 + 0.4*I) + 0.4,\n+    ]\n+    sol_exact = {\n+        x:-6157/7995 - 411/5330*I,\n+        y:8519/15990 + 1784/7995*I,\n+        z:-34/533 + 107/1599*I,\n+    }\n+    sol_linsolve = _linsolve(eqs, [x,y,z])\n+    assert all_close(sol_exact, sol_linsolve)\n+\n+    # XXX: This system for x and y over RR(z) is problematic.\n+    #\n+    # eqs = [\n+    #     x*(0.2*z + 0.9) + y*(0.5*z + 0.8) + 0.6,\n+    #     0.1*x*z + y*(0.1*z + 0.6) + 0.9,\n+    # ]\n+    #\n+    # linsolve(eqs, [x, y])\n+    # The solution for x comes out as\n+    #\n+    #       -3.9e-5*z**2 - 3.6e-5*z - 8.67361737988404e-20\n+    #  x =  ----------------------------------------------\n+    #           3.0e-6*z**3 - 1.3e-5*z**2 - 5.4e-5*z\n+    #\n+    # The 8e-20 in the numerator should be zero which would allow z to cancel\n+    # from top and bottom. It should be possible to avoid this somehow because\n+    # the inverse of the matrix only has a quadratic factor (the determinant)\n+    # in the denominator.\n+\n+\n def test__linsolve_deprecated():\n     assert _linsolve([Eq(x**2, x**2+y)], [x, y]) == {x:x, y:S.Zero}\n     assert _linsolve([(x+y)**2-x**2], [x]) == {x:-y/2}\ndiff --git a/sympy/polys/tests/test_constructor.py b/sympy/polys/tests/test_constructor.py\n--- a/sympy/polys/tests/test_constructor.py\n+++ b/sympy/polys/tests/test_constructor.py\n@@ -27,6 +27,9 @@ def test_construct_domain():\n     assert isinstance(result[0], ComplexField)\n     assert result[1] == [CC(3.14), CC(1.0j), CC(0.5)]\n \n+    assert construct_domain([1.0+I]) == (CC, [CC(1.0, 1.0)])\n+    assert construct_domain([2.0+3.0*I]) == (CC, [CC(2.0, 3.0)])\n+\n     assert construct_domain([1, I]) == (ZZ_I, [ZZ_I(1, 0), ZZ_I(0, 1)])\n     assert construct_domain([1, I/2]) == (QQ_I, [QQ_I(1, 0), QQ_I(0, S.Half)])\n \ndiff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -51,6 +51,7 @@\n from sympy.polys.fields import field\n from sympy.polys.domains import FF, ZZ, QQ, ZZ_I, QQ_I, RR, EX\n from sympy.polys.domains.realfield import RealField\n+from sympy.polys.domains.complexfield import ComplexField\n from sympy.polys.orderings import lex, grlex, grevlex\n \n from sympy import (\n@@ -387,6 +388,7 @@ def test_Poly__new__():\n              modulus=65537, symmetric=False)\n \n     assert isinstance(Poly(x**2 + x + 1.0).get_domain(), RealField)\n+    assert isinstance(Poly(x**2 + x + I + 1.0).get_domain(), ComplexField)\n \n \n def test_Poly__args():\n",
  "problem_statement": "linsolve fails simple system of two equations\n```\r\nimport sympy\r\nx,y = sympy.symbols('x, y')\r\n\r\nsympy.linsolve([sympy.Eq(y, x), sympy.Eq(y, 0.0215 * x)], (x, y))\r\n>> FiniteSet((0, 0))\r\n\r\nsympy.linsolve([sympy.Eq(y, x), sympy.Eq(y, 0.0216 * x)], (x, y))\r\n>> FiniteSet((-4.07992766242527e+17*y, 1.0*y))\r\n\r\nsympy.linsolve([sympy.Eq(y, x), sympy.Eq(y, 0.0217 * x)], (x, y))\r\n>> FiniteSet((0, 0))\r\n```\r\n\r\nAny thoughts on why these don't all return the same solution? Thanks!\n",
  "hints_text": "It seems that in rref the pivot is not fully cancelled due to a rounding error so e.g. we have something like:\r\n```python\r\nIn [1]: M = Matrix([[1.0, 1.0], [3.1, 1.0]])\r\n\r\nIn [2]: M\r\nOut[2]: \r\n\u23a11.0  1.0\u23a4\r\n\u23a2        \u23a5\r\n\u23a33.1  1.0\u23a6\r\n```\r\nThen one step of row reduction gives:\r\n```python\r\nIn [3]: M = Matrix([[1.0, 1.0], [1e-16, -2.1]])\r\n\r\nIn [4]: M\r\nOut[4]: \r\n\u23a1  1.0    1.0 \u23a4\r\n\u23a2             \u23a5\r\n\u23a31.0e-16  -2.1\u23a6\r\n```\r\nWith exact arithmetic the 1e-16 would have been 0 but the rounding error makes it not zero and then it throws off subsequent steps. I think that the solution is to make it exactly zero:\r\n```diff\r\ndiff --git a/sympy/polys/matrices/sdm.py b/sympy/polys/matrices/sdm.py\r\nindex cfa624185a..647eb6af3d 100644\r\n--- a/sympy/polys/matrices/sdm.py\r\n+++ b/sympy/polys/matrices/sdm.py\r\n@@ -904,6 +904,8 @@ def sdm_irref(A):\r\n             Ajnz = set(Aj)\r\n             for k in Ajnz - Ainz:\r\n                 Ai[k] = - Aij * Aj[k]\r\n+            Ai.pop(j)\r\n+            Ainz.remove(j)\r\n             for k in Ajnz & Ainz:\r\n                 Aik = Ai[k] - Aij * Aj[k]\r\n                 if Aik:\r\n```\r\nThat gives:\r\n```python\r\nIn [1]: import sympy\r\n\r\nIn [2]: sympy.linsolve([sympy.Eq(y, x), sympy.Eq(y, 0.0215 * x)], (x, y))\r\nOut[2]: {(0, 0)}\r\n\r\nIn [3]: sympy.linsolve([sympy.Eq(y, x), sympy.Eq(y, 0.0216 * x)], (x, y))\r\nOut[3]: {(0, 0)}\r\n\r\nIn [4]: sympy.linsolve([sympy.Eq(y, x), sympy.Eq(y, 0.0217 * x)], (x, y))\r\nOut[4]: {(0, 0)}\r\n```\r\n@tyler-herzer-volumetric can you try out that diff?\nHaven't been able to replicate the issue after making that change. Thanks a lot @oscarbenjamin!\nThis example still fails with the diff:\r\n```python\r\nIn [1]: linsolve([0.4*x + 0.3*y + 0.2, 0.4*x + 0.3*y + 0.3], [x, y])\r\nOut[1]: {(1.35107988821115e+15, -1.8014398509482e+15)}\r\n```\r\nIn this case although the pivot is set to zero actually the matrix is singular but row reduction leads to something like:\r\n```python\r\nIn [3]: Matrix([[1, 1], [0, 1e-17]])\r\nOut[3]: \r\n\u23a11     1   \u23a4\r\n\u23a2          \u23a5\r\n\u23a30  1.0e-17\u23a6\r\n```\r\nThat's a trickier case. It seems that numpy can pick up on it e.g.:\r\n```python\r\nIn [52]: M = np.array([[0.4, 0.3], [0.4, 0.3]])\r\n\r\nIn [53]: b = np.array([0.2, 0.3])\r\n\r\nIn [54]: np.linalg.solve(M, b)\r\n---------------------------------------------------------------------------\r\nLinAlgError: Singular matrix \r\n```\r\nA slight modification or rounding error leads to the same large result though:\r\n```python\r\nIn [55]: M = np.array([[0.4, 0.3], [0.4, 0.3-3e-17]])\r\n\r\nIn [56]: np.linalg.solve(M, b)\r\nOut[56]: array([ 1.35107989e+15, -1.80143985e+15])\r\n```\r\nI'm not sure it's possible to arrange the floating point calculation so that cases like this are picked up as being singular without introducing some kind of heuristic threshold for the determinant. This fails in numpy with even fairly simple examples:\r\n```python\r\nIn [83]: b\r\nOut[83]: array([0.2, 0.3, 0.5])\r\n\r\nIn [84]: M\r\nOut[84]: \r\narray([[0.1, 0.2, 0.3],\r\n       [0.4, 0.5, 0.6],\r\n       [0.7, 0.8, 0.9]])\r\n\r\nIn [85]: np.linalg.solve(M, b)\r\nOut[85]: array([-4.50359963e+14,  9.00719925e+14, -4.50359963e+14])\r\n\r\nIn [86]: np.linalg.det(M)\r\nOut[86]: 6.661338147750926e-18\r\n```\r\nMaybe the not full-rank case for float matrices isn't so important since it can't be done reliably with floats. I guess that the diff shown above is good enough then since it fixes the calculation in the full rank case.\nThere is another problematic case. This should have a unique solution but a parametric solution is returned instead:\r\n```python\r\nIn [21]: eqs = [0.8*x + 0.8*z + 0.2, 0.9*x + 0.7*y + 0.2*z + 0.9, 0.7*x + 0.2*y + 0.2*z + 0.5]\r\n\r\nIn [22]: linsolve(eqs, [x, y, z])\r\nOut[22]: {(-0.32258064516129\u22c5z - 0.548387096774194, 1.22033022161007e+16\u22c5z - 5.37526407137769e+15, 1.0\u22c5z)}\r\n```\r\nThat seems to be another bug in the sparse rref routine somehow:\r\n```python\r\nIn [34]: M = Matrix([\r\n    ...: [0.8,   0, 0.8, -0.2],\r\n    ...: [0.9, 0.7, 0.2, -0.9],\r\n    ...: [0.7, 0.2, 0.2, -0.5]])\r\n\r\nIn [35]: from sympy.polys.matrices import DomainMatrix\r\n\r\nIn [36]: dM = DomainMatrix.from_Matrix(M)\r\n\r\nIn [37]: M.rref()\r\nOut[37]: \r\n\u239b\u23a11  0  0  -0.690476190476191\u23a4           \u239e\r\n\u239c\u23a2                           \u23a5           \u239f\r\n\u239c\u23a20  1  0  -0.523809523809524\u23a5, (0, 1, 2)\u239f\r\n\u239c\u23a2                           \u23a5           \u239f\r\n\u239d\u23a30  0  1  0.440476190476191 \u23a6           \u23a0\r\n\r\nIn [38]: dM.rref()[0].to_Matrix()\r\nOut[38]: \r\n\u23a11.0  5.55111512312578e-17    0.32258064516129      -0.548387096774194  \u23a4\r\n\u23a2                                                                       \u23a5\r\n\u23a20.0          1.0           -1.22033022161007e+16  -5.37526407137769e+15\u23a5\r\n\u23a2                                                                       \u23a5\r\n\u23a30.0          0.0                    0.0                    0.0         \u23a6\r\n\r\nIn [39]: dM.to_dense().rref()[0].to_Matrix()\r\nOut[39]: \r\n\u23a11.0  0.0  0.0  -0.69047619047619 \u23a4\r\n\u23a2                                 \u23a5\r\n\u23a20.0  1.0  0.0  -0.523809523809524\u23a5\r\n\u23a2                                 \u23a5\r\n\u23a30.0  0.0  1.0   0.44047619047619 \u23a6\r\n```\nThe last one was a similar problem to do with cancelling above the pivot:\r\n```diff\r\ndiff --git a/sympy/polys/matrices/sdm.py b/sympy/polys/matrices/sdm.py\r\nindex cfa624185a..7c4ad43660 100644\r\n--- a/sympy/polys/matrices/sdm.py\r\n+++ b/sympy/polys/matrices/sdm.py\r\n@@ -904,6 +904,8 @@ def sdm_irref(A):\r\n             Ajnz = set(Aj)\r\n             for k in Ajnz - Ainz:\r\n                 Ai[k] = - Aij * Aj[k]\r\n+            Ai.pop(j)\r\n+            Ainz.remove(j)\r\n             for k in Ajnz & Ainz:\r\n                 Aik = Ai[k] - Aij * Aj[k]\r\n                 if Aik:\r\n@@ -938,6 +940,8 @@ def sdm_irref(A):\r\n             for l in Ainz - Aknz:\r\n                 Ak[l] = - Akj * Ai[l]\r\n                 nonzero_columns[l].add(k)\r\n+            Ak.pop(j)\r\n+            Aknz.remove(j)\r\n             for l in Ainz & Aknz:\r\n                 Akl = Ak[l] - Akj * Ai[l]\r\n                 if Akl:\r\ndiff --git a/sympy/polys/matrices/tests/test_linsolve.py b/sympy/polys/matrices/tests/test_linsolve.py\r\nindex eda4cdbdf3..6b79842fa7 100644\r\n--- a/sympy/polys/matrices/tests/test_linsolve.py\r\n+++ b/sympy/polys/matrices/tests/test_linsolve.py\r\n@@ -7,7 +7,7 @@\r\n from sympy.testing.pytest import raises\r\n \r\n from sympy import S, Eq, I\r\n-from sympy.abc import x, y\r\n+from sympy.abc import x, y, z\r\n \r\n from sympy.polys.matrices.linsolve import _linsolve\r\n from sympy.polys.solvers import PolyNonlinearError\r\n@@ -23,6 +23,14 @@ def test__linsolve():\r\n     raises(PolyNonlinearError, lambda: _linsolve([x*(1 + x)], [x]))\r\n \r\n \r\n+def test__linsolve_float():\r\n+    assert _linsolve([Eq(y, x), Eq(y, 0.0216 * x)], (x, y)) == {x:0, y:0}\r\n+\r\n+    eqs = [0.8*x + 0.8*z + 0.2, 0.9*x + 0.7*y + 0.2*z + 0.9, 0.7*x + 0.2*y + 0.2*z + 0.5]\r\n+    sol = {x:-0.69047619047619047, y:-0.52380952380952395, z:0.44047619047619047}\r\n+    assert _linsolve(eqs, [x,y,z]) == sol\r\n+\r\n+\r\n def test__linsolve_deprecated():\r\n     assert _linsolve([Eq(x**2, x**2+y)], [x, y]) == {x:x, y:S.Zero}\r\n     assert _linsolve([(x+y)**2-x**2], [x]) == {x:-y/2}\r\n```\r\nAnother problem has emerged though:\r\n```python\r\nIn [1]: eqs = [0.9*x + 0.3*y + 0.4*z + 0.6, 0.6*x + 0.9*y + 0.1*z + 0.7, 0.4*x + 0.6*y + 0.9*z + 0.5]\r\n\r\nIn [2]: linsolve(eqs, [x, y, z])\r\nOut[2]: {(-0.5, -0.4375, -0.0400000000000001)}\r\n\r\nIn [3]: solve(eqs, [x, y, z])\r\nOut[3]: {x: -0.502857142857143, y: -0.438095238095238, z: -0.04}\r\n```\n> Another problem has emerged though:\r\n> \r\n> ```python\r\n> In [1]: eqs = [0.9*x + 0.3*y + 0.4*z + 0.6, 0.6*x + 0.9*y + 0.1*z + 0.7, 0.4*x + 0.6*y + 0.9*z + 0.5]\r\n> ```\r\n\r\nIn this case the problem is that something like `1e-17` is chosen (incorrectly) as a pivot. It doesn't look easy to resolve this because the `sdm_rref` routine doesn't have an easy way of incorporating pivoting and is really designed for exact domains.\r\n\r\nProbably float matrices should be handled by mpmath or at least a separate routine.",
  "created_at": "2021-05-26T23:53:16Z",
  "version": "1.9",
  "FAIL_TO_PASS": "[\"test_Poly__new__\", \"test__linsolve_float\", \"test_construct_domain\"]",
  "PASS_TO_PASS": "[\"test_GroebnerBasis\", \"test_Poly_EC\", \"test_Poly_EM\", \"test_Poly_ET\", \"test_Poly_LC\", \"test_Poly_LM\", \"test_Poly_LM_custom_order\", \"test_Poly_LT\", \"test_Poly_TC\", \"test_Poly___call__\", \"test_Poly__args\", \"test_Poly__eq__\", \"test_Poly__gen_to_level\", \"test_Poly__gens\", \"test_Poly__unify\", \"test_Poly_abs\", \"test_Poly_add\", \"test_Poly_add_ground\", \"test_Poly_all_coeffs\", \"test_Poly_all_monoms\", \"test_Poly_all_terms\", \"test_Poly_as_dict\", \"test_Poly_as_expr\", \"test_Poly_clear_denoms\", \"test_Poly_coeff\", \"test_Poly_coeffs\", \"test_Poly_deflate\", \"test_Poly_degree\", \"test_Poly_degree_list\", \"test_Poly_diff\", \"test_Poly_divmod\", \"test_Poly_eject\", \"test_Poly_eq_ne\", \"test_Poly_eval\", \"test_Poly_exclude\", \"test_Poly_exquo_ground\", \"test_Poly_free_symbols\", \"test_Poly_from_dict\", \"test_Poly_from_expr\", \"test_Poly_from_list\", \"test_Poly_from_poly\", \"test_Poly_get_domain\", \"test_Poly_get_modulus\", \"test_Poly_has_only_gens\", \"test_Poly_homogeneous_order\", \"test_Poly_homogenize\", \"test_Poly_inject\", \"test_Poly_integrate\", \"test_Poly_is_irreducible\", \"test_Poly_l1_norm\", \"test_Poly_length\", \"test_Poly_lift\", \"test_Poly_ltrim\", \"test_Poly_max_norm\", \"test_Poly_mixed_operations\", \"test_Poly_monoms\", \"test_Poly_mul\", \"test_Poly_mul_ground\", \"test_Poly_neg\", \"test_Poly_nonzero\", \"test_Poly_nth\", \"test_Poly_one\", \"test_Poly_pow\", \"test_Poly_precision\", \"test_Poly_properties\", \"test_Poly_quo_ground\", \"test_Poly_rat_clear_denoms\", \"test_Poly_reorder\", \"test_Poly_replace\", \"test_Poly_retract\", \"test_Poly_root\", \"test_Poly_set_domain\", \"test_Poly_set_modulus\", \"test_Poly_slice\", \"test_Poly_sqr\", \"test_Poly_sub\", \"test_Poly_sub_ground\", \"test_Poly_subs\", \"test_Poly_terms\", \"test_Poly_termwise\", \"test_Poly_to_exact\", \"test_Poly_to_field\", \"test_Poly_to_ring\", \"test_Poly_total_degree\", \"test_Poly_zero\", \"test_PurePoly_Poly\", \"test_PurePoly__eq__\", \"test_PurePoly_free_symbols\", \"test__linsolve\", \"test_all_roots\", \"test_as_list\", \"test_cancel\", \"test_complex_exponential\", \"test_compose\", \"test_composite_option\", \"test_content\", \"test_count_roots\", \"test_deserialized_poly_equals_original\", \"test_discriminant\", \"test_dispersion\", \"test_div\", \"test_factor\", \"test_factor_large\", \"test_factor_noeval\", \"test_factor_terms\", \"test_fglm\", \"test_gcd\", \"test_gcd_list\", \"test_gcd_numbers_vs_polys\", \"test_gcdex\", \"test_gff\", \"test_groebner\", \"test_ground_roots\", \"test_intervals\", \"test_is_zero_dimensional\", \"test_issue_11198\", \"test_issue_12400\", \"test_issue_13079\", \"test_issue_14364\", \"test_issue_15669\", \"test_issue_17988\", \"test_issue_18205\", \"test_issue_19113\", \"test_issue_19360\", \"test_issue_20389\", \"test_issue_20427\", \"test_issue_5786\", \"test_issue_7864\", \"test_issue_8695\", \"test_issue_9585\", \"test_keep_coeff\", \"test_lcm_list\", \"test_monic\", \"test_noncommutative\", \"test_norm\", \"test_nroots\", \"test_nth_power_roots_poly\", \"test_parallel_poly_from_expr\", \"test_pdiv\", \"test_poly\", \"test_poly_copy_equals_original\", \"test_poly_from_domain_element\", \"test_poly_matching_consistency\", \"test_precision\", \"test_primitive\", \"test_real_roots\", \"test_reduced\", \"test_refine_root\", \"test_resultant\", \"test_revert\", \"test_shift\", \"test_sqf\", \"test_sqf_norm\", \"test_sturm\", \"test_subresultants\", \"test_terms_gcd\", \"test_to_rational_coeffs\", \"test_torational_factor_list\", \"test_transform\", \"test_trunc\"]",
  "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91",
  "patch_files": [
    "sympy/polys/constructor.py",
    "sympy/polys/matrices/ddm.py",
    "sympy/polys/matrices/dense.py",
    "sympy/polys/matrices/linsolve.py",
    "sympy/polys/matrices/sdm.py"
  ],
  "test_patch_files": [
    "sympy/polys/matrices/tests/test_linsolve.py",
    "sympy/polys/tests/test_constructor.py",
    "sympy/polys/tests/test_polytools.py"
  ],
  "patch_diff_details": {
    "sympy/polys/constructor.py": {
      "diffs": [
        {
          "start_line_old": 51,
          "end_line_old": 51
        }
      ]
    },
    "sympy/polys/matrices/ddm.py": {
      "diffs": [
        {
          "start_line_old": 287,
          "end_line_old": 287
        }
      ]
    },
    "sympy/polys/matrices/dense.py": {
      "diffs": [
        {
          "start_line_old": 88,
          "end_line_old": 88
        },
        {
          "start_line_old": 100,
          "end_line_old": 100
        }
      ]
    },
    "sympy/polys/matrices/linsolve.py": {
      "diffs": [
        {
          "start_line_old": 76,
          "end_line_old": 76,
          "file_pos": 2,
          "file_context_length": 35221,
          "pos": 5,
          "context_length": 3687
        }
      ]
    },
    "sympy/polys/matrices/sdm.py": {
      "diffs": [
        {
          "start_line_old": 907,
          "end_line_old": 907
        },
        {
          "start_line_old": 941,
          "end_line_old": 941
        }
      ]
    }
  },
  "vectors": 9345,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/sympy/sympy/solvers/solveset.py_linsolve.2__return_conditionset.eqs.3.1",
      "distance": 0.6529810428619385,
      "file_path": "sympy/solvers/solveset.py",
      "start_line": 2740,
      "end_line": 2850,
      "tokens": 912,
      "context_length": 912
    },
    {
      "position": 2,
      "id": "/tmp/repos/sympy/sympy/solvers/solveset.py_linsolve.1_linsolve.1",
      "distance": 0.653305172920227,
      "file_path": "sympy/solvers/solveset.py",
      "start_line": 2587,
      "end_line": 2739,
      "tokens": 1513,
      "context_length": 2425
    },
    {
      "position": 3,
      "id": "/tmp/repos/sympy/sympy/solvers/solveset.py_nonlinsolve.2_",
      "distance": 0.7584800124168396,
      "file_path": "sympy/solvers/solveset.py",
      "start_line": 3628,
      "end_line": 3685,
      "tokens": 494,
      "context_length": 2919
    },
    {
      "position": 4,
      "id": "/tmp/repos/sympy/sympy/solvers/solveset.py_linear_eq_to_matrix.7_linsolve",
      "distance": 0.7637265920639038,
      "file_path": "sympy/solvers/solveset.py",
      "start_line": 2565,
      "end_line": 2837,
      "tokens": 188,
      "context_length": 3107
    },
    {
      "position": 5,
      "id": "/tmp/repos/sympy/sympy/polys/matrices/linsolve.py__linsolve__linsolve.27.1",
      "distance": 0.7789336442947388,
      "file_path": "sympy/polys/matrices/linsolve.py",
      "start_line": 46,
      "end_line": 108,
      "tokens": 580,
      "context_length": 3687,
      "file_pos": 2
    },
    {
      "position": 6,
      "id": "/tmp/repos/sympy/sympy/solvers/solveset.py_1__rc.1",
      "distance": 0.7829486131668091,
      "file_path": "sympy/solvers/solveset.py",
      "start_line": 1,
      "end_line": 66,
      "tokens": 692,
      "context_length": 4379
    },
    {
      "position": 7,
      "id": "/tmp/repos/sympy/sympy/solvers/solveset.py_nonlinsolve.1_nonlinsolve.1",
      "distance": 0.7868127822875977,
      "file_path": "sympy/solvers/solveset.py",
      "start_line": 3473,
      "end_line": 3627,
      "tokens": 1925,
      "context_length": 6304
    },
    {
      "position": 8,
      "id": "/tmp/repos/sympy/sympy/solvers/recurr.py_rsolve.11_",
      "distance": 0.7987745404243469,
      "file_path": "sympy/solvers/recurr.py",
      "start_line": 745,
      "end_line": 834,
      "tokens": 660,
      "context_length": 6964
    },
    {
      "position": 9,
      "id": "/tmp/repos/sympy/sympy/solvers/solvers.py_57_nsolve.1",
      "distance": 0.8101741671562195,
      "file_path": "sympy/solvers/solvers.py",
      "start_line": 2755,
      "end_line": 2865,
      "tokens": 1166,
      "context_length": 8130
    },
    {
      "position": 10,
      "id": "/tmp/repos/sympy/sympy/polys/matrices/linsolve.py_1_sdm_nullspace_from_rref",
      "distance": 0.8200136423110962,
      "file_path": "sympy/polys/matrices/linsolve.py",
      "start_line": 1,
      "end_line": 43,
      "tokens": 383,
      "context_length": 8513,
      "file_pos": 4
    },
    {
      "position": 11,
      "id": "/tmp/repos/sympy/sympy/polys/solvers.py_solve_lin_sys.11_solve_lin_sys.12.1",
      "distance": 0.8253461718559265,
      "file_path": "sympy/polys/solvers.py",
      "start_line": 272,
      "end_line": 292,
      "tokens": 161,
      "context_length": 8674
    },
    {
      "position": 12,
      "id": "/tmp/repos/sympy/sympy/solvers/solvers.py_solve.1_solve.1",
      "distance": 0.8355139493942261,
      "file_path": "sympy/solvers/solvers.py",
      "start_line": 380,
      "end_line": 832,
      "tokens": 4494,
      "context_length": 13168
    },
    {
      "position": 13,
      "id": "/tmp/repos/sympy/sympy/solvers/__init__.py_1_",
      "distance": 0.8372259140014648,
      "file_path": "sympy/solvers/__init__.py",
      "start_line": 1,
      "end_line": 72,
      "tokens": 626,
      "context_length": 13794
    },
    {
      "position": 14,
      "id": "/tmp/repos/sympy/sympy/solvers/pde.py_pde_1st_linear_variable_coeff.12_pde_1st_linear_variable_coeff.20.10.1",
      "distance": 0.8407076001167297,
      "file_path": "sympy/solvers/pde.py",
      "start_line": 744,
      "end_line": 802,
      "tokens": 682,
      "context_length": 14476
    },
    {
      "position": 15,
      "id": "/tmp/repos/sympy/sympy/solvers/solvers.py__solve_system.13__solve_system.21.1",
      "distance": 0.8408492803573608,
      "file_path": "sympy/solvers/solvers.py",
      "start_line": 1890,
      "end_line": 1981,
      "tokens": 822,
      "context_length": 15298
    },
    {
      "position": 16,
      "id": "/tmp/repos/sympy/sympy/polys/solvers.py_solve_lin_sys_solve_lin_sys.result.1",
      "distance": 0.8409937024116516,
      "file_path": "sympy/polys/solvers.py",
      "start_line": 178,
      "end_line": 270,
      "tokens": 784,
      "context_length": 16082
    },
    {
      "position": 17,
      "id": "/tmp/repos/sympy/sympy/solvers/solveset.py__solve_exponential.4__solve_exponential.16.1",
      "distance": 0.8431993722915649,
      "file_path": "sympy/solvers/solveset.py",
      "start_line": 1525,
      "end_line": 1562,
      "tokens": 333,
      "context_length": 16415
    },
    {
      "position": 18,
      "id": "/tmp/repos/sympy/sympy/solvers/solveset.py_solvify_solvify.5.1",
      "distance": 0.8489742279052734,
      "file_path": "sympy/solvers/solveset.py",
      "start_line": 2299,
      "end_line": 2388,
      "tokens": 593,
      "context_length": 17008
    },
    {
      "position": 19,
      "id": "/tmp/repos/sympy/sympy/polys/benchmarks/bench_solvers.py_eqs_10x8_",
      "distance": 0.8499343395233154,
      "file_path": "sympy/polys/benchmarks/bench_solvers.py",
      "start_line": 499,
      "end_line": 544,
      "tokens": 302,
      "context_length": 17310
    }
  ],
  "files": [
    {
      "file_path": "sympy/solvers/solveset.py",
      "position": 1,
      "tokens": 33460,
      "context_length": 33460
    },
    {
      "file_path": "sympy/polys/matrices/linsolve.py",
      "position": 2,
      "tokens": 1761,
      "context_length": 35221
    },
    {
      "file_path": "sympy/solvers/recurr.py",
      "position": 3,
      "tokens": 6879,
      "context_length": 42100
    },
    {
      "file_path": "sympy/solvers/solvers.py",
      "position": 4,
      "tokens": 31691,
      "context_length": 73791
    },
    {
      "file_path": "sympy/polys/solvers.py",
      "position": 5,
      "tokens": 3450,
      "context_length": 77241
    },
    {
      "file_path": "sympy/solvers/__init__.py",
      "position": 6,
      "tokens": 626,
      "context_length": 77867
    },
    {
      "file_path": "sympy/solvers/pde.py",
      "position": 7,
      "tokens": 9403,
      "context_length": 87270
    },
    {
      "file_path": "sympy/polys/benchmarks/bench_solvers.py",
      "position": 8,
      "tokens": 238109,
      "context_length": 325379
    }
  ]
}