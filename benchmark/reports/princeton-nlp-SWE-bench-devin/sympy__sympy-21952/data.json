{
  "instance_id": "sympy__sympy-21952",
  "model_patch": "diff --git a/sympy/assumptions/handlers/ntheory.py b/sympy/assumptions/handlers/ntheory.py\nindex 4f1397b283..006f1d2cdd 100644\n--- a/sympy/assumptions/handlers/ntheory.py\n+++ b/sympy/assumptions/handlers/ntheory.py\n@@ -127,6 +127,12 @@ def _EvenPredicate_number(expr, assumptions):\n         return False\n     if isinstance(expr, (float, Float)):\n         return False\n+    # Check if the expression is a division of a power by 2\n+    if isinstance(expr, Mul) and len(expr.args) == 2:\n+        pow_expr, div_by_two = expr.args\n+        if isinstance(div_by_two, Rational) and div_by_two == Rational(1, 2):\n+            if isinstance(pow_expr, Pow) and ask(Q.even(pow_expr.base), assumptions) and pow_expr.exp == 2:\n+                return True\n     return i % 2 == 0\n \n @EvenPredicate.register(Expr)\n",
  "model_name_or_path": "Devin",
  "pass_or_fail": "fail",
  "model_patch_files": [
    "sympy/assumptions/handlers/ntheory.py"
  ],
  "repo": "sympy/sympy",
  "base_commit": "b8156f36f0f3144c5e3b66002b9e8fcbe2ee66c4",
  "patch": "diff --git a/sympy/core/mul.py b/sympy/core/mul.py\n--- a/sympy/core/mul.py\n+++ b/sympy/core/mul.py\n@@ -1334,6 +1334,7 @@ def _eval_is_zero(self):\n     #_eval_is_integer = lambda self: _fuzzy_group(\n     #    (a.is_integer for a in self.args), quick_exit=True)\n     def _eval_is_integer(self):\n+        from sympy import trailing\n         is_rational = self._eval_is_rational()\n         if is_rational is False:\n             return False\n@@ -1342,11 +1343,14 @@ def _eval_is_integer(self):\n         denominators = []\n         for a in self.args:\n             if a.is_integer:\n-                numerators.append(a)\n+                if abs(a) is not S.One:\n+                    numerators.append(a)\n             elif a.is_Rational:\n                 n, d = a.as_numer_denom()\n-                numerators.append(n)\n-                denominators.append(d)\n+                if abs(n) is not S.One:\n+                    numerators.append(n)\n+                if d is not S.One:\n+                    denominators.append(d)\n             elif a.is_Pow:\n                 b, e = a.as_base_exp()\n                 if not b.is_integer or not e.is_integer: return\n@@ -1364,13 +1368,36 @@ def _eval_is_integer(self):\n         if not denominators:\n             return True\n \n-        odd = lambda ints: all(i.is_odd for i in ints)\n-        even = lambda ints: any(i.is_even for i in ints)\n+        allodd = lambda x: all(i.is_odd for i in x)\n+        alleven = lambda x: all(i.is_even for i in x)\n+        anyeven = lambda x: any(i.is_even for i in x)\n \n-        if odd(numerators) and even(denominators):\n+        if allodd(numerators) and anyeven(denominators):\n             return False\n-        elif even(numerators) and denominators == [2]:\n+        elif anyeven(numerators) and denominators == [2]:\n             return True\n+        elif alleven(numerators) and allodd(denominators\n+                ) and (Mul(*denominators, evaluate=False) - 1\n+                ).is_positive:\n+            return False\n+        if len(denominators) == 1:\n+            d = denominators[0]\n+            if d.is_Integer and d.is_even:\n+                # if minimal power of 2 in num vs den is not\n+                # negative then we have an integer\n+                if (Add(*[i.as_base_exp()[1] for i in\n+                        numerators if i.is_even]) - trailing(d.p)\n+                        ).is_nonnegative:\n+                    return True\n+        if len(numerators) == 1:\n+            n = numerators[0]\n+            if n.is_Integer and n.is_even:\n+                # if minimal power of 2 in den vs num is positive\n+                # then we have have a non-integer\n+                if (Add(*[i.as_base_exp()[1] for i in\n+                        denominators if i.is_even]) - trailing(n.p)\n+                        ).is_positive:\n+                    return False\n \n     def _eval_is_polar(self):\n         has_polar = any(arg.is_polar for arg in self.args)\n@@ -1545,37 +1572,54 @@ def _eval_is_extended_negative(self):\n         return self._eval_pos_neg(-1)\n \n     def _eval_is_odd(self):\n+        from sympy import trailing, fraction\n         is_integer = self.is_integer\n-\n         if is_integer:\n+            if self.is_zero:\n+                return False\n+            n, d = fraction(self)\n+            if d.is_Integer and d.is_even:\n+                # if minimal power of 2 in num vs den is\n+                # positive then we have an even number\n+                if (Add(*[i.as_base_exp()[1] for i in\n+                        Mul.make_args(n) if i.is_even]) - trailing(d.p)\n+                        ).is_positive:\n+                    return False\n+                return\n             r, acc = True, 1\n             for t in self.args:\n-                if not t.is_integer:\n-                    return None\n-                elif t.is_even:\n+                if abs(t) is S.One:\n+                    continue\n+                assert t.is_integer\n+                if t.is_even:\n+                    return False\n+                if r is False:\n+                    pass\n+                elif acc != 1 and (acc + t).is_odd:\n                     r = False\n-                elif t.is_integer:\n-                    if r is False:\n-                        pass\n-                    elif acc != 1 and (acc + t).is_odd:\n-                        r = False\n-                    elif t.is_odd is None:\n-                        r = None\n+                elif t.is_even is None:\n+                    r = None\n                 acc = t\n             return r\n-\n-        # !integer -> !odd\n-        elif is_integer is False:\n-            return False\n+        return is_integer # !integer -> !odd\n \n     def _eval_is_even(self):\n+        from sympy import trailing, fraction\n         is_integer = self.is_integer\n \n         if is_integer:\n             return fuzzy_not(self.is_odd)\n \n-        elif is_integer is False:\n-            return False\n+        n, d = fraction(self)\n+        if n.is_Integer and n.is_even:\n+            # if minimal power of 2 in den vs num is not\n+            # negative then this is not an integer and\n+            # can't be even\n+            if (Add(*[i.as_base_exp()[1] for i in\n+                    Mul.make_args(d) if i.is_even]) - trailing(n.p)\n+                    ).is_nonnegative:\n+                return False\n+        return is_integer\n \n     def _eval_is_composite(self):\n         \"\"\"\ndiff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1572,6 +1572,16 @@ class Rational(Number):\n     >>> r.p/r.q\n     0.75\n \n+    If an unevaluated Rational is desired, ``gcd=1`` can be passed and\n+    this will keep common divisors of the numerator and denominator\n+    from being eliminated. It is not possible, however, to leave a\n+    negative value in the denominator.\n+\n+    >>> Rational(2, 4, gcd=1)\n+    2/4\n+    >>> Rational(2, -4, gcd=1).q\n+    4\n+\n     See Also\n     ========\n     sympy.core.sympify.sympify, sympy.simplify.simplify.nsimplify\n",
  "test_patch": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -512,6 +512,12 @@ def test_Mul_is_even_odd():\n     assert (x*(x + k)).is_odd is False\n     assert (x*(x + m)).is_odd is None\n \n+    # issue 8648\n+    assert (m**2/2).is_even\n+    assert (m**2/3).is_even is False\n+    assert (2/m**2).is_odd is False\n+    assert (2/m).is_odd is None\n+\n \n @XFAIL\n def test_evenness_in_ternary_integer_product_with_odd():\n@@ -1051,6 +1057,18 @@ def test_Pow_is_integer():\n     assert (1/(x + 1)).is_integer is False\n     assert (1/(-x - 1)).is_integer is False\n \n+    # issue 8648-like\n+    k = Symbol('k', even=True)\n+    assert (k**3/2).is_integer\n+    assert (k**3/8).is_integer\n+    assert (k**3/16).is_integer is None\n+    assert (2/k).is_integer is None\n+    assert (2/k**2).is_integer is False\n+    o = Symbol('o', odd=True)\n+    assert (k/o).is_integer is None\n+    o = Symbol('o', odd=True, prime=True)\n+    assert (k/o).is_integer is False\n+\n \n def test_Pow_is_real():\n     x = Symbol('x', real=True)\ndiff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -343,6 +343,11 @@ def test_Rational_new():\n     assert Rational(mpq(2, 6)) == Rational(1, 3)\n     assert Rational(PythonRational(2, 6)) == Rational(1, 3)\n \n+    assert Rational(2, 4, gcd=1).q == 4\n+    n = Rational(2, -4, gcd=1)\n+    assert n.q == 4\n+    assert n.p == -2\n+\n \n def test_Number_new():\n     \"\"\"\"\n",
  "problem_statement": "If n is even, n**2/2 should also be even\nThe following:\n\n``` python\n>>> n = Symbol('n', integer=True, even=True)\n>>> (n**2/2).is_even\n```\n\nshould return `True`, but it returns `None` (of course, this is also an enhancement).\n\nThat makes me think that perhaps symbolic integers should keep a more complex \"assumptions\" method, which generalizes \"is_even\" and \"is_odd\" to instead contain a dictionary of primes that are known to divide that integer, mapping to minimum and maximum known multiplicity.\n\nI would like to think about it and post a proposition/plan, but I am not sure what is the correct github way of doing this.\n\nUpdated _eval_is_odd to handle more complex inputs\nChanged the function _eval_is_odd to handle integer inputs that have a denominator, such as \r\n```\r\nn = Symbol('n',integer=True,even=True)\r\nm = Symbol('m',integer=true,even=True)\r\nx = Mul(n,m,S.Half)\r\n```\r\nThe example expression x is recognized by SymPy as an integer, but can be decomposed into n,m,and 1/2.  My new function evaluates the oddness of each part and uses this to calculate the oddness of the entire integer.\r\n\r\nAddresses issue #8648 \n",
  "hints_text": "I have added some handling for this instance in this [PR](https://github.com/sympy/sympy/pull/12320).  I did put thought into generalizing this even more for any integer divisor, but because we don't have the factorizations for the symbols, this does not seem easily possible.\nCan you add some tests (based on the other tests, it looks like `sympy/core/tests/test_arit.py` is the proper file). \n@asmeurer , [here](https://github.com/mikaylazgrace/sympy/blob/Working-on-issue-8648/sympy/core/mul.py) is the updated work (line 1266) incorporating some of the ideas we discussed above.  I'm unsure if I am calling the functions .fraction() and .as_coeff_mul() correctly.\r\n\r\nAn error raised by Travis in the original PR said that when I called the functions (around line 90 in mul.py), \"self is not defined\".  Any ideas on how to call the functions?  Below is how I did it (which didn't work):\r\n\r\n```\r\nclass Mul(Expr, AssocOp):\r\n\r\n    __slots__ = []\r\n\r\n    is_Mul = True\r\n    is_odd = self._eval_is_odd()\r\n    is_even = self._eval_is_even()\r\n```\r\n\r\n\r\n\nself is only defined inside of methods (where self is the first argument). There's no need to define is_odd or is_even. SymPy defines those automatically from _eval_is_odd and _eval_is_even.\n@asmeurer , Travis is giving me this error:       \r\n```\r\nFile \"/home/travis/virtualenv/python2.7.9/lib/python2.7/site-packages/sympy/core/mul.py\", line 1291, in _eval_is_odd\r\n        symbols = list(chain.from_iterable(symbols)) #.as_coeff_mul() returns a tuple for arg[1] so we change it to a list\r\n    TypeError: 'exp_polar' object is not iterable\r\n```\r\n\r\nI'm a bit unsure how to approach/fix this.  The added symbols = list... was in response to the fact that .as_coeff_mul() returns a tuple in arg[1] which isn't iterable.\nI'm not clear what you are trying to do on that line. You should be able to just have \r\n\r\n```\r\ncoeff, args = self.as_coeff_mul()\r\nfor arg in args:\r\n    ...\r\n```\nI had some equivalent of that, but Travis said that I was trying to iterate over a tuple. I thought .as_coeff_mul() returned a tuple for the second part? Maybe I'm incorrect there. \nI just made a small change that might solve it:  I'm looping over symbols instead of symbols.arg[1].  \r\n\r\nI also changed .as_coeff_mul() per your suggestion (around line 1288):\r\n```\r\n        if is_integer:\r\n            coeff,symbols = self.as_coeff_mul()\r\n            if coeff == 1 or coeff == -1:\r\n                r = True\r\n                for symbol in symbols:\r\n                ...\r\n```\r\n\n@mikaylazgrace Are you still interested to work on it?\nI will takeover and come up with a PR soon.",
  "created_at": "2021-08-26T11:12:47Z",
  "version": "1.9",
  "FAIL_TO_PASS": "[\"test_Mul_is_even_odd\", \"test_Pow_is_integer\"]",
  "PASS_TO_PASS": "[\"test_Add_Mul_Expr_args\", \"test_Add_Mul_is_finite\", \"test_Add_Mul_is_integer\", \"test_Add_as_coeff_mul\", \"test_Add_as_content_primitive\", \"test_Add_is_comparable\", \"test_Add_is_even_odd\", \"test_Add_is_irrational\", \"test_Add_is_negative_positive\", \"test_Add_is_nonpositive_nonnegative\", \"test_Add_is_positive_2\", \"test_Add_is_rational\", \"test_Add_is_zero\", \"test_AssocOp_doit\", \"test_Catalan_EulerGamma_prec\", \"test_Catalan_rewrite\", \"test_ComplexInfinity\", \"test_Div_By_Zero\", \"test_Float\", \"test_Float_RealElement\", \"test_Float_default_to_highprec_from_str\", \"test_Float_eq\", \"test_Float_eval\", \"test_Float_from_tuple\", \"test_Float_gcd_lcm_cofactors\", \"test_Float_idempotence\", \"test_Float_issue_2107\", \"test_GoldenRatio_expand\", \"test_Infinity\", \"test_Infinity_2\", \"test_Infinity_floor_ceiling_power\", \"test_Infinity_inequations\", \"test_IntegerInteger\", \"test_Integer_as_index\", \"test_Integer_ceiling_floor\", \"test_Integer_factors\", \"test_Integer_new\", \"test_Integer_precision\", \"test_Mod\", \"test_Mod_Pow\", \"test_Mod_is_integer\", \"test_Mod_is_nonposneg\", \"test_Mul_Infinity_Zero\", \"test_Mul_as_content_primitive\", \"test_Mul_does_not_cancel_infinities\", \"test_Mul_does_not_distribute_infinity\", \"test_Mul_doesnt_expand_exp\", \"test_Mul_hermitian_antihermitian\", \"test_Mul_is_comparable\", \"test_Mul_is_imaginary_real\", \"test_Mul_is_integer\", \"test_Mul_is_irrational\", \"test_Mul_is_negative_positive\", \"test_Mul_is_negative_positive_2\", \"test_Mul_is_nonpositive_nonnegative\", \"test_Mul_is_rational\", \"test_Mul_with_zero_infinite\", \"test_NaN\", \"test_NegativeInfinity\", \"test_NumberSymbol_comparison\", \"test_Number_cmp\", \"test_Number_new\", \"test_One_power\", \"test_Pow_as_coeff_mul_doesnt_expand\", \"test_Pow_as_content_primitive\", \"test_Pow_is_comparable\", \"test_Pow_is_even_odd\", \"test_Pow_is_finite\", \"test_Pow_is_negative_positive\", \"test_Pow_is_nonpositive_nonnegative\", \"test_Pow_is_real\", \"test_Pow_is_zero\", \"test_Rational_as_content_primitive\", \"test_Rational_cmp\", \"test_Rational_factors\", \"test_Rational_gcd_lcm_cofactors\", \"test_Rational_int\", \"test_Rational_new\", \"test_Symbol\", \"test_TribonacciConstant_expand\", \"test__neg__\", \"test_abc\", \"test_abs1\", \"test_accept_int\", \"test_add_flatten\", \"test_and_Integer\", \"test_arit0\", \"test_as_content_primitive\", \"test_bool_eq\", \"test_bug1\", \"test_bug3\", \"test_bug_sqrt\", \"test_comp1\", \"test_comparisons_with_unknown_type\", \"test_conversion_to_mpmath\", \"test_denest_add_mul\", \"test_div\", \"test_divmod\", \"test_dont_accept_str\", \"test_evenness_in_ternary_integer_product_with_even\", \"test_float_int_round\", \"test_float_mpf\", \"test_golden_ratio_rewrite_as_sqrt\", \"test_hashing_sympy_integers\", \"test_igcd\", \"test_igcd2\", \"test_igcd_lehmer\", \"test_igcdex\", \"test_ilcm\", \"test_int\", \"test_int_NumberSymbols\", \"test_integer_log\", \"test_integer_nthroot_overflow\", \"test_invert_Integer\", \"test_invert_numbers\", \"test_isqrt\", \"test_issue_10020\", \"test_issue_10063\", \"test_issue_13890\", \"test_issue_14289\", \"test_issue_14392\", \"test_issue_17130\", \"test_issue_18507\", \"test_issue_3321\", \"test_issue_3423\", \"test_issue_3449\", \"test_issue_3514_18626\", \"test_issue_3531\", \"test_issue_3531b\", \"test_issue_3692\", \"test_issue_4107\", \"test_issue_4122\", \"test_issue_4611\", \"test_issue_5126\", \"test_issue_5160_6087_6089_6090\", \"test_issue_5460\", \"test_issue_5919\", \"test_issue_6001\", \"test_issue_6040\", \"test_issue_6077\", \"test_issue_6082\", \"test_issue_6133\", \"test_issue_6349\", \"test_issue_6611a\", \"test_issue_6640\", \"test_issue_7742\", \"test_issue_8247_8354\", \"test_issue_9491\", \"test_latex\", \"test_lshift_Integer\", \"test_make_args\", \"test_mod\", \"test_mod_inverse\", \"test_mod_pow\", \"test_mpf_norm\", \"test_mul_add_identity\", \"test_mul_coeff\", \"test_mul_flatten_oo\", \"test_mul_zero_detection\", \"test_ncmul\", \"test_ncpow\", \"test_no_len\", \"test_oddness_in_ternary_integer_product_with_even\", \"test_or_Integer\", \"test_pi_Pi\", \"test_polar\", \"test_pow\", \"test_pow2\", \"test_pow3\", \"test_pow_E\", \"test_pow_im\", \"test_pow_issue_3516\", \"test_powerbug\", \"test_powers\", \"test_powers_Float\", \"test_powers_Integer\", \"test_powers_Rational\", \"test_product_irrational\", \"test_real_Pow\", \"test_real_bug\", \"test_real_mul\", \"test_relational\", \"test_rounding_issue_4172\", \"test_rshift_Integer\", \"test_seterr\", \"test_simplify_AlgebraicNumber\", \"test_special_numbers\", \"test_suppressed_evaluation\", \"test_tribonacci_constant_rewrite_as_sqrt\", \"test_xor_Integer\", \"test_zero_not_false\", \"test_zoo\"]",
  "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91",
  "patch_files": [
    "sympy/core/mul.py",
    "sympy/core/numbers.py"
  ],
  "test_patch_files": [
    "sympy/core/tests/test_arit.py",
    "sympy/core/tests/test_numbers.py"
  ],
  "patch_diff_details": {
    "sympy/core/mul.py": {
      "diffs": [
        {
          "start_line_old": 1337,
          "end_line_old": 1337,
          "file_pos": 2,
          "file_context_length": 19021,
          "pos": 4,
          "context_length": 2004
        },
        {
          "start_line_old": 1345,
          "end_line_old": 1349,
          "file_pos": 2,
          "file_context_length": 19021,
          "pos": 4,
          "context_length": 2004
        },
        {
          "start_line_old": 1367,
          "end_line_old": 1372,
          "file_pos": 2,
          "file_context_length": 19021,
          "pos": 4,
          "context_length": 2004
        },
        {
          "start_line_old": 1548,
          "end_line_old": 1577,
          "file_pos": 2,
          "file_context_length": 19021,
          "closest_snippet_id": "/tmp/repos/sympy/sympy/core/mul.py_Mul._eval_is_even_Mul._eval_is_composite.5.1.1",
          "closest_snippet_line_distance": 18
        }
      ]
    },
    "sympy/core/numbers.py": {
      "diffs": [
        {
          "start_line_old": 1575,
          "end_line_old": 1575,
          "file_pos": 5,
          "file_context_length": 64875,
          "closest_snippet_id": "/tmp/repos/sympy/sympy/core/numbers.py_Integer._eval_is_prime_Integer.__invert__.1.1",
          "closest_snippet_line_distance": 832
        }
      ]
    }
  },
  "vectors": 9561,
  "snippets": [
    {
      "position": 1,
      "id": "/tmp/repos/sympy/sympy/assumptions/handlers/ntheory.py___27___27.4.3.3.1.1",
      "distance": 0.6554756760597229,
      "file_path": "sympy/assumptions/handlers/ntheory.py",
      "start_line": 144,
      "end_line": 183,
      "tokens": 275,
      "context_length": 275
    },
    {
      "position": 2,
      "id": "/tmp/repos/sympy/sympy/assumptions/handlers/ntheory.py___28_",
      "distance": 0.682822585105896,
      "file_path": "sympy/assumptions/handlers/ntheory.py",
      "start_line": 185,
      "end_line": 268,
      "tokens": 508,
      "context_length": 783
    },
    {
      "position": 3,
      "id": "/tmp/repos/sympy/sympy/assumptions/handlers/ntheory.py_1___26.1.1.1",
      "distance": 0.7672297954559326,
      "file_path": "sympy/assumptions/handlers/ntheory.py",
      "start_line": 1,
      "end_line": 142,
      "tokens": 843,
      "context_length": 1626
    },
    {
      "position": 4,
      "id": "/tmp/repos/sympy/sympy/core/mul.py_Mul._eval_is_integer_Mul._eval_is_extended_real.1.1",
      "distance": 0.7914131879806519,
      "file_path": "sympy/core/mul.py",
      "start_line": 1336,
      "end_line": 1381,
      "tokens": 378,
      "context_length": 2004,
      "file_pos": 2
    },
    {
      "position": 5,
      "id": "/tmp/repos/sympy/sympy/core/mul.py_Mul._eval_is_extended_negative_Mul._eval_is_odd.2.5.1.1",
      "distance": 0.8044412136077881,
      "file_path": "sympy/core/mul.py",
      "start_line": 1544,
      "end_line": 1569,
      "tokens": 162,
      "context_length": 2166,
      "file_pos": 2
    },
    {
      "position": 6,
      "id": "/tmp/repos/sympy/sympy/assumptions/handlers/sets.py___74___74.7.1.2.3.2.3.1",
      "distance": 0.8170214891433716,
      "file_path": "sympy/assumptions/handlers/sets.py",
      "start_line": 553,
      "end_line": 607,
      "tokens": 463,
      "context_length": 2629
    },
    {
      "position": 7,
      "id": "/tmp/repos/sympy/sympy/core/mul.py_Mul.as_powers_dict_Mul.48",
      "distance": 0.826362133026123,
      "file_path": "sympy/core/mul.py",
      "start_line": 1233,
      "end_line": 1335,
      "tokens": 867,
      "context_length": 3496,
      "file_pos": 3
    },
    {
      "position": 8,
      "id": "/tmp/repos/sympy/sympy/functions/combinatorial/factorials.py_factorial2._eval_is_even_factorial2._eval_rewrite_as_gamma.2.1",
      "distance": 0.8280941247940063,
      "file_path": "sympy/functions/combinatorial/factorials.py",
      "start_line": 442,
      "end_line": 490,
      "tokens": 424,
      "context_length": 3920
    },
    {
      "position": 9,
      "id": "/tmp/repos/sympy/sympy/core/numbers.py_Integer.__lt___Integer._eval_is_odd.1.1",
      "distance": 0.8316442966461182,
      "file_path": "sympy/core/numbers.py",
      "start_line": 2261,
      "end_line": 2297,
      "tokens": 231,
      "context_length": 4151,
      "file_pos": 5
    },
    {
      "position": 10,
      "id": "/tmp/repos/sympy/sympy/core/numbers.py_Integer._eval_is_prime_Integer.__invert__.1.1",
      "distance": 0.8336799144744873,
      "file_path": "sympy/core/numbers.py",
      "start_line": 2407,
      "end_line": 2500,
      "tokens": 669,
      "context_length": 4820,
      "file_pos": 5
    },
    {
      "position": 11,
      "id": "/tmp/repos/sympy/sympy/ntheory/primetest.py_isprime.10_isprime.34",
      "distance": 0.8427223563194275,
      "file_path": "sympy/ntheory/primetest.py",
      "start_line": 556,
      "end_line": 601,
      "tokens": 799,
      "context_length": 5619
    },
    {
      "position": 12,
      "id": "/tmp/repos/sympy/sympy/ntheory/factor_.py_is_perfect_is_perfect.11.1.2.1",
      "distance": 0.8439652919769287,
      "file_path": "sympy/ntheory/factor_.py",
      "start_line": 2348,
      "end_line": 2425,
      "tokens": 744,
      "context_length": 6363
    },
    {
      "position": 13,
      "id": "/tmp/repos/sympy/sympy/core/power.py_Pow._eval_is_odd_Pow._eval_is_polar.1.1",
      "distance": 0.844833493232727,
      "file_path": "sympy/core/power.py",
      "start_line": 747,
      "end_line": 789,
      "tokens": 339,
      "context_length": 6702
    },
    {
      "position": 14,
      "id": "/tmp/repos/sympy/sympy/assumptions/handlers/order.py___16___17.4.3.1.1",
      "distance": 0.8473993539810181,
      "file_path": "sympy/assumptions/handlers/order.py",
      "start_line": 79,
      "end_line": 117,
      "tokens": 255,
      "context_length": 6957
    },
    {
      "position": 15,
      "id": "/tmp/repos/sympy/sympy/functions/combinatorial/numbers.py_euler.eval_euler.eval.2.1.1.1",
      "distance": 0.8486862182617188,
      "file_path": "sympy/functions/combinatorial/numbers.py",
      "start_line": 992,
      "end_line": 1029,
      "tokens": 355,
      "context_length": 7312
    },
    {
      "position": 16,
      "id": "/tmp/repos/sympy/sympy/core/mul.py_Mul._eval_is_even_Mul._eval_is_composite.5.1.1",
      "distance": 0.8503906726837158,
      "file_path": "sympy/core/mul.py",
      "start_line": 1571,
      "end_line": 1595,
      "tokens": 177,
      "context_length": 7489,
      "file_pos": 10
    },
    {
      "position": 17,
      "id": "/tmp/repos/sympy/sympy/ntheory/residue_ntheory.py_jacobi_symbol_jacobi_symbol.12.1",
      "distance": 0.8505253791809082,
      "file_path": "sympy/ntheory/residue_ntheory.py",
      "start_line": 941,
      "end_line": 1026,
      "tokens": 695,
      "context_length": 8184
    },
    {
      "position": 18,
      "id": "/tmp/repos/sympy/sympy/functions/special/polynomials.py_assoc_legendre.eval_assoc_legendre.eval.4.3.1",
      "distance": 0.851250171661377,
      "file_path": "sympy/functions/special/polynomials.py",
      "start_line": 928,
      "end_line": 943,
      "tokens": 265,
      "context_length": 8449
    },
    {
      "position": 19,
      "id": "/tmp/repos/sympy/sympy/ntheory/factor_.py_1_32.1",
      "distance": 0.8556262254714966,
      "file_path": "sympy/ntheory/factor_.py",
      "start_line": 1,
      "end_line": 62,
      "tokens": 727,
      "context_length": 9176
    },
    {
      "position": 20,
      "id": "/tmp/repos/sympy/sympy/functions/combinatorial/numbers.py_bernoulli.eval_bernoulli.eval.2.1.1.1",
      "distance": 0.8653010129928589,
      "file_path": "sympy/functions/combinatorial/numbers.py",
      "start_line": 480,
      "end_line": 524,
      "tokens": 386,
      "context_length": 9562
    },
    {
      "position": 21,
      "id": "/tmp/repos/sympy/sympy/solvers/solveset.py__invert_modular.2__invert_modular.9.1",
      "distance": 0.8693318367004395,
      "file_path": "sympy/solvers/solveset.py",
      "start_line": 1264,
      "end_line": 1328,
      "tokens": 658,
      "context_length": 10220
    },
    {
      "position": 22,
      "id": "/tmp/repos/sympy/sympy/concrete/summations.py_eval_sum_residue.is_even_function_eval_sum_residue.is_even_function.6.1",
      "distance": 0.8738841414451599,
      "file_path": "sympy/concrete/summations.py",
      "start_line": 1414,
      "end_line": 1420,
      "tokens": 149,
      "context_length": 10369
    }
  ],
  "files": [
    {
      "file_path": "sympy/assumptions/handlers/ntheory.py",
      "position": 1,
      "tokens": 1628,
      "context_length": 1628
    },
    {
      "file_path": "sympy/core/mul.py",
      "position": 2,
      "tokens": 17393,
      "context_length": 19021
    },
    {
      "file_path": "sympy/assumptions/handlers/sets.py",
      "position": 3,
      "tokens": 5545,
      "context_length": 24566
    },
    {
      "file_path": "sympy/functions/combinatorial/factorials.py",
      "position": 4,
      "tokens": 9338,
      "context_length": 33904
    },
    {
      "file_path": "sympy/core/numbers.py",
      "position": 5,
      "tokens": 30971,
      "context_length": 64875
    },
    {
      "file_path": "sympy/ntheory/primetest.py",
      "position": 6,
      "tokens": 6144,
      "context_length": 71019
    },
    {
      "file_path": "sympy/ntheory/factor_.py",
      "position": 7,
      "tokens": 20913,
      "context_length": 91932
    },
    {
      "file_path": "sympy/core/power.py",
      "position": 8,
      "tokens": 17141,
      "context_length": 109073
    },
    {
      "file_path": "sympy/assumptions/handlers/order.py",
      "position": 9,
      "tokens": 2821,
      "context_length": 111894
    },
    {
      "file_path": "sympy/functions/combinatorial/numbers.py",
      "position": 10,
      "tokens": 18982,
      "context_length": 130876
    },
    {
      "file_path": "sympy/ntheory/residue_ntheory.py",
      "position": 11,
      "tokens": 11833,
      "context_length": 142709
    },
    {
      "file_path": "sympy/functions/special/polynomials.py",
      "position": 12,
      "tokens": 12992,
      "context_length": 155701
    },
    {
      "file_path": "sympy/solvers/solveset.py",
      "position": 13,
      "tokens": 33410,
      "context_length": 189111
    },
    {
      "file_path": "sympy/concrete/summations.py",
      "position": 14,
      "tokens": 14212,
      "context_length": 203323
    }
  ]
}